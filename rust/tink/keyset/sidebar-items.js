initSidebarItems({"fn":[["validate","Validate the given key set."],["validate_key","Validate the given key."],["validate_key_version","Check whether the given version is valid. The version is valid only if it is the range [0..max_expected]."]],"mod":[["b64","Manual serialization implementations for base64-encoded binary data."],["insecure","Module for test code methods to read or write cleartext keyset material."],["key_material_type","Manual JSON serialization for `KeyMaterialType` enums."],["key_status_type","Manual JSON serialization for `KeyStatusType` enums."],["output_prefix_type","Manual JSON serialization for `OutputPrefixType` enums."]],"struct":[["BinaryReader","`BinaryReader` deserializes a keyset from binary proto format."],["BinaryWriter","`BinaryWriter` serializes a keyset into binary proto format."],["Handle","`Handle` provides access to a [`Keyset`] protobuf, to limit the exposure of actual protocol buffers that hold sensitive key material."],["JsonReader","`JsonReader` deserializes a keyset from JSON format."],["JsonWriter","`JsonWriter` serializes a keyset into JSON format."],["Manager","Manager manages a `Keyset`-proto, with convenience methods that rotate, disable, enable or destroy keys. Note: It is not thread-safe."],["MemReaderWriter","`MemReaderWriter` implements `keyset::Reader` and `keyset.Writer` with in-memory storage."]],"trait":[["Reader","`Reader` knows how to read a `Keyset` or an `EncryptedKeyset` from some source. In order to turn a `Reader` into a `keyset::Handle` for use, callers must use `insecure::new_handle` or `Handle::read` (with encryption)."],["Writer","`Writer` knows how to write a `Keyset` or an `EncryptedKeyset` to some source."]]});