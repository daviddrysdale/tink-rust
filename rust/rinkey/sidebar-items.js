initSidebarItems({"enum":[["Command","Top-level command to perform."],["KeysetFormat","File format for a keyset."]],"fn":[["add_key","Generate and add a new key to a keyset"],["convert_keyset","Change format, encrypt or decrypt a keyset"],["create_keyset","Create a new keyset"],["create_public_keyset","Create a public keyset from an existing private keyset"],["delete_key","Delete a key with some key id in a keyset"],["destroy_key","Destroy a key with some key id in a keyset"],["disable_key","Disable a key with some key id in a keyset"],["enable_key","Enable a key with some key id in a keyset"],["get_kms_client","Build and register a KMS Client."],["get_manager","Return a [`tink::keyset::Manager`] for a keyset identified by [`InOptions`]"],["list_key_templates","List available key template names"],["list_keyset","List keys in a keyset"],["main",""],["promote_key","Promote a specified key to primary"],["put_manager","Write out the keyset identified by a [`tink::keyset::Manager`] with the specified output options."],["read_keyset","Return a [`tink::keyset::Handle`] for a keyset identified by [`InOptions`]"],["read_keyset_with","Return a [`tink::keyset::Handle`] for a keyset read in via `reader`."],["rotate_keyset","Generate, add a new key to an existing keyset and set the new key as the primary key"],["write_keyset","Write out the keyset identified by a [`tink::keyset::Handle`] with the specified output options."],["write_keyset_with","Write out the keyset identified by a [`tink::keyset::Handle`] using the given `writer`."]],"struct":[["AddRotateOptions","Options for add-key or rotate-keyset command."],["ConvertKeysetOptions","Options for convert-keyset command."],["CreateKeysetOptions","Options for command to create a keyset."],["InOptions","Common args for commands that read from file."],["KeyIdOptions","Options for commands that take a key id option, e.g., enable, disable or destroy."],["KeyTemplate","Wrapper for [`tink::proto::KeyTemplate`] to allow the [`FromStr`] trait to be implemented."],["KeysetReader","Wrapper for [`std::io::Read`] to allow the [`FromStr`] trait to be implemented."],["KeysetWriter","Wrapper for [`std::io::Write`] to allow the [`FromStr`] trait to be implemented."],["OutOptions","Common args for commands that write to file and need credential."],["PublicKeysetOptions","Options for create-public-keyset command."],["WrappingOptions","Common args for key wrapping/unwrapping."]]});