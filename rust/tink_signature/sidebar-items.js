initSidebarItems({"constant":[["ECDSA_SIGNER_KEY_VERSION","Maximal version of ECDSA keys."],["ECDSA_SIGNER_TYPE_URL","Type URL of ECDSA keys that Tink supports."],["ECDSA_UNCOMPRESSED_POINT_PREFIX","Prefix for uncompressed elliptic curve points."],["ECDSA_VERIFIER_KEY_VERSION","Maximal version of ECDSA keys."],["ECDSA_VERIFIER_TYPE_URL","Type URL of ECDSA keys that Tink supports."],["ED25519_SIGNER_KEY_VERSION","Maximal version of ED25519 keys."],["ED25519_SIGNER_TYPE_URL","Type URL of ED25519 keys that Tink supports."],["ED25519_VERIFIER_KEY_VERSION","Maximal version of ED25519 keys."],["ED25519_VERIFIER_TYPE_URL","Type URL of ED25519 keys that Tink supports."],["UPSTREAM_VERSION","The upstream Tink version that this Rust port is based on."]],"fn":[["ecdsa_p256_key_p1363_template","Return a [`KeyTemplate`] that generates a new ECDSA private key with the following parameters:"],["ecdsa_p256_key_template","Return a [`KeyTemplate`] that generates a new ECDSA private key with the following parameters:"],["ecdsa_p256_key_without_prefix_template","Return a [`KeyTemplate`] that generates a new ECDSA private key with the following parameters:"],["ecdsa_p384_key_template","Return a [`KeyTemplate`] that generates a new ECDSA private key with the following parameters:"],["ecdsa_p384_key_without_prefix_template","Return a [`KeyTemplate`] that generates a new ECDSA private key with the following parameters:"],["ecdsa_p521_key_template","Return a [`KeyTemplate`] that generates a new ECDSA private key with the following parameters:"],["ecdsa_p521_key_without_prefix_template","Return a [`KeyTemplate`] that generates a new ECDSA private key with the following parameters:"],["ed25519_key_template","Return a [`KeyTemplate`] that generates a new ED25519 private key."],["ed25519_key_without_prefix_template","Return a [`KeyTemplate`] that generates a new ED25519 private key."],["init","Initialize the `tink-signature` crate, registering its primitives so they are available via Tink."],["new_signer","Return a [`tink_core::Signer`] primitive from the given keyset handle."],["new_verifier","Return a [`tink_core::Verifier`] primitive from the given keyset handle."]],"mod":[["subtle","This module provides subtle implementations of digital signature primitives."]]});