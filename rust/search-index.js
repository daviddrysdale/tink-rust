var searchIndex = JSON.parse('{\
"example_aead":{"doc":"Example program demonstrating `tink-aead`","i":[[5,"main","example_aead","",null,[[]]]],"p":[]},\
"example_daead":{"doc":"Example program demonstrating `tink-daead`","i":[[5,"main","example_daead","",null,[[]]]],"p":[]},\
"example_keygen":{"doc":"Example program demonstrating key generation.","i":[[5,"main","example_keygen","",null,[[]]]],"p":[]},\
"example_kms":{"doc":"Example program demonstrating `tink-awskms`","i":[[5,"main","example_kms","",null,[[]]],[17,"KEY_URI","","",null,null],[17,"CRED_INI_FILE","","",null,null]],"p":[]},\
"example_mac":{"doc":"Example program demonstrating `tink-mac`","i":[[5,"main","example_mac","",null,[[]]]],"p":[]},\
"example_signature":{"doc":"Example program demonstrating `tink-signature`","i":[[5,"main","example_signature","",null,[[]]]],"p":[]},\
"example_streaming":{"doc":"Example program demonstrating `tink-streaming-aead`","i":[[5,"main","example_streaming","",null,[[]]],[17,"CHUNK_SIZE","","",null,null],[17,"PT","","",null,null]],"p":[]},\
"rinkey":{"doc":"Command line utility for keyset management.","i":[[3,"KeysetReader","rinkey","Wrapper for [`std::io::Read`] to allow the [`FromStr`]…",null,null],[12,"0","","",0,null],[3,"KeysetWriter","","Wrapper for [`std::io::Write`] to allow the [`FromStr`]…",null,null],[12,"0","","",1,null],[3,"KeyTemplate","","Wrapper for [`tink::proto::KeyTemplate`] to allow the…",null,null],[12,"0","","",2,null],[3,"WrappingOptions","","Common args for key wrapping/unwrapping.",null,null],[12,"master_key_uri","","",3,null],[12,"credential_path","","",3,null],[3,"InOptions","","Common args for commands that read from file.",null,null],[12,"in_file","","",4,null],[12,"in_format","","",4,null],[12,"wrap_opts","","",4,null],[3,"OutOptions","","Common args for commands that write to file and need…",null,null],[12,"out_file","","",5,null],[12,"out_format","","",5,null],[3,"PublicKeysetOptions","","Options for create-public-keyset command.",null,null],[12,"in_opts","","",6,null],[12,"out_opts","","",6,null],[3,"AddRotateOptions","","Options for add-key or rotate-keyset command.",null,null],[12,"in_opts","","",7,null],[12,"out_opts","","",7,null],[12,"key_template","","",7,null],[3,"ConvertKeysetOptions","","Options for convert-keyset command.",null,null],[12,"in_opts","","",8,null],[12,"out_opts","","",8,null],[12,"new_master_key_uri","","",8,null],[12,"new_credential","","",8,null],[3,"CreateKeysetOptions","","Options for command to create a keyset.",null,null],[12,"wrap_opts","","",9,null],[12,"out_opts","","",9,null],[12,"key_template","","",9,null],[3,"KeyIdOptions","","Options for commands that take a key id option, e.g.,…",null,null],[12,"in_opts","","",10,null],[12,"out_opts","","",10,null],[12,"key_id","","",10,null],[4,"KeysetFormat","","File format for a keyset.",null,null],[13,"Json","","",11,null],[13,"Binary","","",11,null],[4,"Command","","Top-level command to perform.",null,null],[13,"AddKey","","",12,null],[13,"ConvertKeyset","","",12,null],[13,"CreateKeyset","","",12,null],[13,"CreatePublicKeyset","","",12,null],[13,"DeleteKey","","",12,null],[13,"DestroyKey","","",12,null],[13,"DisableKey","","",12,null],[13,"EnableKey","","",12,null],[13,"ListKeyset","","",12,null],[13,"ListKeyTemplates","","",12,null],[13,"RotateKeyset","","",12,null],[13,"PromoteKey","","",12,null],[5,"main","","",null,[[]]],[5,"add_key","","Generate and add a new key to a keyset",null,[[["addrotateoptions",3]]]],[5,"convert_keyset","","Change format, encrypt or decrypt a keyset",null,[[["convertkeysetoptions",3]]]],[5,"create_keyset","","Create a new keyset",null,[[["createkeysetoptions",3]]]],[5,"create_public_keyset","","Create a public keyset from an existing private keyset",null,[[["publickeysetoptions",3]]]],[5,"delete_key","","Delete a key with some key id in a keyset",null,[[["keyidoptions",3]]]],[5,"destroy_key","","Destroy a key with some key id in a keyset",null,[[["keyidoptions",3]]]],[5,"disable_key","","Disable a key with some key id in a keyset",null,[[["keyidoptions",3]]]],[5,"enable_key","","Enable a key with some key id in a keyset",null,[[["keyidoptions",3]]]],[5,"list_keyset","","List keys in a keyset",null,[[["inoptions",3]]]],[5,"list_key_templates","","List available key template names",null,[[]]],[5,"rotate_keyset","","Generate, add a new key to an existing keyset and set the…",null,[[["addrotateoptions",3]]]],[5,"promote_key","","Promote a specified key to primary",null,[[["keyidoptions",3]]]],[5,"get_manager","","Return a [`tink::keyset::Manager`] for a keyset identified…",null,[[["inoptions",3]],["manager",3]]],[5,"put_manager","","Write out the keyset identified by a…",null,[[["manager",3],["wrappingoptions",3],["outoptions",3]]]],[5,"read_keyset","","Return a [`tink::keyset::Handle`] for a keyset identified…",null,[[["inoptions",3]],["handle",3]]],[5,"read_keyset_with","","Return a [`tink::keyset::Handle`] for a keyset read in via…",null,[[["reader",8],["wrappingoptions",3]],["handle",3]]],[5,"write_keyset","","Write out the keyset identified by a…",null,[[["handle",3],["wrappingoptions",3],["outoptions",3]]]],[5,"write_keyset_with","","Write out the keyset identified by a…",null,[[["handle",3],["wrappingoptions",3],["writer",8]]]],[5,"get_kms_client","","Build and register a KMS Client.",null,[[["wrappingoptions",3]],[["result",4],["arc",3],["tinkerror",3]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"vzip","","",12,[[]]],[11,"clone","","",11,[[],["keysetformat",4]]],[11,"clone","","",0,[[],["keysetreader",3]]],[11,"clone","","",1,[[],["keysetwriter",3]]],[11,"clone","","",2,[[],["keytemplate",3]]],[11,"clone","","",3,[[],["wrappingoptions",3]]],[11,"clone","","",4,[[],["inoptions",3]]],[11,"clone","","",5,[[],["outoptions",3]]],[11,"clone","","",6,[[],["publickeysetoptions",3]]],[11,"clone","","",7,[[],["addrotateoptions",3]]],[11,"clone","","",8,[[],["convertkeysetoptions",3]]],[11,"clone","","",9,[[],["createkeysetoptions",3]]],[11,"clone","","",10,[[],["keyidoptions",3]]],[11,"clone","","",12,[[],["command",4]]],[11,"from_str","","",11,[[],["result",4]]],[11,"from_str","","",0,[[],["result",4]]],[11,"from_str","","",1,[[],["result",4]]],[11,"from_str","","",2,[[],["result",4]]],[11,"read","","",0,[[],["result",6]]],[11,"write","","",1,[[],["result",6]]],[11,"flush","","",1,[[],["result",6]]],[11,"clap","","",11,[[],["app",3]]],[11,"from_clap","","",11,[[["argmatches",3]]]],[11,"clap","","",3,[[],["app",3]]],[11,"from_clap","","",3,[[["argmatches",3]]]],[11,"clap","","",4,[[],["app",3]]],[11,"from_clap","","",4,[[["argmatches",3]]]],[11,"clap","","",5,[[],["app",3]]],[11,"from_clap","","",5,[[["argmatches",3]]]],[11,"clap","","",6,[[],["app",3]]],[11,"from_clap","","",6,[[["argmatches",3]]]],[11,"clap","","",7,[[],["app",3]]],[11,"from_clap","","",7,[[["argmatches",3]]]],[11,"clap","","",8,[[],["app",3]]],[11,"from_clap","","",8,[[["argmatches",3]]]],[11,"clap","","",9,[[],["app",3]]],[11,"from_clap","","",9,[[["argmatches",3]]]],[11,"clap","","",10,[[],["app",3]]],[11,"from_clap","","",10,[[["argmatches",3]]]],[11,"clap","","",12,[[],["app",3]]],[11,"from_clap","","",12,[[["argmatches",3]]]],[11,"augment_clap","","",11,[[["app",3]],["app",3]]],[11,"from_subcommand","","",11,[[],["option",4]]],[11,"is_subcommand","","",11,[[]]],[11,"augment_clap","","",3,[[["app",3]],["app",3]]],[11,"is_subcommand","","",3,[[]]],[11,"augment_clap","","",4,[[["app",3]],["app",3]]],[11,"is_subcommand","","",4,[[]]],[11,"augment_clap","","",5,[[["app",3]],["app",3]]],[11,"is_subcommand","","",5,[[]]],[11,"augment_clap","","",6,[[["app",3]],["app",3]]],[11,"is_subcommand","","",6,[[]]],[11,"augment_clap","","",7,[[["app",3]],["app",3]]],[11,"is_subcommand","","",7,[[]]],[11,"augment_clap","","",8,[[["app",3]],["app",3]]],[11,"is_subcommand","","",8,[[]]],[11,"augment_clap","","",9,[[["app",3]],["app",3]]],[11,"is_subcommand","","",9,[[]]],[11,"augment_clap","","",10,[[["app",3]],["app",3]]],[11,"is_subcommand","","",10,[[]]],[11,"augment_clap","","",12,[[["app",3]],["app",3]]],[11,"from_subcommand","","",12,[[],["option",4]]],[11,"is_subcommand","","",12,[[]]]],"p":[[3,"KeysetReader"],[3,"KeysetWriter"],[3,"KeyTemplate"],[3,"WrappingOptions"],[3,"InOptions"],[3,"OutOptions"],[3,"PublicKeysetOptions"],[3,"AddRotateOptions"],[3,"ConvertKeysetOptions"],[3,"CreateKeysetOptions"],[3,"KeyIdOptions"],[4,"KeysetFormat"],[4,"Command"]]},\
"tink":{"doc":"Core crate for Tink.","i":[[4,"Primitive","tink","The primitives available in Tink.",null,null],[13,"Aead","","",0,null],[13,"DeterministicAead","","",0,null],[13,"HybridDecrypt","","",0,null],[13,"HybridEncrypt","","",0,null],[13,"Mac","","",0,null],[13,"Prf","","",0,null],[13,"Signer","","",0,null],[13,"StreamingAead","","",0,null],[13,"Verifier","","",0,null],[0,"cryptofmt","","Provides constants and convenience methods that define the…",null,null],[5,"output_prefix","tink::cryptofmt","Generate the prefix of ciphertexts produced by the crypto…",null,[[["key",3]],[["vec",3],["tinkerror",3],["result",4]]]],[17,"NON_RAW_PREFIX_SIZE","","Prefix size of Tink and Legacy key types.",null,null],[17,"LEGACY_PREFIX_SIZE","","Prefix size of legacy key types. The prefix starts with…",null,null],[17,"LEGACY_START_BYTE","","First byte of the prefix of legacy key types.",null,null],[17,"TINK_PREFIX_SIZE","","Prefix size of Tink key types. The prefix starts with \\\\x01…",null,null],[17,"TINK_START_BYTE","","First byte of the prefix of Tink key types.",null,null],[17,"RAW_PREFIX_SIZE","","Prefix size of Raw key types. Raw prefix is empty.",null,null],[17,"RAW_PREFIX","","Empty prefix for Raw key types.",null,null],[0,"keyset","tink","Provide methods to generate, read, write or validate…",null,null],[3,"BinaryReader","tink::keyset","`BinaryReader` deserializes a keyset from binary proto…",null,null],[3,"BinaryWriter","","`BinaryWriter` serializes a keyset into binary proto format.",null,null],[3,"Handle","","`Handle` provides access to a [`Keyset`] protobuf, to…",null,null],[3,"JsonReader","","`JsonReader` deserializes a keyset from JSON format.",null,null],[3,"JsonWriter","","`JsonWriter` serializes a keyset into JSON format.",null,null],[3,"Manager","","Manager manages a `Keyset`-proto, with convenience methods…",null,null],[3,"MemReaderWriter","","`MemReaderWriter` implements `keyset::Reader` and…",null,null],[12,"keyset","","",1,null],[12,"encrypted_keyset","","",1,null],[5,"validate_key_version","","Check whether the given version is valid. The version is…",null,[[],[["tinkerror",3],["result",4]]]],[5,"validate","","Validate the given key set.",null,[[["keyset",3]],[["tinkerror",3],["result",4]]]],[5,"validate_key","","Validate the given key.",null,[[["key",3]],[["tinkerror",3],["result",4]]]],[11,"new","","Return a new [`BinaryReader`] that will read from `r`.",2,[[]]],[11,"new","","Return a new [`BinaryWriter`] that will write to `w`.",3,[[]]],[11,"new","","Create a keyset handle that contains a single fresh key…",4,[[["keytemplate",3]],[["result",4],["tinkerror",3]]]],[11,"new_with_no_secrets","","Create a new instance of [`Handle`] using the given…",4,[[["keyset",3]],[["result",4],["tinkerror",3]]]],[11,"read","","Attempt to create a [`Handle`] from an encrypted keyset…",4,[[["box",3],["aead",8]],[["result",4],["tinkerror",3]]]],[11,"read_with_no_secrets","","Attempt to create a [`Handle`] from a keyset obtained via…",4,[[],[["result",4],["tinkerror",3]]]],[11,"public","","Return a [`Handle`] of the public keys if the managed…",4,[[],[["result",4],["tinkerror",3]]]],[11,"write","","Encrypts and writes the enclosed [`Keyset`].",4,[[["box",3],["aead",8]],[["tinkerror",3],["result",4]]]],[11,"write_with_no_secrets","","Export the keyset in `h` to the given `Writer` returning…",4,[[],[["tinkerror",3],["result",4]]]],[11,"primitives","","Create a set of primitives corresponding to the keys with…",4,[[],[["result",4],["primitiveset",3],["tinkerror",3]]]],[11,"primitives_with_key_manager","","Create a set of primitives corresponding to the keys with…",4,[[["option",4],["arc",3]],[["result",4],["primitiveset",3],["tinkerror",3]]]],[11,"keyset_info","","Return [`KeysetInfo`] representation of the managed…",4,[[],["keysetinfo",3]]],[11,"new","","Return a new [`JsonReader`] that will read from `r`.",5,[[]]],[11,"new","","Return a new [`JsonWriter`] that will write to `w`.",6,[[]]],[0,"key_status_type","","Manual JSON serialization for `KeyStatusType` enums.",null,null],[5,"serialize","tink::keyset::key_status_type","",null,[[["serializer",8]],["result",4]]],[5,"deserialize","","",null,[[["deserializer",8]],["result",4]]],[0,"output_prefix_type","tink::keyset","Manual JSON serialization for `OutputPrefixType` enums.",null,null],[5,"serialize","tink::keyset::output_prefix_type","",null,[[["serializer",8]],["result",4]]],[5,"deserialize","","",null,[[["deserializer",8]],["result",4]]],[0,"key_material_type","tink::keyset","Manual JSON serialization for `KeyMaterialType` enums.",null,null],[5,"serialize","tink::keyset::key_material_type","",null,[[["serializer",8]],["result",4]]],[5,"deserialize","","",null,[[["deserializer",8]],["result",4]]],[0,"b64","tink::keyset","Manual serialization implementations for base64-encoded…",null,null],[5,"serialize","tink::keyset::b64","",null,[[["serializer",8]],["result",4]]],[5,"deserialize","","",null,[[["deserializer",8]],[["vec",3],["result",4]]]],[11,"new","tink::keyset","Create a new instance with an empty `Keyset`.",7,[[]]],[11,"new_from_handle","","Create a new instance from the given `Handle`.",7,[[["handle",3]]]],[11,"rotate","","Generate a fresh key using the given key template and set…",7,[[["keytemplate",3]],[["keyid",6],["tinkerror",3],["result",4]]]],[11,"add","","Generate a fresh key using the given key template, and…",7,[[["keytemplate",3]],[["keyid",6],["tinkerror",3],["result",4]]]],[11,"handle","","Create a new `Handle` for the managed keyset.",7,[[],[["result",4],["handle",3],["tinkerror",3]]]],[11,"enable","","Sets the status of the specified key to…",7,[[["keyid",6]],[["tinkerror",3],["result",4]]]],[11,"disable","","Sets the status of the specified key to…",7,[[["keyid",6]],[["tinkerror",3],["result",4]]]],[11,"destroy","","Sets the status of the specified key to…",7,[[["keyid",6]],[["tinkerror",3],["result",4]]]],[11,"delete","","Removes the specifed key from the managed keyset. Succeeds…",7,[[["keyid",6]],[["tinkerror",3],["result",4]]]],[11,"set_primary","","Sets the specified key as the primary. Succeeds only if…",7,[[["keyid",6]],[["tinkerror",3],["result",4]]]],[11,"key_count","","Return the count of all keys in the keyset.",7,[[]]],[0,"insecure","","Module for test code methods to read or write cleartext…",null,null],[5,"keyset_material","tink::keyset::insecure","Return the key material contained in a `Handle`.",null,[[["handle",3]],["keyset",3]]],[5,"new_handle","","Create a new instance of `Handle` using the given `Keyset`.",null,[[["keyset",3]],[["result",4],["handle",3],["tinkerror",3]]]],[5,"read","","Create a `Handle` from a cleartext keyset obtained via `r`.",null,[[],[["result",4],["handle",3],["tinkerror",3]]]],[5,"write","","Exports the keyset from `h` to the given writer `w`…",null,[[["handle",3]],[["tinkerror",3],["result",4]]]],[8,"Reader","tink::keyset","`Reader` knows how to read a `Keyset` or an…",null,null],[10,"read","","Return a (cleartext) `Keyset` object from the underlying…",8,[[],[["tinkerror",3],["result",4],["keyset",3]]]],[10,"read_encrypted","","Return an `EncryptedKeyset` object from the underlying…",8,[[],[["tinkerror",3],["result",4],["encryptedkeyset",3]]]],[8,"Writer","","`Writer` knows how to write a `Keyset` or an…",null,null],[10,"write","","",9,[[["keyset",3]],[["tinkerror",3],["result",4]]]],[10,"write_encrypted","","",9,[[["encryptedkeyset",3]],[["tinkerror",3],["result",4]]]],[0,"primitiveset","tink","Provides a container for a set of cryptographic primitives.",null,null],[3,"Entry","tink::primitiveset","`Entry` represents a single entry in the keyset. In…",null,null],[12,"key_id","","",10,null],[12,"primitive","","",10,null],[12,"prefix","","",10,null],[12,"prefix_type","","",10,null],[12,"status","","",10,null],[3,"PrimitiveSet","","`PrimitiveSet` is used for supporting key rotation:…",null,null],[12,"primary","","",11,null],[12,"entries","","",11,null],[3,"TypedEntry","","`TypedEntry` represents a single entry in a keyset for…",null,null],[12,"key_id","","",12,null],[12,"primitive","","",12,null],[12,"prefix","","",12,null],[12,"prefix_type","","",12,null],[12,"status","","",12,null],[3,"TypedPrimitiveSet","","`TypedPrimitiveSet` is equivalent to [`PrimitiveSet`] but…",null,null],[12,"primary","","",13,null],[12,"entries","","",13,null],[11,"new","","Return an empty instance of [`PrimitiveSet`].",11,[[]]],[11,"raw_entries","","Return all primitives in the set that have RAW prefix.",11,[[],[["entry",3],["vec",3]]]],[11,"entries_for_prefix","","Return all primitives in the set that have the given prefix.",11,[[],[["entry",3],["vec",3]]]],[11,"add","","Create a new entry in the primitive set and returns a copy…",11,[[["key",3],["primitive",4]],[["entry",3],["result",4],["tinkerror",3]]]],[11,"raw_entries","","Return all primitives in the set that have RAW prefix.",13,[[],[["option",4],["vec",3]]]],[11,"entries_for_prefix","","Return all primitives in the set that have the given prefix.",13,[[],[["option",4],["vec",3]]]],[0,"proto","tink","Auto-generated code from protocol buffer message…",null,null],[3,"AesCmacParams","tink::proto","",null,null],[12,"tag_size","","",14,null],[3,"AesCmacKey","","key_type: type.googleapis.com/google.crypto.tink.AesCmacKey",null,null],[12,"version","","",15,null],[12,"key_value","","",15,null],[12,"params","","",15,null],[3,"AesCmacKeyFormat","","",null,null],[12,"key_size","","",16,null],[12,"params","","",16,null],[3,"AesCmacPrfKey","","key_type:…",null,null],[12,"version","","",17,null],[12,"key_value","","",17,null],[3,"AesCmacPrfKeyFormat","","",null,null],[12,"version","","",18,null],[12,"key_size","","",18,null],[3,"AesCtrParams","","",null,null],[12,"iv_size","","",19,null],[3,"AesCtrKeyFormat","","",null,null],[12,"params","","",20,null],[12,"key_size","","",20,null],[3,"AesCtrKey","","key_type: type.googleapis.com/google.crypto.tink.AesCtrKey",null,null],[12,"version","","",21,null],[12,"params","","",21,null],[12,"key_value","","",21,null],[3,"HmacParams","","",null,null],[12,"hash","","HashType is an enum.",22,null],[12,"tag_size","","",22,null],[3,"HmacKey","","key_type: type.googleapis.com/google.crypto.tink.HmacKey",null,null],[12,"version","","",23,null],[12,"params","","",23,null],[12,"key_value","","",23,null],[3,"HmacKeyFormat","","",null,null],[12,"params","","",24,null],[12,"key_size","","",24,null],[12,"version","","",24,null],[3,"AesCtrHmacAeadKeyFormat","","",null,null],[12,"aes_ctr_key_format","","",25,null],[12,"hmac_key_format","","",25,null],[3,"AesCtrHmacAeadKey","","key_type:…",null,null],[12,"version","","",26,null],[12,"aes_ctr_key","","",26,null],[12,"hmac_key","","",26,null],[3,"AesCtrHmacStreamingParams","","",null,null],[12,"ciphertext_segment_size","","",27,null],[12,"derived_key_size","","size of AES-CTR keys derived for each segment",27,null],[12,"hkdf_hash_type","","hash function for key derivation via HKDF",27,null],[12,"hmac_params","","params for authentication tags",27,null],[3,"AesCtrHmacStreamingKeyFormat","","",null,null],[12,"version","","",28,null],[12,"params","","",28,null],[12,"key_size","","size of the main key (aka. \\\"ikm\\\", input key material)",28,null],[3,"AesCtrHmacStreamingKey","","key_type:…",null,null],[12,"version","","",29,null],[12,"params","","",29,null],[12,"key_value","","the main key, aka. \\\"ikm\\\", input key material",29,null],[3,"AesEaxParams","","only allowing tag size in bytes = 16",null,null],[12,"iv_size","","possible value is 12 or 16 bytes.",30,null],[3,"AesEaxKeyFormat","","",null,null],[12,"params","","",31,null],[12,"key_size","","",31,null],[3,"AesEaxKey","","key_type: type.googleapis.com/google.crypto.tink.AesEaxKey",null,null],[12,"version","","",32,null],[12,"params","","",32,null],[12,"key_value","","",32,null],[3,"AesGcmKeyFormat","","only allowing IV size in bytes = 12 and tag size in bytes…",null,null],[12,"key_size","","",33,null],[12,"version","","",33,null],[3,"AesGcmKey","","key_type: type.googleapis.com/google.crypto.tink.AesGcmKey",null,null],[12,"version","","",34,null],[12,"key_value","","",34,null],[3,"AesGcmHkdfStreamingParams","","",null,null],[12,"ciphertext_segment_size","","",35,null],[12,"derived_key_size","","size of AES-GCM keys derived for each segment",35,null],[12,"hkdf_hash_type","","",35,null],[3,"AesGcmHkdfStreamingKeyFormat","","",null,null],[12,"version","","",36,null],[12,"params","","",36,null],[12,"key_size","","size of the main key (aka. \\\"ikm\\\", input key material)",36,null],[3,"AesGcmHkdfStreamingKey","","key_type:…",null,null],[12,"version","","",37,null],[12,"params","","",37,null],[12,"key_value","","",37,null],[3,"AesGcmSivKeyFormat","","The only allowed IV size is 12 bytes and tag size is 16…",null,null],[12,"key_size","","",38,null],[12,"version","","",38,null],[3,"AesGcmSivKey","","key_type:…",null,null],[12,"version","","",39,null],[12,"key_value","","",39,null],[3,"AesSivKeyFormat","","",null,null],[12,"key_size","","Only valid value is: 64.",40,null],[3,"AesSivKey","","key_type: type.googleapis.com/google.crypto.tink.AesSivKey",null,null],[12,"version","","",41,null],[12,"key_value","","First half is AES-CTR key, second is AES-SIV.",41,null],[3,"ChaCha20Poly1305KeyFormat","","",null,null],[3,"ChaCha20Poly1305Key","","key_type:…",null,null],[12,"version","","",42,null],[12,"key_value","","",42,null],[3,"KeyTypeEntry","","An entry that describes a key type to be used with Tink…",null,null],[12,"primitive_name","","E.g. “Aead”, “Mac”, ... (case-insensitive)",43,null],[12,"type_url","","Name of the key type.",43,null],[12,"key_manager_version","","Minimum required version of key manager.",43,null],[12,"new_key_allowed","","Can the key manager create new keys?",43,null],[12,"catalogue_name","","Catalogue to be queried for key manager,",43,null],[3,"RegistryConfig","","A complete configuration of Tink library: a list of key…",null,null],[12,"config_name","","",44,null],[12,"entry","","",44,null],[3,"EcdsaParams","","Protos for Ecdsa.",null,null],[12,"hash_type","","Required.",45,null],[12,"curve","","Required.",45,null],[12,"encoding","","Required.",45,null],[3,"EcdsaPublicKey","","key_type:…",null,null],[12,"version","","Required.",46,null],[12,"params","","Required.",46,null],[12,"x","","Affine coordinates of the public key in bigendian…",46,null],[12,"y","","Required.",46,null],[3,"EcdsaPrivateKey","","key_type:…",null,null],[12,"version","","Required.",47,null],[12,"public_key","","Required.",47,null],[12,"key_value","","Unsigned big integer in bigendian representation. Required.",47,null],[3,"EcdsaKeyFormat","","",null,null],[12,"params","","Required.",48,null],[3,"KeyTemplate","","",null,null],[12,"type_url","","Required.",49,null],[12,"value","","Optional. If missing, it means the key type doesn\'t…",49,null],[12,"output_prefix_type","","Optional. If missing, uses OutputPrefixType.TINK.",49,null],[3,"KeyData","","The actual *Key-proto is wrapped in a KeyData message,…",null,null],[12,"type_url","","Required.",50,null],[12,"value","","Required.",50,null],[12,"key_material_type","","Required.",50,null],[3,"Keyset","","A Tink user works usually not with single keys, but with…",null,null],[12,"primary_key_id","","Identifies key used to generate new crypto data (encrypt,…",51,null],[12,"key","","Actual keys in the Keyset. Required.",51,null],[3,"KeysetInfo","","Represents a \\\"safe\\\" Keyset that doesn\'t contain any actual…",null,null],[12,"primary_key_id","","See Keyset.primary_key_id.",52,null],[12,"key_info","","KeyInfos in the KeysetInfo. Each KeyInfo is corresponding…",52,null],[3,"EncryptedKeyset","","Represents a keyset that is encrypted with a master key.",null,null],[12,"encrypted_keyset","","Required.",53,null],[12,"keyset_info","","Optional.",53,null],[3,"EciesHkdfKemParams","","Parameters of KEM (Key Encapsulation Mechanism)",null,null],[12,"curve_type","","Required.",54,null],[12,"hkdf_hash_type","","Required.",54,null],[12,"hkdf_salt","","Optional.",54,null],[3,"EciesAeadDemParams","","Parameters of AEAD DEM (Data Encapsulation Mechanism).",null,null],[12,"aead_dem","","Required.",55,null],[3,"EciesAeadHkdfParams","","",null,null],[12,"kem_params","","Key Encapsulation Mechanism. Required.",56,null],[12,"dem_params","","Data Encapsulation Mechanism. Required.",56,null],[12,"ec_point_format","","EC point format. Required.",56,null],[3,"EciesAeadHkdfPublicKey","","EciesAeadHkdfPublicKey represents HybridEncryption…",null,null],[12,"version","","Required.",57,null],[12,"params","","Required.",57,null],[12,"x","","Affine coordinates of the public key in bigendian…",57,null],[12,"y","","Required.",57,null],[3,"EciesAeadHkdfPrivateKey","","EciesKdfAeadPrivateKey represents HybridDecryption…",null,null],[12,"version","","Required.",58,null],[12,"public_key","","Required.",58,null],[12,"key_value","","Required.",58,null],[3,"EciesAeadHkdfKeyFormat","","",null,null],[12,"params","","Required.",59,null],[3,"Ed25519KeyFormat","","",null,null],[3,"Ed25519PublicKey","","key_type:…",null,null],[12,"version","","Required.",60,null],[12,"key_value","","The public key is 32 bytes, encoded according to…",60,null],[3,"Ed25519PrivateKey","","key_type:…",null,null],[12,"version","","Required.",61,null],[12,"key_value","","The private key is 32 bytes of cryptographically secure…",61,null],[12,"public_key","","The corresponding public key.",61,null],[3,"Empty","","",null,null],[3,"HkdfPrfParams","","",null,null],[12,"hash","","",62,null],[12,"salt","","Salt, optional in RFC 5869. Using \\\"\\\" is equivalent to…",62,null],[3,"HkdfPrfKey","","",null,null],[12,"version","","",63,null],[12,"params","","",63,null],[12,"key_value","","",63,null],[3,"HkdfPrfKeyFormat","","",null,null],[12,"params","","",64,null],[12,"key_size","","",64,null],[12,"version","","",64,null],[3,"HmacPrfParams","","",null,null],[12,"hash","","HashType is an enum.",65,null],[3,"HmacPrfKey","","key_type: type.googleapis.com/google.crypto.tink.HmacPrfKey",null,null],[12,"version","","",66,null],[12,"params","","",66,null],[12,"key_value","","",66,null],[3,"HmacPrfKeyFormat","","",null,null],[12,"params","","",67,null],[12,"key_size","","",67,null],[12,"version","","",67,null],[3,"JwtHmacKey","","key_type: type.googleapis.com/google.crypto.tink.JwtHmacKey",null,null],[12,"version","","",68,null],[12,"hash_type","","",68,null],[12,"key_value","","",68,null],[3,"JwtHmacKeyFormat","","",null,null],[12,"version","","",69,null],[12,"hash_type","","",69,null],[12,"key_size","","",69,null],[3,"KmsAeadKeyFormat","","",null,null],[12,"key_uri","","Required. The location of a KMS key. With Google Cloud…",70,null],[3,"KmsAeadKey","","There is no actual key material in the key.",null,null],[12,"version","","",71,null],[12,"params","","The key format also contains the params.",71,null],[3,"KmsEnvelopeAeadKeyFormat","","",null,null],[12,"kek_uri","","Required. The location of the KEK in a remote KMS. With…",72,null],[12,"dek_template","","Key template of the Data Encryption Key, e.g.,…",72,null],[3,"KmsEnvelopeAeadKey","","There is no actual key material in the key.",null,null],[12,"version","","",73,null],[12,"params","","The key format also contains the params.",73,null],[3,"PrfBasedDeriverParams","","",null,null],[12,"derived_key_template","","",74,null],[3,"PrfBasedDeriverKeyFormat","","",null,null],[12,"prf_key_template","","",75,null],[12,"params","","",75,null],[3,"PrfBasedDeriverKey","","key_type:…",null,null],[12,"version","","",76,null],[12,"prf_key","","",76,null],[12,"params","","",76,null],[3,"RsaSsaPkcs1Params","","",null,null],[12,"hash_type","","Hash function used in computing hash of the signing…",77,null],[3,"RsaSsaPkcs1PublicKey","","key_type:…",null,null],[12,"version","","Required.",78,null],[12,"params","","Required.",78,null],[12,"n","","Modulus. Unsigned big integer in bigendian representation.",78,null],[12,"e","","Public exponent. Unsigned big integer in bigendian…",78,null],[3,"RsaSsaPkcs1PrivateKey","","key_type:…",null,null],[12,"version","","Required.",79,null],[12,"public_key","","Required.",79,null],[12,"d","","Private exponent. Unsigned big integer in bigendian…",79,null],[12,"p","","The following parameters are used to optimize RSA…",79,null],[12,"q","","The prime factor q of n. Unsigned big integer in bigendian…",79,null],[12,"dp","","d mod (p - 1). Unsigned big integer in bigendian…",79,null],[12,"dq","","d mod (q - 1). Unsigned big integer in bigendian…",79,null],[12,"crt","","Chinese Remainder Theorem coefficient q^(-1) mod p.…",79,null],[3,"RsaSsaPkcs1KeyFormat","","",null,null],[12,"params","","Required.",80,null],[12,"modulus_size_in_bits","","Required.",80,null],[12,"public_exponent","","Required.",80,null],[3,"RsaSsaPssParams","","",null,null],[12,"sig_hash","","Hash function used in computing hash of the signing…",81,null],[12,"mgf1_hash","","Hash function used in MGF1 (a mask generation function…",81,null],[12,"salt_length","","Salt length (see…",81,null],[3,"RsaSsaPssPublicKey","","key_type:…",null,null],[12,"version","","Required.",82,null],[12,"params","","Required.",82,null],[12,"n","","Modulus. Unsigned big integer in bigendian representation.",82,null],[12,"e","","Public exponent. Unsigned big integer in bigendian…",82,null],[3,"RsaSsaPssPrivateKey","","key_type:…",null,null],[12,"version","","Required.",83,null],[12,"public_key","","Required.",83,null],[12,"d","","Private exponent. Unsigned big integer in bigendian…",83,null],[12,"p","","The following parameters are used to optimize RSA…",83,null],[12,"q","","The prime factor q of n. Unsigned big integer in bigendian…",83,null],[12,"dp","","d mod (p - 1). Unsigned big integer in bigendian…",83,null],[12,"dq","","d mod (q - 1). Unsigned big integer in bigendian…",83,null],[12,"crt","","Chinese Remainder Theorem coefficient q^(-1) mod p.…",83,null],[3,"RsaSsaPssKeyFormat","","",null,null],[12,"params","","Required.",84,null],[12,"modulus_size_in_bits","","Required.",84,null],[12,"public_exponent","","Required.",84,null],[3,"XChaCha20Poly1305KeyFormat","","",null,null],[3,"XChaCha20Poly1305Key","","key_type:…",null,null],[12,"version","","",85,null],[12,"key_value","","",85,null],[4,"EllipticCurveType","","",null,null],[13,"UnknownCurve","","",86,null],[13,"NistP256","","",86,null],[13,"NistP384","","",86,null],[13,"NistP521","","",86,null],[13,"Curve25519","","",86,null],[4,"EcPointFormat","","",null,null],[13,"UnknownFormat","","",87,null],[13,"Uncompressed","","",87,null],[13,"Compressed","","",87,null],[13,"DoNotUseCrunchyUncompressed","","Like UNCOMPRESSED but without the \\\\x04 prefix. Crunchy…",87,null],[4,"HashType","","",null,null],[13,"UnknownHash","","",88,null],[13,"Sha1","","Using SHA1 for digital signature is deprecated but…",88,null],[13,"Sha384","","fine.",88,null],[13,"Sha256","","",88,null],[13,"Sha512","","",88,null],[4,"EcdsaSignatureEncoding","","",null,null],[13,"UnknownEncoding","","",89,null],[13,"IeeeP1363","","The signature\'s format is r || s, where r and s are…",89,null],[13,"Der","","The signature is encoded using ASN.1…",89,null],[4,"KeyStatusType","","",null,null],[13,"UnknownStatus","","",90,null],[13,"Enabled","","Can be used for crypto operations.",90,null],[13,"Disabled","","Cannot be used, but exists and can become ENABLED.",90,null],[13,"Destroyed","","Key data does not exist in this Keyset any more.",90,null],[4,"OutputPrefixType","","Tink produces and accepts ciphertexts or signatures that…",null,null],[13,"UnknownPrefix","","",91,null],[13,"Tink","","",91,null],[13,"Legacy","","",91,null],[13,"Raw","","",91,null],[13,"Crunchy","","CRUNCHY is like LEGACY, but with two differences:",91,null],[0,"key_data","","",null,null],[4,"KeyMaterialType","tink::proto::key_data","",null,null],[13,"UnknownKeymaterial","","",92,null],[13,"Symmetric","","",92,null],[13,"AsymmetricPrivate","","",92,null],[13,"AsymmetricPublic","","",92,null],[13,"Remote","","points to a remote key, i.e., in a KMS.",92,null],[11,"is_valid","","Returns `true` if `value` is a variant of `KeyMaterialType`.",92,[[]]],[11,"from_i32","","Converts an `i32` to a `KeyMaterialType`, or `None` if…",92,[[],[["option",4],["keymaterialtype",4]]]],[0,"keyset","tink::proto","",null,null],[3,"Key","tink::proto::keyset","",null,null],[12,"key_data","","Contains the actual, instantiation specific key proto. By…",93,null],[12,"status","","",93,null],[12,"key_id","","Identifies a key within a keyset, is a part of metadata of…",93,null],[12,"output_prefix_type","","Determines the prefix of the ciphertexts/signatures…",93,null],[11,"status","","Returns the enum value of `status`, or the default if the…",93,[[],["keystatustype",4]]],[11,"set_status","","Sets `status` to the provided enum value.",93,[[["keystatustype",4]]]],[11,"output_prefix_type","","Returns the enum value of `output_prefix_type`, or the…",93,[[],["outputprefixtype",4]]],[11,"set_output_prefix_type","","Sets `output_prefix_type` to the provided enum value.",93,[[["outputprefixtype",4]]]],[0,"keyset_info","tink::proto","",null,null],[3,"KeyInfo","tink::proto::keyset_info","",null,null],[12,"type_url","","the type url of this key, e.g.,…",94,null],[12,"status","","See Keyset.Key.status.",94,null],[12,"key_id","","See Keyset.Key.key_id.",94,null],[12,"output_prefix_type","","See Keyset.Key.output_prefix_type.",94,null],[11,"status","","Returns the enum value of `status`, or the default if the…",94,[[],["keystatustype",4]]],[11,"set_status","","Sets `status` to the provided enum value.",94,[[["keystatustype",4]]]],[11,"output_prefix_type","","Returns the enum value of `output_prefix_type`, or the…",94,[[],["outputprefixtype",4]]],[11,"set_output_prefix_type","","Sets `output_prefix_type` to the provided enum value.",94,[[["outputprefixtype",4]]]],[11,"is_valid","tink::proto","Returns `true` if `value` is a variant of…",86,[[]]],[11,"from_i32","","Converts an `i32` to a `EllipticCurveType`, or `None` if…",86,[[],[["option",4],["ellipticcurvetype",4]]]],[11,"is_valid","","Returns `true` if `value` is a variant of `EcPointFormat`.",87,[[]]],[11,"from_i32","","Converts an `i32` to a `EcPointFormat`, or `None` if…",87,[[],[["ecpointformat",4],["option",4]]]],[11,"is_valid","","Returns `true` if `value` is a variant of `HashType`.",88,[[]]],[11,"from_i32","","Converts an `i32` to a `HashType`, or `None` if `value` is…",88,[[],[["option",4],["hashtype",4]]]],[11,"hash","","Returns the enum value of `hash`, or the default if the…",22,[[],["hashtype",4]]],[11,"set_hash","","Sets `hash` to the provided enum value.",22,[[["hashtype",4]]]],[11,"hkdf_hash_type","","Returns the enum value of `hkdf_hash_type`, or the default…",27,[[],["hashtype",4]]],[11,"set_hkdf_hash_type","","Sets `hkdf_hash_type` to the provided enum value.",27,[[["hashtype",4]]]],[11,"hkdf_hash_type","","Returns the enum value of `hkdf_hash_type`, or the default…",35,[[],["hashtype",4]]],[11,"set_hkdf_hash_type","","Sets `hkdf_hash_type` to the provided enum value.",35,[[["hashtype",4]]]],[11,"hash_type","","Returns the enum value of `hash_type`, or the default if…",45,[[],["hashtype",4]]],[11,"set_hash_type","","Sets `hash_type` to the provided enum value.",45,[[["hashtype",4]]]],[11,"curve","","Returns the enum value of `curve`, or the default if the…",45,[[],["ellipticcurvetype",4]]],[11,"set_curve","","Sets `curve` to the provided enum value.",45,[[["ellipticcurvetype",4]]]],[11,"encoding","","Returns the enum value of `encoding`, or the default if…",45,[[],["ecdsasignatureencoding",4]]],[11,"set_encoding","","Sets `encoding` to the provided enum value.",45,[[["ecdsasignatureencoding",4]]]],[11,"is_valid","","Returns `true` if `value` is a variant of…",89,[[]]],[11,"from_i32","","Converts an `i32` to a `EcdsaSignatureEncoding`, or `None`…",89,[[],[["ecdsasignatureencoding",4],["option",4]]]],[11,"output_prefix_type","","Returns the enum value of `output_prefix_type`, or the…",49,[[],["outputprefixtype",4]]],[11,"set_output_prefix_type","","Sets `output_prefix_type` to the provided enum value.",49,[[["outputprefixtype",4]]]],[11,"key_material_type","","Returns the enum value of `key_material_type`, or the…",50,[[],["keymaterialtype",4]]],[11,"set_key_material_type","","Sets `key_material_type` to the provided enum value.",50,[[["keymaterialtype",4]]]],[11,"is_valid","","Returns `true` if `value` is a variant of `KeyStatusType`.",90,[[]]],[11,"from_i32","","Converts an `i32` to a `KeyStatusType`, or `None` if…",90,[[],[["keystatustype",4],["option",4]]]],[11,"is_valid","","Returns `true` if `value` is a variant of…",91,[[]]],[11,"from_i32","","Converts an `i32` to a `OutputPrefixType`, or `None` if…",91,[[],[["outputprefixtype",4],["option",4]]]],[11,"curve_type","","Returns the enum value of `curve_type`, or the default if…",54,[[],["ellipticcurvetype",4]]],[11,"set_curve_type","","Sets `curve_type` to the provided enum value.",54,[[["ellipticcurvetype",4]]]],[11,"hkdf_hash_type","","Returns the enum value of `hkdf_hash_type`, or the default…",54,[[],["hashtype",4]]],[11,"set_hkdf_hash_type","","Sets `hkdf_hash_type` to the provided enum value.",54,[[["hashtype",4]]]],[11,"ec_point_format","","Returns the enum value of `ec_point_format`, or the…",56,[[],["ecpointformat",4]]],[11,"set_ec_point_format","","Sets `ec_point_format` to the provided enum value.",56,[[["ecpointformat",4]]]],[11,"hash","","Returns the enum value of `hash`, or the default if the…",62,[[],["hashtype",4]]],[11,"set_hash","","Sets `hash` to the provided enum value.",62,[[["hashtype",4]]]],[11,"hash","","Returns the enum value of `hash`, or the default if the…",65,[[],["hashtype",4]]],[11,"set_hash","","Sets `hash` to the provided enum value.",65,[[["hashtype",4]]]],[11,"hash_type","","Returns the enum value of `hash_type`, or the default if…",68,[[],["hashtype",4]]],[11,"set_hash_type","","Sets `hash_type` to the provided enum value.",68,[[["hashtype",4]]]],[11,"hash_type","","Returns the enum value of `hash_type`, or the default if…",69,[[],["hashtype",4]]],[11,"set_hash_type","","Sets `hash_type` to the provided enum value.",69,[[["hashtype",4]]]],[11,"hash_type","","Returns the enum value of `hash_type`, or the default if…",77,[[],["hashtype",4]]],[11,"set_hash_type","","Sets `hash_type` to the provided enum value.",77,[[["hashtype",4]]]],[11,"sig_hash","","Returns the enum value of `sig_hash`, or the default if…",81,[[],["hashtype",4]]],[11,"set_sig_hash","","Sets `sig_hash` to the provided enum value.",81,[[["hashtype",4]]]],[11,"mgf1_hash","","Returns the enum value of `mgf1_hash`, or the default if…",81,[[],["hashtype",4]]],[11,"set_mgf1_hash","","Sets `mgf1_hash` to the provided enum value.",81,[[["hashtype",4]]]],[0,"registry","tink","Provides a container that for each supported key type…",null,null],[5,"register_template_generator","tink::registry","Register a key template generator function by name.",null,[[["keytemplategenerator",6]]]],[5,"get_template_generator","","Find a key template generator function by name.",null,[[],[["option",4],["keytemplategenerator",6]]]],[5,"template_names","","Return all available key template generator names.",null,[[],[["string",3],["vec",3]]]],[5,"register_key_manager","","Register the given key manager. Does not allow overwrite…",null,[[["arc",3]],[["tinkerror",3],["result",4]]]],[5,"get_key_manager","","Return the key manager for the given `type_url` if it…",null,[[],[["result",4],["arc",3],["tinkerror",3]]]],[5,"new_key_data","","Generate a new `KeyData` for the given key template.",null,[[["keytemplate",3]],[["result",4],["keydata",3],["tinkerror",3]]]],[5,"new_key","","Generate a new key for the given key template as a…",null,[[["keytemplate",3]],[["vec",3],["tinkerror",3],["result",4]]]],[5,"primitive_from_key_data","","Create a new primitive for the key given in the given…",null,[[["keydata",3]],[["tinkerror",3],["result",4],["primitive",4]]]],[5,"primitive","","Create a new primitive for the given serialized key using…",null,[[],[["tinkerror",3],["result",4],["primitive",4]]]],[5,"register_kms_client","","Register a new KMS client",null,[[]]],[5,"get_kms_client","","Fetches a [`KmsClient`] by a given URI.",null,[[],[["result",4],["arc",3],["tinkerror",3]]]],[6,"KeyTemplateGenerator","","",null,null],[8,"KmsClient","","`KmsClient` knows how to produce primitives backed by keys…",null,null],[10,"supported","","Returns true if this client does support `key_uri`.",95,[[]]],[10,"get_aead","","Get an `Aead` backend by `key_uri`.",95,[[],[["tinkerror",3],["box",3],["result",4]]]],[8,"KeyManager","","`KeyManager` \\\"understands\\\" keys of a specific key types:…",null,null],[10,"primitive","","Construct a primitive instance for the key given in…",96,[[],[["tinkerror",3],["result",4],["primitive",4]]]],[10,"new_key","","Generate a new key according to specification in…",96,[[],[["vec",3],["tinkerror",3],["result",4]]]],[11,"does_support","","Return true iff this [`KeyManager`] supports key type…",96,[[]]],[10,"type_url","","Return the type URL that identifes the key type of keys…",96,[[]]],[10,"key_material_type","","Return the key material type handled by this key manager",96,[[],["keymaterialtype",4]]],[11,"new_key_data","","Generate a new `KeyData` according to specification in…",96,[[],[["result",4],["keydata",3],["tinkerror",3]]]],[11,"supports_private_keys","","Indicate whether this `KeyManager` understands private key…",96,[[]]],[11,"public_key_data","","Extract the public key data from the private key. If…",96,[[],[["result",4],["keydata",3],["tinkerror",3]]]],[0,"subtle","tink","Common methods needed in subtle implementations.",null,null],[4,"HashFunc","tink::subtle","Hash function object.",null,null],[13,"Sha1","","",97,null],[13,"Sha256","","",97,null],[13,"Sha384","","",97,null],[13,"Sha512","","",97,null],[5,"compute_hkdf","","Extract a pseudorandom key.",null,[[["hashtype",4]],[["vec",3],["result",4],["tinkerror",3]]]],[5,"get_hash_digest_size","","Return the digest size of the specified hash algorithm.",null,[[["hashtype",4]],[["tinkerror",3],["result",4]]]],[5,"get_hash_func","","Return the corresponding hash function of the given hash.",null,[[["hashtype",4]],[["hashfunc",4],["option",4]]]],[5,"compute_hash","","Calculate a hash of the given data using the given hash…",null,[[["hashfunc",4]],[["vec",3],["tinkerror",3],["result",4]]]],[5,"constant_time_compare","","Compare two slices in constant time. Return `true` if they…",null,[[]]],[0,"random","","Utilities for random data.",null,null],[5,"get_random_bytes","tink::subtle::random","Return a vector of the given `size` filled with random…",null,[[],["vec",3]]],[5,"get_random_uint32","","Randomly generate an unsigned 32-bit integer.",null,[[]]],[0,"utils","tink","Utilities for Tink Rust code.",null,null],[3,"TinkError","tink::utils","`Error` type for errors emitted by Tink. Note that errors…",null,null],[5,"wrap_err","","Wrap an error with an additional message. This utility is…",null,[[],["tinkerror",3]]],[11,"new","","",98,[[]]],[6,"KeyId","tink","Type alias for `u32` values being used as key identifiers.",null,null],[17,"UPSTREAM_VERSION","","The upstream Tink version that this Rust port is based on.",null,null],[8,"Aead","","`Aead` is the interface for authenticated encryption with…",null,null],[10,"encrypt","","",99,[[],[["vec",3],["result",4],["tinkerror",3]]]],[10,"decrypt","","",99,[[],[["vec",3],["result",4],["tinkerror",3]]]],[8,"AeadBoxClone","","Trait bound to indicate that primitive trait objects…",null,null],[10,"box_clone","","",100,[[],[["box",3],["aead",8]]]],[8,"DeterministicAead","","`DeterministicAead` is the interface for deterministic…",null,null],[10,"encrypt_deterministically","","",101,[[],[["vec",3],["result",4],["tinkerror",3]]]],[10,"decrypt_deterministically","","",101,[[],[["vec",3],["result",4],["tinkerror",3]]]],[8,"DeterministicAeadBoxClone","","Trait bound to indicate that primitive trait objects…",null,null],[10,"box_clone","","",102,[[],[["box",3],["deterministicaead",8]]]],[8,"HybridDecrypt","","`HybridDecrypt` is the interface for hybrid decryption.",null,null],[10,"decrypt","","Decrypt ciphertext verifying the integrity of…",103,[[],[["vec",3],["result",4],["tinkerror",3]]]],[8,"HybridDecryptBoxClone","","Trait bound to indicate that primitive trait objects…",null,null],[10,"box_clone","","",104,[[],[["box",3],["hybriddecrypt",8]]]],[8,"HybridEncrypt","","`HybridEncrypt` is the interface for hybrid encryption.",null,null],[10,"encrypt","","Encrypt plaintext binding `context_info` to the resulting…",105,[[],[["vec",3],["result",4],["tinkerror",3]]]],[8,"HybridEncryptBoxClone","","Trait bound to indicate that primitive trait objects…",null,null],[10,"box_clone","","",106,[[],[["box",3],["hybridencrypt",8]]]],[8,"Mac","","`Mac` is the interface for MACs (Message Authentication…",null,null],[10,"compute_mac","","",107,[[],[["vec",3],["result",4],["tinkerror",3]]]],[11,"verify_mac","","",107,[[],[["tinkerror",3],["result",4]]]],[8,"MacBoxClone","","Trait bound to indicate that primitive trait objects…",null,null],[10,"box_clone","","",108,[[],[["box",3],["mac",8]]]],[8,"Prf","","The `Prf` trait is an abstraction for an element of a…",null,null],[10,"compute_prf","","Compute the PRF selected by the underlying key on input…",109,[[],[["vec",3],["result",4],["tinkerror",3]]]],[8,"PrfBoxClone","","Trait bound to indicate that primitive trait objects…",null,null],[10,"box_clone","","",110,[[],[["box",3],["prf",8]]]],[8,"Signer","","`Signer` is the signing interface for digital signature.",null,null],[10,"sign","","",111,[[],[["vec",3],["result",4],["tinkerror",3]]]],[8,"SignerBoxClone","","Trait bound to indicate that primitive trait objects…",null,null],[10,"box_clone","","",112,[[],[["signer",8],["box",3]]]],[8,"StreamingAead","","`StreamingAead` is an interface for streaming…",null,null],[10,"new_encrypting_writer","","Return a wrapper around an underlying `std::io::Write`,…",113,[[["box",3],["write",8]],[["tinkerror",3],["box",3],["result",4]]]],[10,"new_decrypting_reader","","Return a wrapper around an underlying `std::io::Read`,…",113,[[["read",8],["box",3]],[["tinkerror",3],["result",4],["box",3]]]],[8,"EncryptingWrite","","Trait for an object that writes encrypted data. Users must…",null,null],[10,"close","","Close the stream, writing any final buffered data. Any…",114,[[],[["tinkerror",3],["result",4]]]],[8,"StreamingAeadBoxClone","","Trait bound to indicate that primitive trait objects…",null,null],[10,"box_clone","","",115,[[],[["box",3],["streamingaead",8]]]],[8,"Verifier","","`Verifier` is the verifying interface for digital signature.",null,null],[10,"verify","","",116,[[],[["tinkerror",3],["result",4]]]],[8,"VerifierBoxClone","","Trait bound to indicate that primitive trait objects…",null,null],[10,"box_clone","","",117,[[],[["box",3],["verifier",8]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","tink::keyset","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","tink::primitiveset","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"vzip","","",12,[[]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"vzip","","",13,[[]]],[11,"from","tink::proto","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"vzip","","",14,[[]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"vzip","","",15,[[]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"vzip","","",16,[[]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"vzip","","",17,[[]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"vzip","","",18,[[]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"vzip","","",19,[[]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"vzip","","",20,[[]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"vzip","","",21,[[]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"vzip","","",22,[[]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"vzip","","",23,[[]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"vzip","","",24,[[]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"vzip","","",25,[[]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"vzip","","",26,[[]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"vzip","","",27,[[]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"vzip","","",28,[[]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"vzip","","",29,[[]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"vzip","","",30,[[]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"vzip","","",31,[[]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"vzip","","",32,[[]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"vzip","","",33,[[]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"to_owned","","",34,[[]]],[11,"clone_into","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"vzip","","",34,[[]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"to_owned","","",35,[[]]],[11,"clone_into","","",35,[[]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"vzip","","",35,[[]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"to_owned","","",36,[[]]],[11,"clone_into","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"vzip","","",36,[[]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"to_owned","","",37,[[]]],[11,"clone_into","","",37,[[]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"vzip","","",37,[[]]],[11,"from","","",38,[[]]],[11,"into","","",38,[[]]],[11,"to_owned","","",38,[[]]],[11,"clone_into","","",38,[[]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"vzip","","",38,[[]]],[11,"from","","",39,[[]]],[11,"into","","",39,[[]]],[11,"to_owned","","",39,[[]]],[11,"clone_into","","",39,[[]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"vzip","","",39,[[]]],[11,"from","","",40,[[]]],[11,"into","","",40,[[]]],[11,"to_owned","","",40,[[]]],[11,"clone_into","","",40,[[]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"vzip","","",40,[[]]],[11,"from","","",41,[[]]],[11,"into","","",41,[[]]],[11,"to_owned","","",41,[[]]],[11,"clone_into","","",41,[[]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"vzip","","",41,[[]]],[11,"from","","",118,[[]]],[11,"into","","",118,[[]]],[11,"to_owned","","",118,[[]]],[11,"clone_into","","",118,[[]]],[11,"borrow","","",118,[[]]],[11,"borrow_mut","","",118,[[]]],[11,"try_from","","",118,[[],["result",4]]],[11,"try_into","","",118,[[],["result",4]]],[11,"type_id","","",118,[[],["typeid",3]]],[11,"vzip","","",118,[[]]],[11,"from","","",42,[[]]],[11,"into","","",42,[[]]],[11,"to_owned","","",42,[[]]],[11,"clone_into","","",42,[[]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"vzip","","",42,[[]]],[11,"from","","",43,[[]]],[11,"into","","",43,[[]]],[11,"to_owned","","",43,[[]]],[11,"clone_into","","",43,[[]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"vzip","","",43,[[]]],[11,"from","","",44,[[]]],[11,"into","","",44,[[]]],[11,"to_owned","","",44,[[]]],[11,"clone_into","","",44,[[]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"vzip","","",44,[[]]],[11,"from","","",45,[[]]],[11,"into","","",45,[[]]],[11,"to_owned","","",45,[[]]],[11,"clone_into","","",45,[[]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"vzip","","",45,[[]]],[11,"from","","",46,[[]]],[11,"into","","",46,[[]]],[11,"to_owned","","",46,[[]]],[11,"clone_into","","",46,[[]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"vzip","","",46,[[]]],[11,"from","","",47,[[]]],[11,"into","","",47,[[]]],[11,"to_owned","","",47,[[]]],[11,"clone_into","","",47,[[]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"vzip","","",47,[[]]],[11,"from","","",48,[[]]],[11,"into","","",48,[[]]],[11,"to_owned","","",48,[[]]],[11,"clone_into","","",48,[[]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"vzip","","",48,[[]]],[11,"from","","",49,[[]]],[11,"into","","",49,[[]]],[11,"to_owned","","",49,[[]]],[11,"clone_into","","",49,[[]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"vzip","","",49,[[]]],[11,"from","","",50,[[]]],[11,"into","","",50,[[]]],[11,"to_owned","","",50,[[]]],[11,"clone_into","","",50,[[]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"vzip","","",50,[[]]],[11,"from","","",51,[[]]],[11,"into","","",51,[[]]],[11,"to_owned","","",51,[[]]],[11,"clone_into","","",51,[[]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"vzip","","",51,[[]]],[11,"from","","",52,[[]]],[11,"into","","",52,[[]]],[11,"to_owned","","",52,[[]]],[11,"clone_into","","",52,[[]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"try_into","","",52,[[],["result",4]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"vzip","","",52,[[]]],[11,"from","","",53,[[]]],[11,"into","","",53,[[]]],[11,"to_owned","","",53,[[]]],[11,"clone_into","","",53,[[]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"vzip","","",53,[[]]],[11,"from","","",54,[[]]],[11,"into","","",54,[[]]],[11,"to_owned","","",54,[[]]],[11,"clone_into","","",54,[[]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"try_into","","",54,[[],["result",4]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"vzip","","",54,[[]]],[11,"from","","",55,[[]]],[11,"into","","",55,[[]]],[11,"to_owned","","",55,[[]]],[11,"clone_into","","",55,[[]]],[11,"borrow","","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"try_into","","",55,[[],["result",4]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"vzip","","",55,[[]]],[11,"from","","",56,[[]]],[11,"into","","",56,[[]]],[11,"to_owned","","",56,[[]]],[11,"clone_into","","",56,[[]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"try_into","","",56,[[],["result",4]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"vzip","","",56,[[]]],[11,"from","","",57,[[]]],[11,"into","","",57,[[]]],[11,"to_owned","","",57,[[]]],[11,"clone_into","","",57,[[]]],[11,"borrow","","",57,[[]]],[11,"borrow_mut","","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"try_into","","",57,[[],["result",4]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"vzip","","",57,[[]]],[11,"from","","",58,[[]]],[11,"into","","",58,[[]]],[11,"to_owned","","",58,[[]]],[11,"clone_into","","",58,[[]]],[11,"borrow","","",58,[[]]],[11,"borrow_mut","","",58,[[]]],[11,"try_from","","",58,[[],["result",4]]],[11,"try_into","","",58,[[],["result",4]]],[11,"type_id","","",58,[[],["typeid",3]]],[11,"vzip","","",58,[[]]],[11,"from","","",59,[[]]],[11,"into","","",59,[[]]],[11,"to_owned","","",59,[[]]],[11,"clone_into","","",59,[[]]],[11,"borrow","","",59,[[]]],[11,"borrow_mut","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"try_into","","",59,[[],["result",4]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"vzip","","",59,[[]]],[11,"from","","",119,[[]]],[11,"into","","",119,[[]]],[11,"to_owned","","",119,[[]]],[11,"clone_into","","",119,[[]]],[11,"borrow","","",119,[[]]],[11,"borrow_mut","","",119,[[]]],[11,"try_from","","",119,[[],["result",4]]],[11,"try_into","","",119,[[],["result",4]]],[11,"type_id","","",119,[[],["typeid",3]]],[11,"vzip","","",119,[[]]],[11,"from","","",60,[[]]],[11,"into","","",60,[[]]],[11,"to_owned","","",60,[[]]],[11,"clone_into","","",60,[[]]],[11,"borrow","","",60,[[]]],[11,"borrow_mut","","",60,[[]]],[11,"try_from","","",60,[[],["result",4]]],[11,"try_into","","",60,[[],["result",4]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"vzip","","",60,[[]]],[11,"from","","",61,[[]]],[11,"into","","",61,[[]]],[11,"to_owned","","",61,[[]]],[11,"clone_into","","",61,[[]]],[11,"borrow","","",61,[[]]],[11,"borrow_mut","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"try_into","","",61,[[],["result",4]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"vzip","","",61,[[]]],[11,"from","","",120,[[]]],[11,"into","","",120,[[]]],[11,"to_owned","","",120,[[]]],[11,"clone_into","","",120,[[]]],[11,"borrow","","",120,[[]]],[11,"borrow_mut","","",120,[[]]],[11,"try_from","","",120,[[],["result",4]]],[11,"try_into","","",120,[[],["result",4]]],[11,"type_id","","",120,[[],["typeid",3]]],[11,"vzip","","",120,[[]]],[11,"from","","",62,[[]]],[11,"into","","",62,[[]]],[11,"to_owned","","",62,[[]]],[11,"clone_into","","",62,[[]]],[11,"borrow","","",62,[[]]],[11,"borrow_mut","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"try_into","","",62,[[],["result",4]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"vzip","","",62,[[]]],[11,"from","","",63,[[]]],[11,"into","","",63,[[]]],[11,"to_owned","","",63,[[]]],[11,"clone_into","","",63,[[]]],[11,"borrow","","",63,[[]]],[11,"borrow_mut","","",63,[[]]],[11,"try_from","","",63,[[],["result",4]]],[11,"try_into","","",63,[[],["result",4]]],[11,"type_id","","",63,[[],["typeid",3]]],[11,"vzip","","",63,[[]]],[11,"from","","",64,[[]]],[11,"into","","",64,[[]]],[11,"to_owned","","",64,[[]]],[11,"clone_into","","",64,[[]]],[11,"borrow","","",64,[[]]],[11,"borrow_mut","","",64,[[]]],[11,"try_from","","",64,[[],["result",4]]],[11,"try_into","","",64,[[],["result",4]]],[11,"type_id","","",64,[[],["typeid",3]]],[11,"vzip","","",64,[[]]],[11,"from","","",65,[[]]],[11,"into","","",65,[[]]],[11,"to_owned","","",65,[[]]],[11,"clone_into","","",65,[[]]],[11,"borrow","","",65,[[]]],[11,"borrow_mut","","",65,[[]]],[11,"try_from","","",65,[[],["result",4]]],[11,"try_into","","",65,[[],["result",4]]],[11,"type_id","","",65,[[],["typeid",3]]],[11,"vzip","","",65,[[]]],[11,"from","","",66,[[]]],[11,"into","","",66,[[]]],[11,"to_owned","","",66,[[]]],[11,"clone_into","","",66,[[]]],[11,"borrow","","",66,[[]]],[11,"borrow_mut","","",66,[[]]],[11,"try_from","","",66,[[],["result",4]]],[11,"try_into","","",66,[[],["result",4]]],[11,"type_id","","",66,[[],["typeid",3]]],[11,"vzip","","",66,[[]]],[11,"from","","",67,[[]]],[11,"into","","",67,[[]]],[11,"to_owned","","",67,[[]]],[11,"clone_into","","",67,[[]]],[11,"borrow","","",67,[[]]],[11,"borrow_mut","","",67,[[]]],[11,"try_from","","",67,[[],["result",4]]],[11,"try_into","","",67,[[],["result",4]]],[11,"type_id","","",67,[[],["typeid",3]]],[11,"vzip","","",67,[[]]],[11,"from","","",68,[[]]],[11,"into","","",68,[[]]],[11,"to_owned","","",68,[[]]],[11,"clone_into","","",68,[[]]],[11,"borrow","","",68,[[]]],[11,"borrow_mut","","",68,[[]]],[11,"try_from","","",68,[[],["result",4]]],[11,"try_into","","",68,[[],["result",4]]],[11,"type_id","","",68,[[],["typeid",3]]],[11,"vzip","","",68,[[]]],[11,"from","","",69,[[]]],[11,"into","","",69,[[]]],[11,"to_owned","","",69,[[]]],[11,"clone_into","","",69,[[]]],[11,"borrow","","",69,[[]]],[11,"borrow_mut","","",69,[[]]],[11,"try_from","","",69,[[],["result",4]]],[11,"try_into","","",69,[[],["result",4]]],[11,"type_id","","",69,[[],["typeid",3]]],[11,"vzip","","",69,[[]]],[11,"from","","",70,[[]]],[11,"into","","",70,[[]]],[11,"to_owned","","",70,[[]]],[11,"clone_into","","",70,[[]]],[11,"borrow","","",70,[[]]],[11,"borrow_mut","","",70,[[]]],[11,"try_from","","",70,[[],["result",4]]],[11,"try_into","","",70,[[],["result",4]]],[11,"type_id","","",70,[[],["typeid",3]]],[11,"vzip","","",70,[[]]],[11,"from","","",71,[[]]],[11,"into","","",71,[[]]],[11,"to_owned","","",71,[[]]],[11,"clone_into","","",71,[[]]],[11,"borrow","","",71,[[]]],[11,"borrow_mut","","",71,[[]]],[11,"try_from","","",71,[[],["result",4]]],[11,"try_into","","",71,[[],["result",4]]],[11,"type_id","","",71,[[],["typeid",3]]],[11,"vzip","","",71,[[]]],[11,"from","","",72,[[]]],[11,"into","","",72,[[]]],[11,"to_owned","","",72,[[]]],[11,"clone_into","","",72,[[]]],[11,"borrow","","",72,[[]]],[11,"borrow_mut","","",72,[[]]],[11,"try_from","","",72,[[],["result",4]]],[11,"try_into","","",72,[[],["result",4]]],[11,"type_id","","",72,[[],["typeid",3]]],[11,"vzip","","",72,[[]]],[11,"from","","",73,[[]]],[11,"into","","",73,[[]]],[11,"to_owned","","",73,[[]]],[11,"clone_into","","",73,[[]]],[11,"borrow","","",73,[[]]],[11,"borrow_mut","","",73,[[]]],[11,"try_from","","",73,[[],["result",4]]],[11,"try_into","","",73,[[],["result",4]]],[11,"type_id","","",73,[[],["typeid",3]]],[11,"vzip","","",73,[[]]],[11,"from","","",74,[[]]],[11,"into","","",74,[[]]],[11,"to_owned","","",74,[[]]],[11,"clone_into","","",74,[[]]],[11,"borrow","","",74,[[]]],[11,"borrow_mut","","",74,[[]]],[11,"try_from","","",74,[[],["result",4]]],[11,"try_into","","",74,[[],["result",4]]],[11,"type_id","","",74,[[],["typeid",3]]],[11,"vzip","","",74,[[]]],[11,"from","","",75,[[]]],[11,"into","","",75,[[]]],[11,"to_owned","","",75,[[]]],[11,"clone_into","","",75,[[]]],[11,"borrow","","",75,[[]]],[11,"borrow_mut","","",75,[[]]],[11,"try_from","","",75,[[],["result",4]]],[11,"try_into","","",75,[[],["result",4]]],[11,"type_id","","",75,[[],["typeid",3]]],[11,"vzip","","",75,[[]]],[11,"from","","",76,[[]]],[11,"into","","",76,[[]]],[11,"to_owned","","",76,[[]]],[11,"clone_into","","",76,[[]]],[11,"borrow","","",76,[[]]],[11,"borrow_mut","","",76,[[]]],[11,"try_from","","",76,[[],["result",4]]],[11,"try_into","","",76,[[],["result",4]]],[11,"type_id","","",76,[[],["typeid",3]]],[11,"vzip","","",76,[[]]],[11,"from","","",77,[[]]],[11,"into","","",77,[[]]],[11,"to_owned","","",77,[[]]],[11,"clone_into","","",77,[[]]],[11,"borrow","","",77,[[]]],[11,"borrow_mut","","",77,[[]]],[11,"try_from","","",77,[[],["result",4]]],[11,"try_into","","",77,[[],["result",4]]],[11,"type_id","","",77,[[],["typeid",3]]],[11,"vzip","","",77,[[]]],[11,"from","","",78,[[]]],[11,"into","","",78,[[]]],[11,"to_owned","","",78,[[]]],[11,"clone_into","","",78,[[]]],[11,"borrow","","",78,[[]]],[11,"borrow_mut","","",78,[[]]],[11,"try_from","","",78,[[],["result",4]]],[11,"try_into","","",78,[[],["result",4]]],[11,"type_id","","",78,[[],["typeid",3]]],[11,"vzip","","",78,[[]]],[11,"from","","",79,[[]]],[11,"into","","",79,[[]]],[11,"to_owned","","",79,[[]]],[11,"clone_into","","",79,[[]]],[11,"borrow","","",79,[[]]],[11,"borrow_mut","","",79,[[]]],[11,"try_from","","",79,[[],["result",4]]],[11,"try_into","","",79,[[],["result",4]]],[11,"type_id","","",79,[[],["typeid",3]]],[11,"vzip","","",79,[[]]],[11,"from","","",80,[[]]],[11,"into","","",80,[[]]],[11,"to_owned","","",80,[[]]],[11,"clone_into","","",80,[[]]],[11,"borrow","","",80,[[]]],[11,"borrow_mut","","",80,[[]]],[11,"try_from","","",80,[[],["result",4]]],[11,"try_into","","",80,[[],["result",4]]],[11,"type_id","","",80,[[],["typeid",3]]],[11,"vzip","","",80,[[]]],[11,"from","","",81,[[]]],[11,"into","","",81,[[]]],[11,"to_owned","","",81,[[]]],[11,"clone_into","","",81,[[]]],[11,"borrow","","",81,[[]]],[11,"borrow_mut","","",81,[[]]],[11,"try_from","","",81,[[],["result",4]]],[11,"try_into","","",81,[[],["result",4]]],[11,"type_id","","",81,[[],["typeid",3]]],[11,"vzip","","",81,[[]]],[11,"from","","",82,[[]]],[11,"into","","",82,[[]]],[11,"to_owned","","",82,[[]]],[11,"clone_into","","",82,[[]]],[11,"borrow","","",82,[[]]],[11,"borrow_mut","","",82,[[]]],[11,"try_from","","",82,[[],["result",4]]],[11,"try_into","","",82,[[],["result",4]]],[11,"type_id","","",82,[[],["typeid",3]]],[11,"vzip","","",82,[[]]],[11,"from","","",83,[[]]],[11,"into","","",83,[[]]],[11,"to_owned","","",83,[[]]],[11,"clone_into","","",83,[[]]],[11,"borrow","","",83,[[]]],[11,"borrow_mut","","",83,[[]]],[11,"try_from","","",83,[[],["result",4]]],[11,"try_into","","",83,[[],["result",4]]],[11,"type_id","","",83,[[],["typeid",3]]],[11,"vzip","","",83,[[]]],[11,"from","","",84,[[]]],[11,"into","","",84,[[]]],[11,"to_owned","","",84,[[]]],[11,"clone_into","","",84,[[]]],[11,"borrow","","",84,[[]]],[11,"borrow_mut","","",84,[[]]],[11,"try_from","","",84,[[],["result",4]]],[11,"try_into","","",84,[[],["result",4]]],[11,"type_id","","",84,[[],["typeid",3]]],[11,"vzip","","",84,[[]]],[11,"from","","",121,[[]]],[11,"into","","",121,[[]]],[11,"to_owned","","",121,[[]]],[11,"clone_into","","",121,[[]]],[11,"borrow","","",121,[[]]],[11,"borrow_mut","","",121,[[]]],[11,"try_from","","",121,[[],["result",4]]],[11,"try_into","","",121,[[],["result",4]]],[11,"type_id","","",121,[[],["typeid",3]]],[11,"vzip","","",121,[[]]],[11,"from","","",85,[[]]],[11,"into","","",85,[[]]],[11,"to_owned","","",85,[[]]],[11,"clone_into","","",85,[[]]],[11,"borrow","","",85,[[]]],[11,"borrow_mut","","",85,[[]]],[11,"try_from","","",85,[[],["result",4]]],[11,"try_into","","",85,[[],["result",4]]],[11,"type_id","","",85,[[],["typeid",3]]],[11,"vzip","","",85,[[]]],[11,"from","","",86,[[]]],[11,"into","","",86,[[]]],[11,"to_owned","","",86,[[]]],[11,"clone_into","","",86,[[]]],[11,"borrow","","",86,[[]]],[11,"borrow_mut","","",86,[[]]],[11,"try_from","","",86,[[],["result",4]]],[11,"try_into","","",86,[[],["result",4]]],[11,"type_id","","",86,[[],["typeid",3]]],[11,"vzip","","",86,[[]]],[11,"from","","",87,[[]]],[11,"into","","",87,[[]]],[11,"to_owned","","",87,[[]]],[11,"clone_into","","",87,[[]]],[11,"borrow","","",87,[[]]],[11,"borrow_mut","","",87,[[]]],[11,"try_from","","",87,[[],["result",4]]],[11,"try_into","","",87,[[],["result",4]]],[11,"type_id","","",87,[[],["typeid",3]]],[11,"vzip","","",87,[[]]],[11,"from","","",88,[[]]],[11,"into","","",88,[[]]],[11,"to_owned","","",88,[[]]],[11,"clone_into","","",88,[[]]],[11,"borrow","","",88,[[]]],[11,"borrow_mut","","",88,[[]]],[11,"try_from","","",88,[[],["result",4]]],[11,"try_into","","",88,[[],["result",4]]],[11,"type_id","","",88,[[],["typeid",3]]],[11,"vzip","","",88,[[]]],[11,"from","","",89,[[]]],[11,"into","","",89,[[]]],[11,"to_owned","","",89,[[]]],[11,"clone_into","","",89,[[]]],[11,"borrow","","",89,[[]]],[11,"borrow_mut","","",89,[[]]],[11,"try_from","","",89,[[],["result",4]]],[11,"try_into","","",89,[[],["result",4]]],[11,"type_id","","",89,[[],["typeid",3]]],[11,"vzip","","",89,[[]]],[11,"from","","",90,[[]]],[11,"into","","",90,[[]]],[11,"to_owned","","",90,[[]]],[11,"clone_into","","",90,[[]]],[11,"borrow","","",90,[[]]],[11,"borrow_mut","","",90,[[]]],[11,"try_from","","",90,[[],["result",4]]],[11,"try_into","","",90,[[],["result",4]]],[11,"type_id","","",90,[[],["typeid",3]]],[11,"vzip","","",90,[[]]],[11,"from","","",91,[[]]],[11,"into","","",91,[[]]],[11,"to_owned","","",91,[[]]],[11,"clone_into","","",91,[[]]],[11,"borrow","","",91,[[]]],[11,"borrow_mut","","",91,[[]]],[11,"try_from","","",91,[[],["result",4]]],[11,"try_into","","",91,[[],["result",4]]],[11,"type_id","","",91,[[],["typeid",3]]],[11,"vzip","","",91,[[]]],[11,"from","tink::proto::key_data","",92,[[]]],[11,"into","","",92,[[]]],[11,"to_owned","","",92,[[]]],[11,"clone_into","","",92,[[]]],[11,"borrow","","",92,[[]]],[11,"borrow_mut","","",92,[[]]],[11,"try_from","","",92,[[],["result",4]]],[11,"try_into","","",92,[[],["result",4]]],[11,"type_id","","",92,[[],["typeid",3]]],[11,"vzip","","",92,[[]]],[11,"from","tink::proto::keyset","",93,[[]]],[11,"into","","",93,[[]]],[11,"to_owned","","",93,[[]]],[11,"clone_into","","",93,[[]]],[11,"borrow","","",93,[[]]],[11,"borrow_mut","","",93,[[]]],[11,"try_from","","",93,[[],["result",4]]],[11,"try_into","","",93,[[],["result",4]]],[11,"type_id","","",93,[[],["typeid",3]]],[11,"vzip","","",93,[[]]],[11,"from","tink::proto::keyset_info","",94,[[]]],[11,"into","","",94,[[]]],[11,"to_owned","","",94,[[]]],[11,"clone_into","","",94,[[]]],[11,"borrow","","",94,[[]]],[11,"borrow_mut","","",94,[[]]],[11,"try_from","","",94,[[],["result",4]]],[11,"try_into","","",94,[[],["result",4]]],[11,"type_id","","",94,[[],["typeid",3]]],[11,"vzip","","",94,[[]]],[11,"from","tink::subtle","",97,[[]]],[11,"into","","",97,[[]]],[11,"borrow","","",97,[[]]],[11,"borrow_mut","","",97,[[]]],[11,"try_from","","",97,[[],["result",4]]],[11,"try_into","","",97,[[],["result",4]]],[11,"type_id","","",97,[[],["typeid",3]]],[11,"vzip","","",97,[[]]],[11,"from","tink::utils","",98,[[]]],[11,"into","","",98,[[]]],[11,"to_string","","",98,[[],["string",3]]],[11,"borrow","","",98,[[]]],[11,"borrow_mut","","",98,[[]]],[11,"try_from","","",98,[[],["result",4]]],[11,"try_into","","",98,[[],["result",4]]],[11,"type_id","","",98,[[],["typeid",3]]],[11,"vzip","","",98,[[]]],[11,"read","tink::keyset","Return a (cleartext) `Keyset` object from the underlying…",2,[[],[["result",4],["keyset",3],["tinkerror",3]]]],[11,"read_encrypted","","Return an `EncryptedKeyset` object from the underlying…",2,[[],[["encryptedkeyset",3],["tinkerror",3],["result",4]]]],[11,"read","","Return a (cleartext) `Keyset` object from the underlying…",5,[[],[["result",4],["keyset",3],["tinkerror",3]]]],[11,"read_encrypted","","Return an `EncryptedKeyset` object from the underlying…",5,[[],[["encryptedkeyset",3],["tinkerror",3],["result",4]]]],[11,"read","","Return `Keyset` from memory.",1,[[],[["result",4],["keyset",3],["tinkerror",3]]]],[11,"read_encrypted","","Return `EncryptedKeyset` from memory.",1,[[],[["encryptedkeyset",3],["tinkerror",3],["result",4]]]],[11,"write","","Write the keyset to the underlying [`std::io::Write`].",3,[[["keyset",3]],[["tinkerror",3],["result",4]]]],[11,"write_encrypted","","Write the encrypted keyset to the underlying…",3,[[["encryptedkeyset",3]],[["tinkerror",3],["result",4]]]],[11,"write","","Write the keyset to the underlying [`std::io::Write`].",6,[[["keyset",3]],[["tinkerror",3],["result",4]]]],[11,"write_encrypted","","Write the encrypted keyset to the underlying…",6,[[["encryptedkeyset",3]],[["tinkerror",3],["result",4]]]],[11,"write","","Write keyset to memory.",1,[[["keyset",3]],[["tinkerror",3],["result",4]]]],[11,"write_encrypted","","Write encrypted keyset to memory.",1,[[["encryptedkeyset",3]],[["tinkerror",3],["result",4]]]],[11,"from","tink::primitiveset","",12,[[["entry",3]]]],[11,"from","","",13,[[["primitiveset",3]]]],[11,"from","tink::utils","",98,[[]]],[11,"from","","",98,[[["string",3]]]],[11,"clone","tink::primitiveset","",10,[[],["entry",3]]],[11,"clone","","",11,[[],["primitiveset",3]]],[11,"clone","","",13,[[]]],[11,"clone","","",12,[[]]],[11,"clone","","",12,[[]]],[11,"clone","","",12,[[]]],[11,"clone","","",12,[[]]],[11,"clone","","",12,[[]]],[11,"clone","","",12,[[]]],[11,"clone","tink::proto","",14,[[],["aescmacparams",3]]],[11,"clone","","",15,[[],["aescmackey",3]]],[11,"clone","","",16,[[],["aescmackeyformat",3]]],[11,"clone","","",17,[[],["aescmacprfkey",3]]],[11,"clone","","",18,[[],["aescmacprfkeyformat",3]]],[11,"clone","","",19,[[],["aesctrparams",3]]],[11,"clone","","",20,[[],["aesctrkeyformat",3]]],[11,"clone","","",21,[[],["aesctrkey",3]]],[11,"clone","","",86,[[],["ellipticcurvetype",4]]],[11,"clone","","",87,[[],["ecpointformat",4]]],[11,"clone","","",88,[[],["hashtype",4]]],[11,"clone","","",22,[[],["hmacparams",3]]],[11,"clone","","",23,[[],["hmackey",3]]],[11,"clone","","",24,[[],["hmackeyformat",3]]],[11,"clone","","",25,[[],["aesctrhmacaeadkeyformat",3]]],[11,"clone","","",26,[[],["aesctrhmacaeadkey",3]]],[11,"clone","","",27,[[],["aesctrhmacstreamingparams",3]]],[11,"clone","","",28,[[],["aesctrhmacstreamingkeyformat",3]]],[11,"clone","","",29,[[],["aesctrhmacstreamingkey",3]]],[11,"clone","","",30,[[],["aeseaxparams",3]]],[11,"clone","","",31,[[],["aeseaxkeyformat",3]]],[11,"clone","","",32,[[],["aeseaxkey",3]]],[11,"clone","","",33,[[],["aesgcmkeyformat",3]]],[11,"clone","","",34,[[],["aesgcmkey",3]]],[11,"clone","","",35,[[],["aesgcmhkdfstreamingparams",3]]],[11,"clone","","",36,[[],["aesgcmhkdfstreamingkeyformat",3]]],[11,"clone","","",37,[[],["aesgcmhkdfstreamingkey",3]]],[11,"clone","","",38,[[],["aesgcmsivkeyformat",3]]],[11,"clone","","",39,[[],["aesgcmsivkey",3]]],[11,"clone","","",40,[[],["aessivkeyformat",3]]],[11,"clone","","",41,[[],["aessivkey",3]]],[11,"clone","","",118,[[],["chacha20poly1305keyformat",3]]],[11,"clone","","",42,[[],["chacha20poly1305key",3]]],[11,"clone","","",43,[[],["keytypeentry",3]]],[11,"clone","","",44,[[],["registryconfig",3]]],[11,"clone","","",45,[[],["ecdsaparams",3]]],[11,"clone","","",46,[[],["ecdsapublickey",3]]],[11,"clone","","",47,[[],["ecdsaprivatekey",3]]],[11,"clone","","",48,[[],["ecdsakeyformat",3]]],[11,"clone","","",89,[[],["ecdsasignatureencoding",4]]],[11,"clone","","",49,[[],["keytemplate",3]]],[11,"clone","","",50,[[],["keydata",3]]],[11,"clone","tink::proto::key_data","",92,[[],["keymaterialtype",4]]],[11,"clone","tink::proto","",51,[[],["keyset",3]]],[11,"clone","tink::proto::keyset","",93,[[],["key",3]]],[11,"clone","tink::proto","",52,[[],["keysetinfo",3]]],[11,"clone","tink::proto::keyset_info","",94,[[],["keyinfo",3]]],[11,"clone","tink::proto","",53,[[],["encryptedkeyset",3]]],[11,"clone","","",90,[[],["keystatustype",4]]],[11,"clone","","",91,[[],["outputprefixtype",4]]],[11,"clone","","",54,[[],["ecieshkdfkemparams",3]]],[11,"clone","","",55,[[],["eciesaeaddemparams",3]]],[11,"clone","","",56,[[],["eciesaeadhkdfparams",3]]],[11,"clone","","",57,[[],["eciesaeadhkdfpublickey",3]]],[11,"clone","","",58,[[],["eciesaeadhkdfprivatekey",3]]],[11,"clone","","",59,[[],["eciesaeadhkdfkeyformat",3]]],[11,"clone","","",119,[[],["ed25519keyformat",3]]],[11,"clone","","",60,[[],["ed25519publickey",3]]],[11,"clone","","",61,[[],["ed25519privatekey",3]]],[11,"clone","","",120,[[],["empty",3]]],[11,"clone","","",62,[[],["hkdfprfparams",3]]],[11,"clone","","",63,[[],["hkdfprfkey",3]]],[11,"clone","","",64,[[],["hkdfprfkeyformat",3]]],[11,"clone","","",65,[[],["hmacprfparams",3]]],[11,"clone","","",66,[[],["hmacprfkey",3]]],[11,"clone","","",67,[[],["hmacprfkeyformat",3]]],[11,"clone","","",68,[[],["jwthmackey",3]]],[11,"clone","","",69,[[],["jwthmackeyformat",3]]],[11,"clone","","",70,[[],["kmsaeadkeyformat",3]]],[11,"clone","","",71,[[],["kmsaeadkey",3]]],[11,"clone","","",72,[[],["kmsenvelopeaeadkeyformat",3]]],[11,"clone","","",73,[[],["kmsenvelopeaeadkey",3]]],[11,"clone","","",74,[[],["prfbasedderiverparams",3]]],[11,"clone","","",75,[[],["prfbasedderiverkeyformat",3]]],[11,"clone","","",76,[[],["prfbasedderiverkey",3]]],[11,"clone","","",77,[[],["rsassapkcs1params",3]]],[11,"clone","","",78,[[],["rsassapkcs1publickey",3]]],[11,"clone","","",79,[[],["rsassapkcs1privatekey",3]]],[11,"clone","","",80,[[],["rsassapkcs1keyformat",3]]],[11,"clone","","",81,[[],["rsassapssparams",3]]],[11,"clone","","",82,[[],["rsassapsspublickey",3]]],[11,"clone","","",83,[[],["rsassapssprivatekey",3]]],[11,"clone","","",84,[[],["rsassapsskeyformat",3]]],[11,"clone","","",121,[[],["xchacha20poly1305keyformat",3]]],[11,"clone","","",85,[[],["xchacha20poly1305key",3]]],[11,"clone","tink","",0,[[]]],[11,"default","tink::keyset","",7,[[],["manager",3]]],[11,"default","","",1,[[],["memreaderwriter",3]]],[11,"default","tink::primitiveset","",11,[[],["primitiveset",3]]],[11,"default","tink::proto","",14,[[],["aescmacparams",3]]],[11,"default","","",15,[[],["aescmackey",3]]],[11,"default","","",16,[[],["aescmackeyformat",3]]],[11,"default","","",17,[[],["aescmacprfkey",3]]],[11,"default","","",18,[[],["aescmacprfkeyformat",3]]],[11,"default","","",19,[[],["aesctrparams",3]]],[11,"default","","",20,[[],["aesctrkeyformat",3]]],[11,"default","","",21,[[],["aesctrkey",3]]],[11,"default","","",86,[[],["ellipticcurvetype",4]]],[11,"default","","",87,[[],["ecpointformat",4]]],[11,"default","","",88,[[],["hashtype",4]]],[11,"default","","",22,[[],["hmacparams",3]]],[11,"default","","",23,[[],["hmackey",3]]],[11,"default","","",24,[[],["hmackeyformat",3]]],[11,"default","","",25,[[],["aesctrhmacaeadkeyformat",3]]],[11,"default","","",26,[[],["aesctrhmacaeadkey",3]]],[11,"default","","",27,[[],["aesctrhmacstreamingparams",3]]],[11,"default","","",28,[[],["aesctrhmacstreamingkeyformat",3]]],[11,"default","","",29,[[],["aesctrhmacstreamingkey",3]]],[11,"default","","",30,[[],["aeseaxparams",3]]],[11,"default","","",31,[[],["aeseaxkeyformat",3]]],[11,"default","","",32,[[],["aeseaxkey",3]]],[11,"default","","",33,[[],["aesgcmkeyformat",3]]],[11,"default","","",34,[[],["aesgcmkey",3]]],[11,"default","","",35,[[],["aesgcmhkdfstreamingparams",3]]],[11,"default","","",36,[[],["aesgcmhkdfstreamingkeyformat",3]]],[11,"default","","",37,[[],["aesgcmhkdfstreamingkey",3]]],[11,"default","","",38,[[],["aesgcmsivkeyformat",3]]],[11,"default","","",39,[[],["aesgcmsivkey",3]]],[11,"default","","",40,[[],["aessivkeyformat",3]]],[11,"default","","",41,[[],["aessivkey",3]]],[11,"default","","",118,[[],["chacha20poly1305keyformat",3]]],[11,"default","","",42,[[],["chacha20poly1305key",3]]],[11,"default","","",43,[[],["keytypeentry",3]]],[11,"default","","",44,[[],["registryconfig",3]]],[11,"default","","",45,[[],["ecdsaparams",3]]],[11,"default","","",46,[[],["ecdsapublickey",3]]],[11,"default","","",47,[[],["ecdsaprivatekey",3]]],[11,"default","","",48,[[],["ecdsakeyformat",3]]],[11,"default","","",89,[[],["ecdsasignatureencoding",4]]],[11,"default","","",49,[[],["keytemplate",3]]],[11,"default","","",50,[[],["keydata",3]]],[11,"default","tink::proto::key_data","",92,[[],["keymaterialtype",4]]],[11,"default","tink::proto","",51,[[],["keyset",3]]],[11,"default","tink::proto::keyset","",93,[[],["key",3]]],[11,"default","tink::proto","",52,[[],["keysetinfo",3]]],[11,"default","tink::proto::keyset_info","",94,[[],["keyinfo",3]]],[11,"default","tink::proto","",53,[[],["encryptedkeyset",3]]],[11,"default","","",90,[[],["keystatustype",4]]],[11,"default","","",91,[[],["outputprefixtype",4]]],[11,"default","","",54,[[],["ecieshkdfkemparams",3]]],[11,"default","","",55,[[],["eciesaeaddemparams",3]]],[11,"default","","",56,[[],["eciesaeadhkdfparams",3]]],[11,"default","","",57,[[],["eciesaeadhkdfpublickey",3]]],[11,"default","","",58,[[],["eciesaeadhkdfprivatekey",3]]],[11,"default","","",59,[[],["eciesaeadhkdfkeyformat",3]]],[11,"default","","",119,[[],["ed25519keyformat",3]]],[11,"default","","",60,[[],["ed25519publickey",3]]],[11,"default","","",61,[[],["ed25519privatekey",3]]],[11,"default","","",120,[[],["empty",3]]],[11,"default","","",62,[[],["hkdfprfparams",3]]],[11,"default","","",63,[[],["hkdfprfkey",3]]],[11,"default","","",64,[[],["hkdfprfkeyformat",3]]],[11,"default","","",65,[[],["hmacprfparams",3]]],[11,"default","","",66,[[],["hmacprfkey",3]]],[11,"default","","",67,[[],["hmacprfkeyformat",3]]],[11,"default","","",68,[[],["jwthmackey",3]]],[11,"default","","",69,[[],["jwthmackeyformat",3]]],[11,"default","","",70,[[],["kmsaeadkeyformat",3]]],[11,"default","","",71,[[],["kmsaeadkey",3]]],[11,"default","","",72,[[],["kmsenvelopeaeadkeyformat",3]]],[11,"default","","",73,[[],["kmsenvelopeaeadkey",3]]],[11,"default","","",74,[[],["prfbasedderiverparams",3]]],[11,"default","","",75,[[],["prfbasedderiverkeyformat",3]]],[11,"default","","",76,[[],["prfbasedderiverkey",3]]],[11,"default","","",77,[[],["rsassapkcs1params",3]]],[11,"default","","",78,[[],["rsassapkcs1publickey",3]]],[11,"default","","",79,[[],["rsassapkcs1privatekey",3]]],[11,"default","","",80,[[],["rsassapkcs1keyformat",3]]],[11,"default","","",81,[[],["rsassapssparams",3]]],[11,"default","","",82,[[],["rsassapsspublickey",3]]],[11,"default","","",83,[[],["rsassapssprivatekey",3]]],[11,"default","","",84,[[],["rsassapsskeyformat",3]]],[11,"default","","",121,[[],["xchacha20poly1305keyformat",3]]],[11,"default","","",85,[[],["xchacha20poly1305key",3]]],[11,"cmp","","",86,[[["ellipticcurvetype",4]],["ordering",4]]],[11,"cmp","","",87,[[["ecpointformat",4]],["ordering",4]]],[11,"cmp","","",88,[[["hashtype",4]],["ordering",4]]],[11,"cmp","","",89,[[["ecdsasignatureencoding",4]],["ordering",4]]],[11,"cmp","tink::proto::key_data","",92,[[["keymaterialtype",4]],["ordering",4]]],[11,"cmp","tink::proto","",90,[[["keystatustype",4]],["ordering",4]]],[11,"cmp","","",91,[[["outputprefixtype",4]],["ordering",4]]],[11,"eq","","",14,[[["aescmacparams",3]]]],[11,"ne","","",14,[[["aescmacparams",3]]]],[11,"eq","","",15,[[["aescmackey",3]]]],[11,"ne","","",15,[[["aescmackey",3]]]],[11,"eq","","",16,[[["aescmackeyformat",3]]]],[11,"ne","","",16,[[["aescmackeyformat",3]]]],[11,"eq","","",17,[[["aescmacprfkey",3]]]],[11,"ne","","",17,[[["aescmacprfkey",3]]]],[11,"eq","","",18,[[["aescmacprfkeyformat",3]]]],[11,"ne","","",18,[[["aescmacprfkeyformat",3]]]],[11,"eq","","",19,[[["aesctrparams",3]]]],[11,"ne","","",19,[[["aesctrparams",3]]]],[11,"eq","","",20,[[["aesctrkeyformat",3]]]],[11,"ne","","",20,[[["aesctrkeyformat",3]]]],[11,"eq","","",21,[[["aesctrkey",3]]]],[11,"ne","","",21,[[["aesctrkey",3]]]],[11,"eq","","",86,[[["ellipticcurvetype",4]]]],[11,"eq","","",87,[[["ecpointformat",4]]]],[11,"eq","","",88,[[["hashtype",4]]]],[11,"eq","","",22,[[["hmacparams",3]]]],[11,"ne","","",22,[[["hmacparams",3]]]],[11,"eq","","",23,[[["hmackey",3]]]],[11,"ne","","",23,[[["hmackey",3]]]],[11,"eq","","",24,[[["hmackeyformat",3]]]],[11,"ne","","",24,[[["hmackeyformat",3]]]],[11,"eq","","",25,[[["aesctrhmacaeadkeyformat",3]]]],[11,"ne","","",25,[[["aesctrhmacaeadkeyformat",3]]]],[11,"eq","","",26,[[["aesctrhmacaeadkey",3]]]],[11,"ne","","",26,[[["aesctrhmacaeadkey",3]]]],[11,"eq","","",27,[[["aesctrhmacstreamingparams",3]]]],[11,"ne","","",27,[[["aesctrhmacstreamingparams",3]]]],[11,"eq","","",28,[[["aesctrhmacstreamingkeyformat",3]]]],[11,"ne","","",28,[[["aesctrhmacstreamingkeyformat",3]]]],[11,"eq","","",29,[[["aesctrhmacstreamingkey",3]]]],[11,"ne","","",29,[[["aesctrhmacstreamingkey",3]]]],[11,"eq","","",30,[[["aeseaxparams",3]]]],[11,"ne","","",30,[[["aeseaxparams",3]]]],[11,"eq","","",31,[[["aeseaxkeyformat",3]]]],[11,"ne","","",31,[[["aeseaxkeyformat",3]]]],[11,"eq","","",32,[[["aeseaxkey",3]]]],[11,"ne","","",32,[[["aeseaxkey",3]]]],[11,"eq","","",33,[[["aesgcmkeyformat",3]]]],[11,"ne","","",33,[[["aesgcmkeyformat",3]]]],[11,"eq","","",34,[[["aesgcmkey",3]]]],[11,"ne","","",34,[[["aesgcmkey",3]]]],[11,"eq","","",35,[[["aesgcmhkdfstreamingparams",3]]]],[11,"ne","","",35,[[["aesgcmhkdfstreamingparams",3]]]],[11,"eq","","",36,[[["aesgcmhkdfstreamingkeyformat",3]]]],[11,"ne","","",36,[[["aesgcmhkdfstreamingkeyformat",3]]]],[11,"eq","","",37,[[["aesgcmhkdfstreamingkey",3]]]],[11,"ne","","",37,[[["aesgcmhkdfstreamingkey",3]]]],[11,"eq","","",38,[[["aesgcmsivkeyformat",3]]]],[11,"ne","","",38,[[["aesgcmsivkeyformat",3]]]],[11,"eq","","",39,[[["aesgcmsivkey",3]]]],[11,"ne","","",39,[[["aesgcmsivkey",3]]]],[11,"eq","","",40,[[["aessivkeyformat",3]]]],[11,"ne","","",40,[[["aessivkeyformat",3]]]],[11,"eq","","",41,[[["aessivkey",3]]]],[11,"ne","","",41,[[["aessivkey",3]]]],[11,"eq","","",118,[[["chacha20poly1305keyformat",3]]]],[11,"eq","","",42,[[["chacha20poly1305key",3]]]],[11,"ne","","",42,[[["chacha20poly1305key",3]]]],[11,"eq","","",43,[[["keytypeentry",3]]]],[11,"ne","","",43,[[["keytypeentry",3]]]],[11,"eq","","",44,[[["registryconfig",3]]]],[11,"ne","","",44,[[["registryconfig",3]]]],[11,"eq","","",45,[[["ecdsaparams",3]]]],[11,"ne","","",45,[[["ecdsaparams",3]]]],[11,"eq","","",46,[[["ecdsapublickey",3]]]],[11,"ne","","",46,[[["ecdsapublickey",3]]]],[11,"eq","","",47,[[["ecdsaprivatekey",3]]]],[11,"ne","","",47,[[["ecdsaprivatekey",3]]]],[11,"eq","","",48,[[["ecdsakeyformat",3]]]],[11,"ne","","",48,[[["ecdsakeyformat",3]]]],[11,"eq","","",89,[[["ecdsasignatureencoding",4]]]],[11,"eq","","",49,[[["keytemplate",3]]]],[11,"ne","","",49,[[["keytemplate",3]]]],[11,"eq","","",50,[[["keydata",3]]]],[11,"ne","","",50,[[["keydata",3]]]],[11,"eq","tink::proto::key_data","",92,[[["keymaterialtype",4]]]],[11,"eq","tink::proto","",51,[[["keyset",3]]]],[11,"ne","","",51,[[["keyset",3]]]],[11,"eq","tink::proto::keyset","",93,[[["key",3]]]],[11,"ne","","",93,[[["key",3]]]],[11,"eq","tink::proto","",52,[[["keysetinfo",3]]]],[11,"ne","","",52,[[["keysetinfo",3]]]],[11,"eq","tink::proto::keyset_info","",94,[[["keyinfo",3]]]],[11,"ne","","",94,[[["keyinfo",3]]]],[11,"eq","tink::proto","",53,[[["encryptedkeyset",3]]]],[11,"ne","","",53,[[["encryptedkeyset",3]]]],[11,"eq","","",90,[[["keystatustype",4]]]],[11,"eq","","",91,[[["outputprefixtype",4]]]],[11,"eq","","",54,[[["ecieshkdfkemparams",3]]]],[11,"ne","","",54,[[["ecieshkdfkemparams",3]]]],[11,"eq","","",55,[[["eciesaeaddemparams",3]]]],[11,"ne","","",55,[[["eciesaeaddemparams",3]]]],[11,"eq","","",56,[[["eciesaeadhkdfparams",3]]]],[11,"ne","","",56,[[["eciesaeadhkdfparams",3]]]],[11,"eq","","",57,[[["eciesaeadhkdfpublickey",3]]]],[11,"ne","","",57,[[["eciesaeadhkdfpublickey",3]]]],[11,"eq","","",58,[[["eciesaeadhkdfprivatekey",3]]]],[11,"ne","","",58,[[["eciesaeadhkdfprivatekey",3]]]],[11,"eq","","",59,[[["eciesaeadhkdfkeyformat",3]]]],[11,"ne","","",59,[[["eciesaeadhkdfkeyformat",3]]]],[11,"eq","","",119,[[["ed25519keyformat",3]]]],[11,"eq","","",60,[[["ed25519publickey",3]]]],[11,"ne","","",60,[[["ed25519publickey",3]]]],[11,"eq","","",61,[[["ed25519privatekey",3]]]],[11,"ne","","",61,[[["ed25519privatekey",3]]]],[11,"eq","","",120,[[["empty",3]]]],[11,"eq","","",62,[[["hkdfprfparams",3]]]],[11,"ne","","",62,[[["hkdfprfparams",3]]]],[11,"eq","","",63,[[["hkdfprfkey",3]]]],[11,"ne","","",63,[[["hkdfprfkey",3]]]],[11,"eq","","",64,[[["hkdfprfkeyformat",3]]]],[11,"ne","","",64,[[["hkdfprfkeyformat",3]]]],[11,"eq","","",65,[[["hmacprfparams",3]]]],[11,"ne","","",65,[[["hmacprfparams",3]]]],[11,"eq","","",66,[[["hmacprfkey",3]]]],[11,"ne","","",66,[[["hmacprfkey",3]]]],[11,"eq","","",67,[[["hmacprfkeyformat",3]]]],[11,"ne","","",67,[[["hmacprfkeyformat",3]]]],[11,"eq","","",68,[[["jwthmackey",3]]]],[11,"ne","","",68,[[["jwthmackey",3]]]],[11,"eq","","",69,[[["jwthmackeyformat",3]]]],[11,"ne","","",69,[[["jwthmackeyformat",3]]]],[11,"eq","","",70,[[["kmsaeadkeyformat",3]]]],[11,"ne","","",70,[[["kmsaeadkeyformat",3]]]],[11,"eq","","",71,[[["kmsaeadkey",3]]]],[11,"ne","","",71,[[["kmsaeadkey",3]]]],[11,"eq","","",72,[[["kmsenvelopeaeadkeyformat",3]]]],[11,"ne","","",72,[[["kmsenvelopeaeadkeyformat",3]]]],[11,"eq","","",73,[[["kmsenvelopeaeadkey",3]]]],[11,"ne","","",73,[[["kmsenvelopeaeadkey",3]]]],[11,"eq","","",74,[[["prfbasedderiverparams",3]]]],[11,"ne","","",74,[[["prfbasedderiverparams",3]]]],[11,"eq","","",75,[[["prfbasedderiverkeyformat",3]]]],[11,"ne","","",75,[[["prfbasedderiverkeyformat",3]]]],[11,"eq","","",76,[[["prfbasedderiverkey",3]]]],[11,"ne","","",76,[[["prfbasedderiverkey",3]]]],[11,"eq","","",77,[[["rsassapkcs1params",3]]]],[11,"ne","","",77,[[["rsassapkcs1params",3]]]],[11,"eq","","",78,[[["rsassapkcs1publickey",3]]]],[11,"ne","","",78,[[["rsassapkcs1publickey",3]]]],[11,"eq","","",79,[[["rsassapkcs1privatekey",3]]]],[11,"ne","","",79,[[["rsassapkcs1privatekey",3]]]],[11,"eq","","",80,[[["rsassapkcs1keyformat",3]]]],[11,"ne","","",80,[[["rsassapkcs1keyformat",3]]]],[11,"eq","","",81,[[["rsassapssparams",3]]]],[11,"ne","","",81,[[["rsassapssparams",3]]]],[11,"eq","","",82,[[["rsassapsspublickey",3]]]],[11,"ne","","",82,[[["rsassapsspublickey",3]]]],[11,"eq","","",83,[[["rsassapssprivatekey",3]]]],[11,"ne","","",83,[[["rsassapssprivatekey",3]]]],[11,"eq","","",84,[[["rsassapsskeyformat",3]]]],[11,"ne","","",84,[[["rsassapsskeyformat",3]]]],[11,"eq","","",121,[[["xchacha20poly1305keyformat",3]]]],[11,"eq","","",85,[[["xchacha20poly1305key",3]]]],[11,"ne","","",85,[[["xchacha20poly1305key",3]]]],[11,"partial_cmp","","",86,[[["ellipticcurvetype",4]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",87,[[["ecpointformat",4]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",88,[[["hashtype",4]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",89,[[["ecdsasignatureencoding",4]],[["ordering",4],["option",4]]]],[11,"partial_cmp","tink::proto::key_data","",92,[[["keymaterialtype",4]],[["ordering",4],["option",4]]]],[11,"partial_cmp","tink::proto","",90,[[["keystatustype",4]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",91,[[["outputprefixtype",4]],[["ordering",4],["option",4]]]],[11,"fmt","tink::keyset","Return a string representation of the managed keyset. The…",4,[[["formatter",3]],["result",6]]],[11,"fmt","tink::proto","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",86,[[["formatter",3]],["result",6]]],[11,"fmt","","",87,[[["formatter",3]],["result",6]]],[11,"fmt","","",88,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",23,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",28,[[["formatter",3]],["result",6]]],[11,"fmt","","",29,[[["formatter",3]],["result",6]]],[11,"fmt","","",30,[[["formatter",3]],["result",6]]],[11,"fmt","","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",32,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",34,[[["formatter",3]],["result",6]]],[11,"fmt","","",35,[[["formatter",3]],["result",6]]],[11,"fmt","","",36,[[["formatter",3]],["result",6]]],[11,"fmt","","",37,[[["formatter",3]],["result",6]]],[11,"fmt","","",38,[[["formatter",3]],["result",6]]],[11,"fmt","","",39,[[["formatter",3]],["result",6]]],[11,"fmt","","",40,[[["formatter",3]],["result",6]]],[11,"fmt","","",41,[[["formatter",3]],["result",6]]],[11,"fmt","","",118,[[["formatter",3]],["result",6]]],[11,"fmt","","",42,[[["formatter",3]],["result",6]]],[11,"fmt","","",43,[[["formatter",3]],["result",6]]],[11,"fmt","","",44,[[["formatter",3]],["result",6]]],[11,"fmt","","",45,[[["formatter",3]],["result",6]]],[11,"fmt","","",46,[[["formatter",3]],["result",6]]],[11,"fmt","","",47,[[["formatter",3]],["result",6]]],[11,"fmt","","",48,[[["formatter",3]],["result",6]]],[11,"fmt","","",89,[[["formatter",3]],["result",6]]],[11,"fmt","","",49,[[["formatter",3]],["result",6]]],[11,"fmt","","",50,[[["formatter",3]],["result",6]]],[11,"fmt","tink::proto::key_data","",92,[[["formatter",3]],["result",6]]],[11,"fmt","tink::proto","",51,[[["formatter",3]],["result",6]]],[11,"fmt","tink::proto::keyset","",93,[[["formatter",3]],["result",6]]],[11,"fmt","tink::proto","",52,[[["formatter",3]],["result",6]]],[11,"fmt","tink::proto::keyset_info","",94,[[["formatter",3]],["result",6]]],[11,"fmt","tink::proto","",53,[[["formatter",3]],["result",6]]],[11,"fmt","","",90,[[["formatter",3]],["result",6]]],[11,"fmt","","",91,[[["formatter",3]],["result",6]]],[11,"fmt","","",54,[[["formatter",3]],["result",6]]],[11,"fmt","","",55,[[["formatter",3]],["result",6]]],[11,"fmt","","",56,[[["formatter",3]],["result",6]]],[11,"fmt","","",57,[[["formatter",3]],["result",6]]],[11,"fmt","","",58,[[["formatter",3]],["result",6]]],[11,"fmt","","",59,[[["formatter",3]],["result",6]]],[11,"fmt","","",119,[[["formatter",3]],["result",6]]],[11,"fmt","","",60,[[["formatter",3]],["result",6]]],[11,"fmt","","",61,[[["formatter",3]],["result",6]]],[11,"fmt","","",120,[[["formatter",3]],["result",6]]],[11,"fmt","","",62,[[["formatter",3]],["result",6]]],[11,"fmt","","",63,[[["formatter",3]],["result",6]]],[11,"fmt","","",64,[[["formatter",3]],["result",6]]],[11,"fmt","","",65,[[["formatter",3]],["result",6]]],[11,"fmt","","",66,[[["formatter",3]],["result",6]]],[11,"fmt","","",67,[[["formatter",3]],["result",6]]],[11,"fmt","","",68,[[["formatter",3]],["result",6]]],[11,"fmt","","",69,[[["formatter",3]],["result",6]]],[11,"fmt","","",70,[[["formatter",3]],["result",6]]],[11,"fmt","","",71,[[["formatter",3]],["result",6]]],[11,"fmt","","",72,[[["formatter",3]],["result",6]]],[11,"fmt","","",73,[[["formatter",3]],["result",6]]],[11,"fmt","","",74,[[["formatter",3]],["result",6]]],[11,"fmt","","",75,[[["formatter",3]],["result",6]]],[11,"fmt","","",76,[[["formatter",3]],["result",6]]],[11,"fmt","","",77,[[["formatter",3]],["result",6]]],[11,"fmt","","",78,[[["formatter",3]],["result",6]]],[11,"fmt","","",79,[[["formatter",3]],["result",6]]],[11,"fmt","","",80,[[["formatter",3]],["result",6]]],[11,"fmt","","",81,[[["formatter",3]],["result",6]]],[11,"fmt","","",82,[[["formatter",3]],["result",6]]],[11,"fmt","","",83,[[["formatter",3]],["result",6]]],[11,"fmt","","",84,[[["formatter",3]],["result",6]]],[11,"fmt","","",121,[[["formatter",3]],["result",6]]],[11,"fmt","","",85,[[["formatter",3]],["result",6]]],[11,"fmt","tink::utils","",98,[[["formatter",3]],["result",6]]],[11,"fmt","","",98,[[["formatter",3]],["result",6]]],[11,"hash","tink::proto","",86,[[]]],[11,"hash","","",87,[[]]],[11,"hash","","",88,[[]]],[11,"hash","","",89,[[]]],[11,"hash","tink::proto::key_data","",92,[[]]],[11,"hash","tink::proto","",90,[[]]],[11,"hash","","",91,[[]]],[11,"encode_raw","","",14,[[]]],[11,"merge_field","","",14,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",14,[[]]],[11,"clear","","",14,[[]]],[11,"encode_raw","","",15,[[]]],[11,"merge_field","","",15,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",15,[[]]],[11,"clear","","",15,[[]]],[11,"encode_raw","","",16,[[]]],[11,"merge_field","","",16,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",16,[[]]],[11,"clear","","",16,[[]]],[11,"encode_raw","","",17,[[]]],[11,"merge_field","","",17,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",17,[[]]],[11,"clear","","",17,[[]]],[11,"encode_raw","","",18,[[]]],[11,"merge_field","","",18,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",18,[[]]],[11,"clear","","",18,[[]]],[11,"encode_raw","","",19,[[]]],[11,"merge_field","","",19,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",19,[[]]],[11,"clear","","",19,[[]]],[11,"encode_raw","","",20,[[]]],[11,"merge_field","","",20,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",20,[[]]],[11,"clear","","",20,[[]]],[11,"encode_raw","","",21,[[]]],[11,"merge_field","","",21,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",21,[[]]],[11,"clear","","",21,[[]]],[11,"encode_raw","","",22,[[]]],[11,"merge_field","","",22,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",22,[[]]],[11,"clear","","",22,[[]]],[11,"encode_raw","","",23,[[]]],[11,"merge_field","","",23,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",23,[[]]],[11,"clear","","",23,[[]]],[11,"encode_raw","","",24,[[]]],[11,"merge_field","","",24,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",24,[[]]],[11,"clear","","",24,[[]]],[11,"encode_raw","","",25,[[]]],[11,"merge_field","","",25,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",25,[[]]],[11,"clear","","",25,[[]]],[11,"encode_raw","","",26,[[]]],[11,"merge_field","","",26,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",26,[[]]],[11,"clear","","",26,[[]]],[11,"encode_raw","","",27,[[]]],[11,"merge_field","","",27,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",27,[[]]],[11,"clear","","",27,[[]]],[11,"encode_raw","","",28,[[]]],[11,"merge_field","","",28,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",28,[[]]],[11,"clear","","",28,[[]]],[11,"encode_raw","","",29,[[]]],[11,"merge_field","","",29,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",29,[[]]],[11,"clear","","",29,[[]]],[11,"encode_raw","","",30,[[]]],[11,"merge_field","","",30,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",30,[[]]],[11,"clear","","",30,[[]]],[11,"encode_raw","","",31,[[]]],[11,"merge_field","","",31,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",31,[[]]],[11,"clear","","",31,[[]]],[11,"encode_raw","","",32,[[]]],[11,"merge_field","","",32,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",32,[[]]],[11,"clear","","",32,[[]]],[11,"encode_raw","","",33,[[]]],[11,"merge_field","","",33,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",33,[[]]],[11,"clear","","",33,[[]]],[11,"encode_raw","","",34,[[]]],[11,"merge_field","","",34,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",34,[[]]],[11,"clear","","",34,[[]]],[11,"encode_raw","","",35,[[]]],[11,"merge_field","","",35,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",35,[[]]],[11,"clear","","",35,[[]]],[11,"encode_raw","","",36,[[]]],[11,"merge_field","","",36,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",36,[[]]],[11,"clear","","",36,[[]]],[11,"encode_raw","","",37,[[]]],[11,"merge_field","","",37,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",37,[[]]],[11,"clear","","",37,[[]]],[11,"encode_raw","","",38,[[]]],[11,"merge_field","","",38,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",38,[[]]],[11,"clear","","",38,[[]]],[11,"encode_raw","","",39,[[]]],[11,"merge_field","","",39,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",39,[[]]],[11,"clear","","",39,[[]]],[11,"encode_raw","","",40,[[]]],[11,"merge_field","","",40,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",40,[[]]],[11,"clear","","",40,[[]]],[11,"encode_raw","","",41,[[]]],[11,"merge_field","","",41,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",41,[[]]],[11,"clear","","",41,[[]]],[11,"encode_raw","","",118,[[]]],[11,"merge_field","","",118,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",118,[[]]],[11,"clear","","",118,[[]]],[11,"encode_raw","","",42,[[]]],[11,"merge_field","","",42,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",42,[[]]],[11,"clear","","",42,[[]]],[11,"encode_raw","","",43,[[]]],[11,"merge_field","","",43,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",43,[[]]],[11,"clear","","",43,[[]]],[11,"encode_raw","","",44,[[]]],[11,"merge_field","","",44,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",44,[[]]],[11,"clear","","",44,[[]]],[11,"encode_raw","","",45,[[]]],[11,"merge_field","","",45,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",45,[[]]],[11,"clear","","",45,[[]]],[11,"encode_raw","","",46,[[]]],[11,"merge_field","","",46,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",46,[[]]],[11,"clear","","",46,[[]]],[11,"encode_raw","","",47,[[]]],[11,"merge_field","","",47,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",47,[[]]],[11,"clear","","",47,[[]]],[11,"encode_raw","","",48,[[]]],[11,"merge_field","","",48,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",48,[[]]],[11,"clear","","",48,[[]]],[11,"encode_raw","","",49,[[]]],[11,"merge_field","","",49,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",49,[[]]],[11,"clear","","",49,[[]]],[11,"encode_raw","","",50,[[]]],[11,"merge_field","","",50,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",50,[[]]],[11,"clear","","",50,[[]]],[11,"encode_raw","","",51,[[]]],[11,"merge_field","","",51,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",51,[[]]],[11,"clear","","",51,[[]]],[11,"encode_raw","tink::proto::keyset","",93,[[]]],[11,"merge_field","","",93,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",93,[[]]],[11,"clear","","",93,[[]]],[11,"encode_raw","tink::proto","",52,[[]]],[11,"merge_field","","",52,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",52,[[]]],[11,"clear","","",52,[[]]],[11,"encode_raw","tink::proto::keyset_info","",94,[[]]],[11,"merge_field","","",94,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",94,[[]]],[11,"clear","","",94,[[]]],[11,"encode_raw","tink::proto","",53,[[]]],[11,"merge_field","","",53,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",53,[[]]],[11,"clear","","",53,[[]]],[11,"encode_raw","","",54,[[]]],[11,"merge_field","","",54,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",54,[[]]],[11,"clear","","",54,[[]]],[11,"encode_raw","","",55,[[]]],[11,"merge_field","","",55,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",55,[[]]],[11,"clear","","",55,[[]]],[11,"encode_raw","","",56,[[]]],[11,"merge_field","","",56,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",56,[[]]],[11,"clear","","",56,[[]]],[11,"encode_raw","","",57,[[]]],[11,"merge_field","","",57,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",57,[[]]],[11,"clear","","",57,[[]]],[11,"encode_raw","","",58,[[]]],[11,"merge_field","","",58,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",58,[[]]],[11,"clear","","",58,[[]]],[11,"encode_raw","","",59,[[]]],[11,"merge_field","","",59,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",59,[[]]],[11,"clear","","",59,[[]]],[11,"encode_raw","","",119,[[]]],[11,"merge_field","","",119,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",119,[[]]],[11,"clear","","",119,[[]]],[11,"encode_raw","","",60,[[]]],[11,"merge_field","","",60,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",60,[[]]],[11,"clear","","",60,[[]]],[11,"encode_raw","","",61,[[]]],[11,"merge_field","","",61,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",61,[[]]],[11,"clear","","",61,[[]]],[11,"encode_raw","","",120,[[]]],[11,"merge_field","","",120,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",120,[[]]],[11,"clear","","",120,[[]]],[11,"encode_raw","","",62,[[]]],[11,"merge_field","","",62,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",62,[[]]],[11,"clear","","",62,[[]]],[11,"encode_raw","","",63,[[]]],[11,"merge_field","","",63,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",63,[[]]],[11,"clear","","",63,[[]]],[11,"encode_raw","","",64,[[]]],[11,"merge_field","","",64,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",64,[[]]],[11,"clear","","",64,[[]]],[11,"encode_raw","","",65,[[]]],[11,"merge_field","","",65,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",65,[[]]],[11,"clear","","",65,[[]]],[11,"encode_raw","","",66,[[]]],[11,"merge_field","","",66,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",66,[[]]],[11,"clear","","",66,[[]]],[11,"encode_raw","","",67,[[]]],[11,"merge_field","","",67,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",67,[[]]],[11,"clear","","",67,[[]]],[11,"encode_raw","","",68,[[]]],[11,"merge_field","","",68,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",68,[[]]],[11,"clear","","",68,[[]]],[11,"encode_raw","","",69,[[]]],[11,"merge_field","","",69,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",69,[[]]],[11,"clear","","",69,[[]]],[11,"encode_raw","","",70,[[]]],[11,"merge_field","","",70,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",70,[[]]],[11,"clear","","",70,[[]]],[11,"encode_raw","","",71,[[]]],[11,"merge_field","","",71,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",71,[[]]],[11,"clear","","",71,[[]]],[11,"encode_raw","","",72,[[]]],[11,"merge_field","","",72,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",72,[[]]],[11,"clear","","",72,[[]]],[11,"encode_raw","","",73,[[]]],[11,"merge_field","","",73,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",73,[[]]],[11,"clear","","",73,[[]]],[11,"encode_raw","","",74,[[]]],[11,"merge_field","","",74,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",74,[[]]],[11,"clear","","",74,[[]]],[11,"encode_raw","","",75,[[]]],[11,"merge_field","","",75,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",75,[[]]],[11,"clear","","",75,[[]]],[11,"encode_raw","","",76,[[]]],[11,"merge_field","","",76,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",76,[[]]],[11,"clear","","",76,[[]]],[11,"encode_raw","","",77,[[]]],[11,"merge_field","","",77,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",77,[[]]],[11,"clear","","",77,[[]]],[11,"encode_raw","","",78,[[]]],[11,"merge_field","","",78,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",78,[[]]],[11,"clear","","",78,[[]]],[11,"encode_raw","","",79,[[]]],[11,"merge_field","","",79,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",79,[[]]],[11,"clear","","",79,[[]]],[11,"encode_raw","","",80,[[]]],[11,"merge_field","","",80,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",80,[[]]],[11,"clear","","",80,[[]]],[11,"encode_raw","","",81,[[]]],[11,"merge_field","","",81,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",81,[[]]],[11,"clear","","",81,[[]]],[11,"encode_raw","","",82,[[]]],[11,"merge_field","","",82,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",82,[[]]],[11,"clear","","",82,[[]]],[11,"encode_raw","","",83,[[]]],[11,"merge_field","","",83,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",83,[[]]],[11,"clear","","",83,[[]]],[11,"encode_raw","","",84,[[]]],[11,"merge_field","","",84,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",84,[[]]],[11,"clear","","",84,[[]]],[11,"encode_raw","","",121,[[]]],[11,"merge_field","","",121,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",121,[[]]],[11,"clear","","",121,[[]]],[11,"encode_raw","","",85,[[]]],[11,"merge_field","","",85,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",85,[[]]],[11,"clear","","",85,[[]]],[11,"serialize","","",50,[[],["result",4]]],[11,"serialize","","",51,[[],["result",4]]],[11,"serialize","tink::proto::keyset","",93,[[],["result",4]]],[11,"serialize","tink::proto","",52,[[],["result",4]]],[11,"serialize","tink::proto::keyset_info","",94,[[],["result",4]]],[11,"serialize","tink::proto","",53,[[],["result",4]]],[11,"deserialize","","",50,[[],["result",4]]],[11,"deserialize","","",51,[[],["result",4]]],[11,"deserialize","tink::proto::keyset","",93,[[],["result",4]]],[11,"deserialize","tink::proto","",52,[[],["result",4]]],[11,"deserialize","tink::proto::keyset_info","",94,[[],["result",4]]],[11,"deserialize","tink::proto","",53,[[],["result",4]]],[11,"does_support","tink::registry","Return true iff this [`KeyManager`] supports key type…",96,[[]]],[11,"new_key_data","","Generate a new `KeyData` according to specification in…",96,[[],[["result",4],["keydata",3],["tinkerror",3]]]],[11,"supports_private_keys","","Indicate whether this `KeyManager` understands private key…",96,[[]]],[11,"public_key_data","","Extract the public key data from the private key. If…",96,[[],[["result",4],["keydata",3],["tinkerror",3]]]],[11,"verify_mac","tink","",107,[[],[["tinkerror",3],["result",4]]]]],"p":[[4,"Primitive"],[3,"MemReaderWriter"],[3,"BinaryReader"],[3,"BinaryWriter"],[3,"Handle"],[3,"JsonReader"],[3,"JsonWriter"],[3,"Manager"],[8,"Reader"],[8,"Writer"],[3,"Entry"],[3,"PrimitiveSet"],[3,"TypedEntry"],[3,"TypedPrimitiveSet"],[3,"AesCmacParams"],[3,"AesCmacKey"],[3,"AesCmacKeyFormat"],[3,"AesCmacPrfKey"],[3,"AesCmacPrfKeyFormat"],[3,"AesCtrParams"],[3,"AesCtrKeyFormat"],[3,"AesCtrKey"],[3,"HmacParams"],[3,"HmacKey"],[3,"HmacKeyFormat"],[3,"AesCtrHmacAeadKeyFormat"],[3,"AesCtrHmacAeadKey"],[3,"AesCtrHmacStreamingParams"],[3,"AesCtrHmacStreamingKeyFormat"],[3,"AesCtrHmacStreamingKey"],[3,"AesEaxParams"],[3,"AesEaxKeyFormat"],[3,"AesEaxKey"],[3,"AesGcmKeyFormat"],[3,"AesGcmKey"],[3,"AesGcmHkdfStreamingParams"],[3,"AesGcmHkdfStreamingKeyFormat"],[3,"AesGcmHkdfStreamingKey"],[3,"AesGcmSivKeyFormat"],[3,"AesGcmSivKey"],[3,"AesSivKeyFormat"],[3,"AesSivKey"],[3,"ChaCha20Poly1305Key"],[3,"KeyTypeEntry"],[3,"RegistryConfig"],[3,"EcdsaParams"],[3,"EcdsaPublicKey"],[3,"EcdsaPrivateKey"],[3,"EcdsaKeyFormat"],[3,"KeyTemplate"],[3,"KeyData"],[3,"Keyset"],[3,"KeysetInfo"],[3,"EncryptedKeyset"],[3,"EciesHkdfKemParams"],[3,"EciesAeadDemParams"],[3,"EciesAeadHkdfParams"],[3,"EciesAeadHkdfPublicKey"],[3,"EciesAeadHkdfPrivateKey"],[3,"EciesAeadHkdfKeyFormat"],[3,"Ed25519PublicKey"],[3,"Ed25519PrivateKey"],[3,"HkdfPrfParams"],[3,"HkdfPrfKey"],[3,"HkdfPrfKeyFormat"],[3,"HmacPrfParams"],[3,"HmacPrfKey"],[3,"HmacPrfKeyFormat"],[3,"JwtHmacKey"],[3,"JwtHmacKeyFormat"],[3,"KmsAeadKeyFormat"],[3,"KmsAeadKey"],[3,"KmsEnvelopeAeadKeyFormat"],[3,"KmsEnvelopeAeadKey"],[3,"PrfBasedDeriverParams"],[3,"PrfBasedDeriverKeyFormat"],[3,"PrfBasedDeriverKey"],[3,"RsaSsaPkcs1Params"],[3,"RsaSsaPkcs1PublicKey"],[3,"RsaSsaPkcs1PrivateKey"],[3,"RsaSsaPkcs1KeyFormat"],[3,"RsaSsaPssParams"],[3,"RsaSsaPssPublicKey"],[3,"RsaSsaPssPrivateKey"],[3,"RsaSsaPssKeyFormat"],[3,"XChaCha20Poly1305Key"],[4,"EllipticCurveType"],[4,"EcPointFormat"],[4,"HashType"],[4,"EcdsaSignatureEncoding"],[4,"KeyStatusType"],[4,"OutputPrefixType"],[4,"KeyMaterialType"],[3,"Key"],[3,"KeyInfo"],[8,"KmsClient"],[8,"KeyManager"],[4,"HashFunc"],[3,"TinkError"],[8,"Aead"],[8,"AeadBoxClone"],[8,"DeterministicAead"],[8,"DeterministicAeadBoxClone"],[8,"HybridDecrypt"],[8,"HybridDecryptBoxClone"],[8,"HybridEncrypt"],[8,"HybridEncryptBoxClone"],[8,"Mac"],[8,"MacBoxClone"],[8,"Prf"],[8,"PrfBoxClone"],[8,"Signer"],[8,"SignerBoxClone"],[8,"StreamingAead"],[8,"EncryptingWrite"],[8,"StreamingAeadBoxClone"],[8,"Verifier"],[8,"VerifierBoxClone"],[3,"ChaCha20Poly1305KeyFormat"],[3,"Ed25519KeyFormat"],[3,"Empty"],[3,"XChaCha20Poly1305KeyFormat"]]},\
"tink_aead":{"doc":"Provides implementations of the AEAD primitive.","i":[[3,"KmsEnvelopeAead","tink_aead","`KmsEnvelopeAead` represents an instance of Envelope AEAD.",null,null],[5,"new","","Returns a [`tink::Aead`] primitive from the given keyset…",null,[[["handle",3]],[["box",3],["tinkerror",3],["result",4]]]],[5,"new_with_key_manager","","Return a [`tink::Aead`] primitive from the given keyset…",null,[[["option",4],["handle",3],["arc",3]],[["box",3],["tinkerror",3],["result",4]]]],[5,"aes128_gcm_key_template","","Return a [`KeyTemplate`] that generates an AES-GCM key…",null,[[],["keytemplate",3]]],[5,"aes256_gcm_key_template","","Return a [`KeyTemplate`] that generates an AES-GCM key…",null,[[],["keytemplate",3]]],[5,"aes256_gcm_no_prefix_key_template","","Return a [`KeyTemplate`] that generates an AES-GCM key…",null,[[],["keytemplate",3]]],[5,"aes128_gcm_siv_key_template","","Return a [`KeyTemplate`] that generates an AES-GCM-SIV key…",null,[[],["keytemplate",3]]],[5,"aes256_gcm_siv_key_template","","Return a [`KeyTemplate`] that generates an AES-GCM-SIV key…",null,[[],["keytemplate",3]]],[5,"aes256_gcm_siv_no_prefix_key_template","","Return a [`KeyTemplate`] that generates an AES-GCM-SIV key…",null,[[],["keytemplate",3]]],[5,"aes128_ctr_hmac_sha256_key_template","","Return a [`KeyTemplate`] that generates an…",null,[[],["keytemplate",3]]],[5,"aes256_ctr_hmac_sha256_key_template","","Return a [`KeyTemplate`] that generates an…",null,[[],["keytemplate",3]]],[5,"aes256_ctr_hmac_sha512_key_template","","Return a [`KeyTemplate`] that generates an…",null,[[],["keytemplate",3]]],[5,"cha_cha20_poly1305_key_template","","Return a [`KeyTemplate`] that generates a…",null,[[],["keytemplate",3]]],[5,"x_cha_cha20_poly1305_key_template","","Return a [`KeyTemplate`] that generates a…",null,[[],["keytemplate",3]]],[5,"kms_envelope_aead_key_template","","Return a [`KeyTemplate`] that generates a KmsEnvelopeAead…",null,[[["keytemplate",3]],["keytemplate",3]]],[5,"init","","Initialize the `tink-aead` crate, registering its…",null,[[]]],[11,"new","","",0,[[["keytemplate",3],["aead",8],["box",3]],["kmsenvelopeaead",3]]],[0,"subtle","","Provides subtle implementations of the `tink::Aead`…",null,null],[3,"AesCtr","tink_aead::subtle","`AesCtr` is an implementation of AEAD interface.",null,null],[12,"iv_size","","",1,null],[3,"AesGcm","","`AesGcm` is an implementation of the [`tink::Aead`] trait.",null,null],[3,"AesGcmSiv","","`AesGcmSiv` is an implementation of the [`tink::Aead`]…",null,null],[3,"ChaCha20Poly1305","","`ChaCha20Poly1305` is an implementation of the…",null,null],[3,"EncryptThenAuthenticate","","`EncryptThenAuthenticate` performs an encrypt-then-MAC…",null,null],[3,"XChaCha20Poly1305","","`XChaCha20Poly1305` is an implementation of the…",null,null],[5,"validate_aes_key_size","","Check if the given key size is a valid AES key size.",null,[[],[["tinkerror",3],["result",4]]]],[11,"new","","Return an `AesCtr` instance. The key argument should be…",1,[[],[["result",4],["aesctr",3],["tinkerror",3]]]],[11,"key_len","","Return the length of the key.",1,[[]]],[11,"new","","Return an [`AesGcm`] instance. The key argument should be…",2,[[],[["result",4],["tinkerror",3],["aesgcm",3]]]],[11,"new","","Return an [`AesGcmSiv`] instance. The key argument should…",3,[[],[["result",4],["aesgcmsiv",3],["tinkerror",3]]]],[11,"new","","Return an `ChaCha20Poly1305` instance. The `key` argument…",4,[[],[["tinkerror",3],["result",4],["chacha20poly1305",3]]]],[11,"new","","Return a new instance of EncryptThenAuthenticate.",5,[[["mac",8],["box",3],["box",3],["indcpacipher",8]],[["result",4],["encryptthenauthenticate",3],["tinkerror",3]]]],[11,"new","","Return an `XChaCha20Poly1305` instance. The `key` argument…",6,[[],[["xchacha20poly1305",3],["tinkerror",3],["result",4]]]],[17,"AES_CTR_MIN_IV_SIZE","","The minimum IV size that this implementation supports.",null,null],[17,"AES_BLOCK_SIZE_IN_BYTES","","",null,null],[17,"AES_GCM_IV_SIZE","","The only IV size that this implementation supports.",null,null],[17,"AES_GCM_TAG_SIZE","","The only tag size that this implementation supports.",null,null],[17,"AES_GCM_SIV_IV_SIZE","","The only IV size that this implementation supports.",null,null],[17,"AES_GCM_SIV_TAG_SIZE","","The only tag size that this implementation supports.",null,null],[17,"CHA_CHA20_KEY_SIZE","","Size of a ChaCh20 key in bytes.",null,null],[17,"CHA_CHA20_NONCE_SIZE","","Size of a ChaCh20 nonce in bytes.",null,null],[17,"X_CHA_CHA20_KEY_SIZE","","Size of an XChaCh20 key in bytes.",null,null],[17,"X_CHA_CHA20_NONCE_SIZE","","Size of an XChaCh20 nonce in bytes.",null,null],[8,"IndCpaCipher","","",null,null],[10,"encrypt","","",7,[[],[["vec",3],["result",4],["tinkerror",3]]]],[10,"decrypt","","",7,[[],[["vec",3],["result",4],["tinkerror",3]]]],[8,"IndCpaCipherBoxClone","","Trait bound to indicate that primitive trait objects…",null,null],[10,"box_clone","","",8,[[],[["box",3],["indcpacipher",8]]]],[17,"AES_CTR_HMAC_AEAD_KEY_VERSION","tink_aead","Maximal version of AES-CTR-HMAC keys.",null,null],[17,"AES_CTR_HMAC_AEAD_TYPE_URL","","Type URL of AES-CTR-HMAC keys that Tink supports.",null,null],[17,"AES_GCM_KEY_VERSION","","Maximal version of AES-GCM keys.",null,null],[17,"AES_GCM_TYPE_URL","","Type URL of AES-GCM keys that Tink supports.",null,null],[17,"AES_GCM_SIV_KEY_VERSION","","Maximal version of AES-GCM-SIV keys.",null,null],[17,"AES_GCM_SIV_TYPE_URL","","Type URL of AES-GCM-SIV keys that Tink supports.",null,null],[17,"CHA_CHA20_POLY1305_KEY_VERSION","","Maximal version of ChaCha20Poly1305 keys.",null,null],[17,"CHA_CHA20_POLY1305_TYPE_URL","","Type URL of ChaCha20Poly1305 keys that Tink supports.",null,null],[17,"KMS_ENVELOPE_AEAD_KEY_VERSION","","Maximal version of KMS-wrapped keys.",null,null],[17,"KMS_ENVELOPE_AEAD_TYPE_URL","","Type URL of KMS-wrapped keys that Tink supports.",null,null],[17,"X_CHA_CHA20_POLY1305_KEY_VERSION","","Maximal version of XChaCha20Poly1305 keys.",null,null],[17,"X_CHA_CHA20_POLY1305_TYPE_URL","","Type URL of XChaCha20Poly1305 keys that Tink supports.",null,null],[17,"UPSTREAM_VERSION","","The upstream Tink version that this Rust port is based on.",null,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"box_clone","","",0,[[],[["aead",8],["box",3]]]],[11,"vzip","","",0,[[]]],[11,"from","tink_aead::subtle","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"box_clone","","",2,[[],[["aead",8],["box",3]]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"box_clone","","",3,[[],[["aead",8],["box",3]]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"box_clone","","",4,[[],[["aead",8],["box",3]]]],[11,"vzip","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"box_clone","","",5,[[],[["aead",8],["box",3]]]],[11,"vzip","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"box_clone","","",6,[[],[["aead",8],["box",3]]]],[11,"vzip","","",6,[[]]],[11,"encrypt","","Encrypt plaintext using AES in CTR mode. The resulting…",1,[[],[["vec",3],["result",4],["tinkerror",3]]]],[11,"decrypt","","Decrypt ciphertext.",1,[[],[["vec",3],["result",4],["tinkerror",3]]]],[11,"clone","tink_aead","",0,[[]]],[11,"clone","tink_aead::subtle","",1,[[],["aesctr",3]]],[11,"clone","","",2,[[],["aesgcm",3]]],[11,"clone","","",3,[[],["aesgcmsiv",3]]],[11,"clone","","",4,[[],["chacha20poly1305",3]]],[11,"clone","","",5,[[]]],[11,"clone","","",6,[[],["xchacha20poly1305",3]]],[11,"encrypt","tink_aead","",0,[[],[["vec",3],["result",4],["tinkerror",3]]]],[11,"decrypt","","",0,[[],[["vec",3],["result",4],["tinkerror",3]]]],[11,"encrypt","tink_aead::subtle","Encrypt `pt` with `aad` as additional authenticated data.…",2,[[],[["vec",3],["result",4],["tinkerror",3]]]],[11,"decrypt","","Decrypt `ct` with `aad` as the additional authenticated…",2,[[],[["vec",3],["result",4],["tinkerror",3]]]],[11,"encrypt","","Encrypt `pt` with `aad` as additional authenticated data.…",3,[[],[["vec",3],["result",4],["tinkerror",3]]]],[11,"decrypt","","Decrypt `ct` with `aad` as the additional authenticated…",3,[[],[["vec",3],["result",4],["tinkerror",3]]]],[11,"encrypt","","Encrypt `pt` with `aad` as additional authenticated data.…",4,[[],[["vec",3],["result",4],["tinkerror",3]]]],[11,"decrypt","","Decrypt `ct` with `aad` as the additional authenticated…",4,[[],[["vec",3],["result",4],["tinkerror",3]]]],[11,"encrypt","","Encrypt `plaintext` with `additional_data` as additional…",5,[[],[["vec",3],["result",4],["tinkerror",3]]]],[11,"decrypt","","Decrypt `ciphertext` with `additional_data` as additional…",5,[[],[["vec",3],["result",4],["tinkerror",3]]]],[11,"encrypt","","Encrypt `pt` with `aad` as additional authenticated data.…",6,[[],[["vec",3],["result",4],["tinkerror",3]]]],[11,"decrypt","","Decrypt `ct` with `aad` as the additional authenticated…",6,[[],[["vec",3],["result",4],["tinkerror",3]]]]],"p":[[3,"KmsEnvelopeAead"],[3,"AesCtr"],[3,"AesGcm"],[3,"AesGcmSiv"],[3,"ChaCha20Poly1305"],[3,"EncryptThenAuthenticate"],[3,"XChaCha20Poly1305"],[8,"IndCpaCipher"],[8,"IndCpaCipherBoxClone"]]},\
"tink_awskms":{"doc":"Provide integration with the AWS Cloud KMS.","i":[[3,"AwsClient","tink_awskms","`AwsClient` represents a client that connects to the AWS…",null,null],[11,"new","","Return a new AWS KMS client which will use default…",0,[[],[["result",4],["awsclient",3],["tinkerror",3]]]],[11,"new_with_credentials","","Return a new AWS KMS client which will use given…",0,[[["path",3]],[["result",4],["awsclient",3],["tinkerror",3]]]],[11,"new_with_kms","","Return a new AWS KMS client with user created KMS client.…",0,[[["kmsclient",3]],[["result",4],["awsclient",3],["tinkerror",3]]]],[17,"AWS_PREFIX","","Prefix for any AWS-KMS key URIs.",null,null],[17,"UPSTREAM_VERSION","","The upstream Tink version that this Rust port is based on.",null,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"supported","","",0,[[]]],[11,"get_aead","","Get an AEAD backed by `key_uri`. `key_uri` must have the…",0,[[],[["result",4],["tinkerror",3],["box",3]]]]],"p":[[3,"AwsClient"]]},\
"tink_daead":{"doc":"This crate provides implementations of the…","i":[[5,"new","tink_daead","Return a [`tink::DeterministicAead`] primitive from the…",null,[[["handle",3]],[["result",4],["box",3],["tinkerror",3]]]],[5,"new_with_key_manager","","Return a [`tink::DeterministicAead`] primitive from the…",null,[[["arc",3],["option",4],["handle",3]],[["result",4],["box",3],["tinkerror",3]]]],[5,"aes_siv_key_template","","Return a `KeyTemplate` that generates a AES-SIV key.",null,[[],["keytemplate",3]]],[5,"init","","Initialize the `tink-daead` crate, registering its…",null,[[]]],[0,"subtle","","Provides subtle implementations of the `DeterministicAEAD`…",null,null],[3,"AesSiv","tink_daead::subtle","`AesSiv` is an implementation of AES-SIV-CMAC as defined…",null,null],[17,"AES_SIV_KEY_SIZE","","Key size in bytes.",null,null],[11,"new","","Return an [`AesSiv`] instance.",0,[[],[["result",4],["aessiv",3],["tinkerror",3]]]],[17,"AES_SIV_KEY_VERSION","tink_daead","Maximal version of AES-SIV keys.",null,null],[17,"AES_SIV_TYPE_URL","","Type URL of AES-SIV keys that Tink supports.",null,null],[17,"UPSTREAM_VERSION","","The upstream Tink version that this Rust port is based on.",null,null],[11,"from","tink_daead::subtle","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"box_clone","","",0,[[],[["box",3],["deterministicaead",8]]]],[11,"vzip","","",0,[[]]],[11,"clone","","",0,[[],["aessiv",3]]],[11,"encrypt_deterministically","","",0,[[],[["vec",3],["tinkerror",3],["result",4]]]],[11,"decrypt_deterministically","","",0,[[],[["vec",3],["tinkerror",3],["result",4]]]]],"p":[[3,"AesSiv"]]},\
"tink_gcpkms":{"doc":"Provide integration with the GCP Cloud KMS.","i":[[3,"GcpClient","tink_gcpkms","`GcpClient` represents a client that connects to the GCP…",null,null],[3,"GcpAead","","`GcpAead` represents a GCP KMS service to a particular URI.",null,null],[4,"CloudKmsClient","","",null,null],[13,"WithDefaultCreds","","",0,null],[13,"WithServiceAccount","","",0,null],[11,"new","","Return a new GCP KMS client which will use default…",1,[[],[["tinkerror",3],["gcpclient",3],["result",4]]]],[11,"new_with_credentials","","Return a new GCP KMS client which will use given…",1,[[["path",3]],[["tinkerror",3],["gcpclient",3],["result",4]]]],[11,"new","","Return a new GCP KMS service.",2,[[["cloudkmsclient",4]],["gcpaead",3]]],[17,"GCP_PREFIX","","Prefix for any GCP-KMS key URIs.",null,null],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"box_clone","","",2,[[],[["box",3],["aead",8]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"clone","","",0,[[],["cloudkmsclient",4]]],[11,"clone","","",2,[[],["gcpaead",3]]],[11,"supported","","",1,[[]]],[11,"get_aead","","",1,[[],[["result",4],["box",3],["tinkerror",3]]]],[11,"encrypt","","",2,[[],[["vec",3],["tinkerror",3],["result",4]]]],[11,"decrypt","","",2,[[],[["vec",3],["tinkerror",3],["result",4]]]]],"p":[[4,"CloudKmsClient"],[3,"GcpClient"],[3,"GcpAead"]]},\
"tink_mac":{"doc":"This crate provides implementations of the [`tink::Mac`]…","i":[[5,"new","tink_mac","Create a [`tink::Mac`] primitive from the given keyset…",null,[[["handle",3]],[["box",3],["tinkerror",3],["result",4]]]],[5,"new_with_key_manager","","Create a [`tink::Mac`] primitive from the given keyset…",null,[[["arc",3],["option",4],["handle",3]],[["box",3],["tinkerror",3],["result",4]]]],[5,"hmac_sha256_tag128_key_template","","Return a [`KeyTemplate`] that generates a HMAC key with…",null,[[],["keytemplate",3]]],[5,"hmac_sha256_tag256_key_template","","Return a [`KeyTemplate`] that generates a HMAC key with…",null,[[],["keytemplate",3]]],[5,"hmac_sha512_tag256_key_template","","Return a [`KeyTemplate`] that generates a HMAC key with…",null,[[],["keytemplate",3]]],[5,"hmac_sha512_tag512_key_template","","Return a [`KeyTemplate`] that generates a HMAC key with…",null,[[],["keytemplate",3]]],[5,"aes_cmac_tag128_key_template","","Return a [`KeyTemplate`] that generates a AES-CMAC key…",null,[[],["keytemplate",3]]],[5,"init","","Initialize the `tink-daead` crate, registering its…",null,[[]]],[0,"subtle","","Provides subtle implementations of the `tink::Mac`…",null,null],[3,"AesCmac","tink_mac::subtle","`AesCmac` represents an AES-CMAC struct that implements…",null,null],[3,"Hmac","","Implementation of trait `tink::Mac`.",null,null],[5,"validate_cmac_params","","Validate the parameters for an AES-CMAC against the…",null,[[],[["result",4],["tinkerror",3]]]],[5,"validate_hmac_params","","Validate parameters of [`Hmac`] constructor.",null,[[["hashtype",4]],[["result",4],["tinkerror",3]]]],[11,"new","","Create a new [`AesCmac`] object that implements the…",0,[[],[["result",4],["aescmac",3],["tinkerror",3]]]],[11,"new","","Create a new instance of [`Hmac`] with the specified key…",1,[[["hashtype",4]],[["tinkerror",3],["result",4]]]],[17,"CMAC_KEY_VERSION","tink_mac","Maximal version of AES-CMAC keys.",null,null],[17,"CMAC_TYPE_URL","","Type URL of AES-CMAC keys that Tink supports.",null,null],[17,"HMAC_KEY_VERSION","","Maximal version of HMAC keys.",null,null],[17,"HMAC_TYPE_URL","","Type URL of HMAC keys that Tink supports.",null,null],[17,"UPSTREAM_VERSION","","The upstream Tink version that this Rust port is based on.",null,null],[11,"from","tink_mac::subtle","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"box_clone","","",0,[[],[["box",3],["mac",8]]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"box_clone","","",1,[[],[["box",3],["mac",8]]]],[11,"vzip","","",1,[[]]],[11,"clone","","",0,[[],["aescmac",3]]],[11,"clone","","",1,[[],["hmac",3]]],[11,"compute_mac","","",0,[[],[["vec",3],["tinkerror",3],["result",4]]]],[11,"compute_mac","","",1,[[],[["vec",3],["tinkerror",3],["result",4]]]]],"p":[[3,"AesCmac"],[3,"Hmac"]]},\
"tink_prf":{"doc":"This crate provides implementations of the [`tink::Prf`]…","i":[[3,"Set","tink_prf","`Set` is a set of PRFs. A `Keyset` can be converted into a…",null,null],[12,"primary_id","","The key ID marked as primary in the corresponding `Keyset`.",0,null],[12,"prfs","","Map key IDs to their corresponding Prf.",0,null],[5,"hmac_sha256_prf_key_template","","Return a [`KeyTemplate`] that generates an HMAC key with…",null,[[],["keytemplate",3]]],[5,"hmac_sha512_prf_key_template","","Return a [`KeyTemplate`] that generates an HMAC key with…",null,[[],["keytemplate",3]]],[5,"hkdf_sha256_prf_key_template","","Return a [`KeyTemplate`] that generates an HKDF key with…",null,[[],["keytemplate",3]]],[5,"aes_cmac_prf_key_template","","Return a [`KeyTemplate`] that generates an AES-CMAC key…",null,[[],["keytemplate",3]]],[5,"init","","Initialize the `tink-prf` crate, registering its…",null,[[]]],[11,"new","","Create a [`Set`] from the given keyset handle.",0,[[["handle",3]],[["set",3],["tinkerror",3],["result",4]]]],[11,"new_with_key_manager","","Creates a [`Set`] primitive from the given keyset handle…",0,[[["arc",3],["handle",3],["option",4]],[["set",3],["tinkerror",3],["result",4]]]],[11,"compute_primary_prf","","Equivalent to…",0,[[],[["vec",3],["result",4],["tinkerror",3]]]],[0,"subtle","","Provides subtle implementations of the `tink::Prf`…",null,null],[3,"AesCmacPrf","tink_prf::subtle","`AesCmacPrf` is a type that can be used to compute several…",null,null],[3,"HkdfPrf","","`HkdfPrf` is a type that can be used to compute several…",null,null],[3,"HmacPrf","","`HmacPrf` is a type that can be used to compute several…",null,null],[5,"validate_aes_cmac_prf_params","","Check that the key is the recommended size for AES-CMAC.",null,[[],[["result",4],["tinkerror",3]]]],[5,"validate_hkdf_prf_params","","Validate parameters of HKDF constructor.",null,[[["hashtype",4]],[["result",4],["tinkerror",3]]]],[5,"validate_hmac_prf_params","","Validate parameters of HMAC constructor.",null,[[["hashtype",4]],[["result",4],["tinkerror",3]]]],[11,"new","","Create a new `AesCmacPrf` object and initialize it with…",1,[[],[["tinkerror",3],["aescmacprf",3],["result",4]]]],[11,"new","","Create a new [`HkdfPrf`] object and initialize it with the…",2,[[["hashtype",4]],[["hkdfprf",3],["result",4],["tinkerror",3]]]],[11,"new","","Create a new [`HmacPrf`] object and initialize it with the…",3,[[["hashtype",4]],[["result",4],["hmacprf",3],["tinkerror",3]]]],[17,"AES_CMAC_PRF_KEY_VERSION","tink_prf","Maximal version of AES-CMAC PRF keys.",null,null],[17,"AES_CMAC_PRF_TYPE_URL","","Type URL of AES-CMAC PRF keys that Tink supports.",null,null],[17,"HKDF_PRF_KEY_VERSION","","Maximal version of HKDF PRF keys.",null,null],[17,"HKDF_PRF_TYPE_URL","","Type URL of HKDF PRF keys that Tink supports.",null,null],[17,"HMAC_PRF_KEY_VERSION","","Maximal version of HMAC PRF keys.",null,null],[17,"HMAC_PRF_TYPE_URL","","Type URL of HMAC PRF keys that Tink supports.",null,null],[17,"UPSTREAM_VERSION","","The upstream Tink version that this Rust port is based on.",null,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","tink_prf::subtle","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"box_clone","","",1,[[],[["box",3],["prf",8]]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"box_clone","","",2,[[],[["box",3],["prf",8]]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"box_clone","","",3,[[],[["box",3],["prf",8]]]],[11,"vzip","","",3,[[]]],[11,"clone","","",1,[[],["aescmacprf",3]]],[11,"clone","","",2,[[],["hkdfprf",3]]],[11,"clone","","",3,[[],["hmacprf",3]]],[11,"compute_prf","","Compute the AES-CMAC for the given key and data, returning…",1,[[],[["vec",3],["result",4],["tinkerror",3]]]],[11,"compute_prf","","",2,[[],[["vec",3],["result",4],["tinkerror",3]]]],[11,"compute_prf","","",3,[[],[["vec",3],["result",4],["tinkerror",3]]]]],"p":[[3,"Set"],[3,"AesCmacPrf"],[3,"HkdfPrf"],[3,"HmacPrf"]]},\
"tink_signature":{"doc":"Implementations of the Signer and Verifier primitives.","i":[[5,"ecdsa_p256_key_template","tink_signature","Return a [`KeyTemplate`] that generates a new ECDSA…",null,[[],["keytemplate",3]]],[5,"ecdsa_p256_key_p1363_template","","Return a [`KeyTemplate`] that generates a new ECDSA…",null,[[],["keytemplate",3]]],[5,"ecdsa_p256_key_without_prefix_template","","Return a [`KeyTemplate`] that generates a new ECDSA…",null,[[],["keytemplate",3]]],[5,"ecdsa_p384_key_template","","Return a [`KeyTemplate`] that generates a new ECDSA…",null,[[],["keytemplate",3]]],[5,"ecdsa_p384_key_without_prefix_template","","Return a [`KeyTemplate`] that generates a new ECDSA…",null,[[],["keytemplate",3]]],[5,"ecdsa_p521_key_template","","Return a [`KeyTemplate`] that generates a new ECDSA…",null,[[],["keytemplate",3]]],[5,"ecdsa_p521_key_without_prefix_template","","Return a [`KeyTemplate`] that generates a new ECDSA…",null,[[],["keytemplate",3]]],[5,"ed25519_key_template","","Return a [`KeyTemplate`] that generates a new ED25519…",null,[[],["keytemplate",3]]],[5,"ed25519_key_without_prefix_template","","Return a [`KeyTemplate`] that generates a new ED25519…",null,[[],["keytemplate",3]]],[5,"new_signer","","Return a [`tink::Signer`] primitive from the given keyset…",null,[[["handle",3]],[["box",3],["tinkerror",3],["result",4]]]],[5,"new_signer_with_key_manager","","Return a [`tink::Signer`] primitive from the given keyset…",null,[[["arc",3],["handle",3],["option",4]],[["box",3],["tinkerror",3],["result",4]]]],[5,"new_verifier","","Return a [`tink::Verifier`] primitive from the given…",null,[[["handle",3]],[["box",3],["tinkerror",3],["result",4]]]],[5,"new_verifier_with_key_manager","","Return a [`tink::Verifier`] primitive from the given…",null,[[["arc",3],["handle",3],["option",4]],[["box",3],["tinkerror",3],["result",4]]]],[5,"init","","Initialize the `tink-signature` crate, registering its…",null,[[]]],[0,"subtle","","This module provides subtle implementations of digital…",null,null],[3,"EcdsaSigner","tink_signature::subtle","`EcdsaSigner` is an implementation of [`tink::Signer`] for…",null,null],[3,"EcdsaVerifier","","",null,null],[3,"Ed25519Signer","","A [`Signer`] implementation for ED25519.",null,null],[3,"Ed25519Verifier","","A [`tink::Verifier`] for ED25519.",null,null],[4,"SignatureEncoding","","Supported signature encodings. This is a precise subset of…",null,null],[13,"Der","","",0,null],[13,"IeeeP1363","","",0,null],[4,"EcdsaPrivateKey","","",null,null],[13,"NistP256","","",1,null],[4,"EcdsaPublicKey","","An ECDSA public key.",null,null],[13,"NistP256","","",2,null],[5,"validate_ecdsa_params","","Validate ECDSA parameters. The hash\'s strength must not be…",null,[[["ecdsasignatureencoding",4],["ellipticcurvetype",4],["hashtype",4]],[["signatureencoding",4],["result",4],["tinkerror",3]]]],[11,"new","","Create a new instance of [`EcdsaSigner`].",3,[[["ellipticcurvetype",4],["ecdsasignatureencoding",4],["hashtype",4]],[["tinkerror",3],["result",4]]]],[11,"new_from_private_key","","Create a new instance of [`EcdsaSigner`] from a private key.",3,[[["ellipticcurvetype",4],["ecdsaprivatekey",4],["hashtype",4],["ecdsasignatureencoding",4]],[["tinkerror",3],["result",4]]]],[11,"new","","Create a new instance of [`EcdsaVerifier`].",4,[[["ellipticcurvetype",4],["ecdsasignatureencoding",4],["hashtype",4]],[["tinkerror",3],["result",4]]]],[11,"new_from_public_key","","Create a new instance of [`EcdsaVerifier`] from a public…",4,[[["ellipticcurvetype",4],["hashtype",4],["ecdsapublickey",4],["ecdsasignatureencoding",4]],[["tinkerror",3],["result",4]]]],[11,"new","","Create an [`Ed25519Signer`] from the provided seed, which…",5,[[],[["tinkerror",3],["result",4]]]],[11,"new_from_keypair","","",5,[[["keypair",3]],[["tinkerror",3],["result",4]]]],[11,"new","","Create a new instance of `Ed25519Verifier` from a…",6,[[],[["tinkerror",3],["result",4]]]],[11,"new_from_public_key","","",6,[[["publickey",3]],[["tinkerror",3],["result",4]]]],[17,"ECDSA_SIGNER_KEY_VERSION","tink_signature","Maximal version of ECDSA keys.",null,null],[17,"ECDSA_SIGNER_TYPE_URL","","Type URL of ECDSA keys that Tink supports.",null,null],[17,"ECDSA_UNCOMPRESSED_POINT_PREFIX","","Prefix for uncompressed elliptic curve points.",null,null],[17,"ECDSA_VERIFIER_KEY_VERSION","","Maximal version of ECDSA keys.",null,null],[17,"ECDSA_VERIFIER_TYPE_URL","","Type URL of ECDSA keys that Tink supports.",null,null],[17,"ED25519_SIGNER_KEY_VERSION","","Maximal version of ED25519 keys.",null,null],[17,"ED25519_SIGNER_TYPE_URL","","Type URL of ED25519 keys that Tink supports.",null,null],[17,"ED25519_VERIFIER_KEY_VERSION","","Maximal version of ED25519 keys.",null,null],[17,"ED25519_VERIFIER_TYPE_URL","","Type URL of ED25519 keys that Tink supports.",null,null],[17,"UPSTREAM_VERSION","","The upstream Tink version that this Rust port is based on.",null,null],[11,"from","tink_signature::subtle","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"box_clone","","",3,[[],[["signer",8],["box",3]]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"box_clone","","",4,[[],[["box",3],["verifier",8]]]],[11,"vzip","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"box_clone","","",5,[[],[["signer",8],["box",3]]]],[11,"vzip","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"box_clone","","",6,[[],[["box",3],["verifier",8]]]],[11,"vzip","","",6,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"clone","","",0,[[],["signatureencoding",4]]],[11,"clone","","",1,[[]]],[11,"clone","","",3,[[],["ecdsasigner",3]]],[11,"clone","","",2,[[],["ecdsapublickey",4]]],[11,"clone","","",4,[[],["ecdsaverifier",3]]],[11,"clone","","",5,[[]]],[11,"clone","","",6,[[],["ed25519verifier",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"sign","","",3,[[],[["vec",3],["result",4],["tinkerror",3]]]],[11,"sign","","",5,[[],[["vec",3],["result",4],["tinkerror",3]]]],[11,"verify","","",4,[[],[["tinkerror",3],["result",4]]]],[11,"verify","","",6,[[],[["tinkerror",3],["result",4]]]]],"p":[[4,"SignatureEncoding"],[4,"EcdsaPrivateKey"],[4,"EcdsaPublicKey"],[3,"EcdsaSigner"],[3,"EcdsaVerifier"],[3,"Ed25519Signer"],[3,"Ed25519Verifier"]]},\
"tink_streaming_aead":{"doc":"This crate provides implementations of the streaming AEAD…","i":[[5,"new","tink_streaming_aead","Return a [`tink::StreamingAead`] primitive from the given…",null,[[["handle",3]],[["result",4],["tinkerror",3],["box",3]]]],[5,"new_with_key_manager","","Return a [`tink::StreamingAead`] primitive from the given…",null,[[["arc",3],["handle",3],["option",4]],[["result",4],["tinkerror",3],["box",3]]]],[5,"aes128_gcm_hkdf_4kb_key_template","","Return a [`KeyTemplate`] that generates an AES-GCM key…",null,[[],["keytemplate",3]]],[5,"aes128_gcm_hkdf_1mb_key_template","","Return a [`KeyTemplate`] that generates an AES-GCM key…",null,[[],["keytemplate",3]]],[5,"aes256_gcm_hkdf_4kb_key_template","","Return a [`KeyTemplate`] that generates an AES-GCM key…",null,[[],["keytemplate",3]]],[5,"aes256_gcm_hkdf_1mb_key_template","","Return a [`KeyTemplate`] that generates an AES-GCM key…",null,[[],["keytemplate",3]]],[5,"aes128_ctr_hmac_sha256_segment_4kb_key_template","","Return a [`KeyTemplate`] that generates an AES-CTR-HMAC…",null,[[],["keytemplate",3]]],[5,"aes128_ctr_hmac_sha256_segment_1mb_key_template","","Return a [`KeyTemplate`] that generates an AES-CTR-HMAC…",null,[[],["keytemplate",3]]],[5,"aes256_ctr_hmac_sha256_segment_4kb_key_template","","Return a [`KeyTemplate`] that generates an AES-CTR-HMAC…",null,[[],["keytemplate",3]]],[5,"aes256_ctr_hmac_sha256_segment_1mb_key_template","","Return a [`KeyTemplate`] that generates an AES-CTR-HMAC…",null,[[],["keytemplate",3]]],[5,"init","","",null,[[]]],[0,"subtle","","Provides subtle implementations of the Streaming AEAD…",null,null],[3,"AesCtrHmac","tink_streaming_aead::subtle","`AesCtrHmac` implements streaming AEAD encryption using…",null,null],[12,"main_key","","",0,null],[3,"AesGcmHkdf","","`AesGcmHkdf` implements streaming AEAD encryption using…",null,null],[12,"main_key","","",1,null],[4,"AesVariant","","Supported AES variants.",null,null],[13,"Aes128","","",2,null],[13,"Aes256","","",2,null],[5,"validate_aes_key_size","","Check if the given key size is a valid AES key size.",null,[[],[["result",4],["tinkerror",3],["aesvariant",4]]]],[11,"new","","Initialize an AES_CTR_HMAC primitive with a key derivation…",0,[[["hashtype",4]],[["result",4],["aesctrhmac",3],["tinkerror",3]]]],[11,"header_length","","Return the length of the encryption header.",0,[[]]],[11,"new","","Initialize a streaming primitive with a key derivation key…",1,[[["hashtype",4]],[["result",4],["tinkerror",3],["aesgcmhkdf",3]]]],[11,"header_length","","Return the length of the encryption header.",1,[[]]],[0,"noncebased","","Provide a reusable streaming AEAD framework.",null,null],[3,"Writer","tink_streaming_aead::subtle::noncebased","",null,null],[3,"WriterParams","","`WriterParams` contains the options for instantiating a…",null,null],[12,"w","","",3,null],[12,"segment_encrypter","","",3,null],[12,"nonce_size","","",3,null],[12,"nonce_prefix","","",3,null],[12,"plaintext_segment_size","","",3,null],[12,"first_ciphertext_segment_offset","","",3,null],[3,"Reader","","`Reader` facilitates the decryption of ciphertexts created…",null,null],[3,"ReaderParams","","`ReaderParams` contains the options for instantiating a…",null,null],[12,"r","","",4,null],[12,"segment_decrypter","","",4,null],[12,"nonce_size","","",4,null],[12,"nonce_prefix","","",4,null],[12,"ciphertext_segment_size","","",4,null],[12,"first_ciphertext_segment_offset","","",4,null],[8,"SegmentEncrypter","","`SegmentEncrypter` facilitates implementing various…",null,null],[10,"encrypt_segment","","",5,[[],[["vec",3],["result",4],["tinkerror",3]]]],[8,"SegmentDecrypter","","`SegmentDecrypter` facilitates implementing various…",null,null],[10,"decrypt_segment","","",6,[[],[["vec",3],["result",4],["tinkerror",3]]]],[11,"new","","Create a new Writer instance.",7,[[["writerparams",3]],[["result",4],["writer",3],["tinkerror",3]]]],[11,"new","","Create a new `Reader` instance.",8,[[["readerparams",3]],[["tinkerror",3],["result",4],["reader",3]]]],[17,"AES_CTR_HMAC_NONCE_SIZE_IN_BYTES","tink_streaming_aead::subtle","The size of the nonces used as IVs for CTR.",null,null],[17,"AES_CTR_HMAC_NONCE_PREFIX_SIZE_IN_BYTES","","The size of the nonce prefix.",null,null],[17,"AES_CTR_HMAC_KEY_SIZE_IN_BYTES","","The size of the HMAC key.",null,null],[17,"AES_GCM_HKDF_NONCE_SIZE_IN_BYTES","","The size of the nonces used for GCM.",null,null],[17,"AES_GCM_HKDF_NONCE_PREFIX_SIZE_IN_BYTES","","The size of the randomly generated nonce prefix.",null,null],[17,"AES_GCM_HKDF_TAG_SIZE_IN_BYTES","","The size of the tags of each ciphertext segment.",null,null],[11,"key_size","","Return the key size in bytes for the specified AES variant.",2,[[]]],[17,"AES_CTR_HMAC_KEY_VERSION","tink_streaming_aead","",null,null],[17,"AES_CTR_HMAC_TYPE_URL","","",null,null],[17,"AES_GCM_HKDF_KEY_VERSION","","",null,null],[17,"AES_GCM_HKDF_TYPE_URL","","",null,null],[17,"UPSTREAM_VERSION","","The upstream Tink version that this Rust port is based on.",null,null],[11,"from","tink_streaming_aead::subtle","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"box_clone","","",0,[[],[["box",3],["streamingaead",8]]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"box_clone","","",1,[[],[["box",3],["streamingaead",8]]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","tink_streaming_aead::subtle::noncebased","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"drop","","",7,[[]]],[11,"clone","tink_streaming_aead::subtle","",0,[[],["aesctrhmac",3]]],[11,"clone","","",1,[[],["aesgcmhkdf",3]]],[11,"clone","","",2,[[],["aesvariant",4]]],[11,"read","tink_streaming_aead::subtle::noncebased","",8,[[],["result",6]]],[11,"write","","",7,[[],["result",6]]],[11,"flush","","Flushing an encrypting writer does nothing even when there…",7,[[],["result",6]]],[11,"new_encrypting_writer","tink_streaming_aead::subtle","Return a wrapper around an underlying [`std::io.Write`],…",0,[[["box",3],["write",8]],[["result",4],["box",3],["tinkerror",3]]]],[11,"new_decrypting_reader","","Return a wrapper around an underlying [`std::io::Read`],…",0,[[["read",8],["box",3]],[["result",4],["box",3],["tinkerror",3]]]],[11,"new_encrypting_writer","","Return a wrapper around an underlying [`std::io::Write`],…",1,[[["box",3],["write",8]],[["result",4],["box",3],["tinkerror",3]]]],[11,"new_decrypting_reader","","Return a wrapper around an underlying [`std::io::Read`],…",1,[[["read",8],["box",3]],[["result",4],["box",3],["tinkerror",3]]]],[11,"close","tink_streaming_aead::subtle::noncebased","",7,[[],[["result",4],["tinkerror",3]]]]],"p":[[3,"AesCtrHmac"],[3,"AesGcmHkdf"],[4,"AesVariant"],[3,"WriterParams"],[3,"ReaderParams"],[8,"SegmentEncrypter"],[8,"SegmentDecrypter"],[3,"Writer"],[3,"Reader"]]},\
"tink_testing_server":{"doc":"Tink testing infrastructure.","i":[[3,"Opt","tink_testing_server","Command-line options for Tink Rust testing server.",null,null],[12,"port","","",0,null],[5,"main","","Main entrypoint for Tink Rust testing server.",null,[[],[["box",3],["result",4]]]],[0,"proto","","Auto-generated code from protocol buffer message and…",null,null],[3,"ServerInfoRequest","tink_testing_server::proto","",null,null],[3,"ServerInfoResponse","","",null,null],[12,"tink_version","","For example \'1.4\'",1,null],[12,"language","","For example \'cc\', \'java\', \'go\' or \'python\'.",1,null],[3,"KeysetGenerateRequest","","",null,null],[12,"template","","serialized google.crypto.tink.KeyTemplate.",2,null],[3,"KeysetGenerateResponse","","",null,null],[12,"result","","",3,null],[3,"KeysetPublicRequest","","",null,null],[12,"private_keyset","","serialized google.crypto.tink.Keyset.",4,null],[3,"KeysetPublicResponse","","",null,null],[12,"result","","",5,null],[3,"KeysetToJsonRequest","","",null,null],[12,"keyset","","serialized google.crypto.tink.Keyset.",6,null],[3,"KeysetToJsonResponse","","",null,null],[12,"result","","",7,null],[3,"KeysetFromJsonRequest","","",null,null],[12,"json_keyset","","",8,null],[3,"KeysetFromJsonResponse","","",null,null],[12,"result","","",9,null],[3,"AeadEncryptRequest","","",null,null],[12,"keyset","","serialized google.crypto.tink.Keyset.",10,null],[12,"plaintext","","",10,null],[12,"associated_data","","",10,null],[3,"AeadEncryptResponse","","",null,null],[12,"result","","",11,null],[3,"AeadDecryptRequest","","",null,null],[12,"keyset","","serialized google.crypto.tink.Keyset.",12,null],[12,"ciphertext","","",12,null],[12,"associated_data","","",12,null],[3,"AeadDecryptResponse","","",null,null],[12,"result","","",13,null],[3,"DeterministicAeadEncryptRequest","","",null,null],[12,"keyset","","serialized google.crypto.tink.Keyset.",14,null],[12,"plaintext","","",14,null],[12,"associated_data","","",14,null],[3,"DeterministicAeadEncryptResponse","","",null,null],[12,"result","","",15,null],[3,"DeterministicAeadDecryptRequest","","",null,null],[12,"keyset","","serialized google.crypto.tink.Keyset.",16,null],[12,"ciphertext","","",16,null],[12,"associated_data","","",16,null],[3,"DeterministicAeadDecryptResponse","","",null,null],[12,"result","","",17,null],[3,"StreamingAeadEncryptRequest","","",null,null],[12,"keyset","","serialized google.crypto.tink.Keyset.",18,null],[12,"plaintext","","",18,null],[12,"associated_data","","",18,null],[3,"StreamingAeadEncryptResponse","","",null,null],[12,"result","","",19,null],[3,"StreamingAeadDecryptRequest","","",null,null],[12,"keyset","","serialized google.crypto.tink.Keyset.",20,null],[12,"ciphertext","","",20,null],[12,"associated_data","","",20,null],[3,"StreamingAeadDecryptResponse","","",null,null],[12,"result","","",21,null],[3,"ComputeMacRequest","","",null,null],[12,"keyset","","serialized google.crypto.tink.Keyset.",22,null],[12,"data","","",22,null],[3,"ComputeMacResponse","","",null,null],[12,"result","","",23,null],[3,"VerifyMacRequest","","",null,null],[12,"keyset","","serialized google.crypto.tink.Keyset.",24,null],[12,"mac_value","","",24,null],[12,"data","","",24,null],[3,"VerifyMacResponse","","",null,null],[12,"err","","",25,null],[3,"HybridEncryptRequest","","",null,null],[12,"public_keyset","","serialized google.crypto.tink.Keyset.",26,null],[12,"plaintext","","",26,null],[12,"context_info","","",26,null],[3,"HybridEncryptResponse","","",null,null],[12,"result","","",27,null],[3,"HybridDecryptRequest","","",null,null],[12,"private_keyset","","serialized google.crypto.tink.Keyset.",28,null],[12,"ciphertext","","",28,null],[12,"context_info","","",28,null],[3,"HybridDecryptResponse","","",null,null],[12,"result","","",29,null],[3,"SignatureSignRequest","","",null,null],[12,"private_keyset","","serialized google.crypto.tink.Keyset.",30,null],[12,"data","","",30,null],[3,"SignatureSignResponse","","",null,null],[12,"result","","",31,null],[3,"SignatureVerifyRequest","","",null,null],[12,"public_keyset","","serialized google.crypto.tink.Keyset.",32,null],[12,"signature","","",32,null],[12,"data","","",32,null],[3,"SignatureVerifyResponse","","",null,null],[12,"err","","",33,null],[3,"PrfSetKeyIdsRequest","","",null,null],[12,"keyset","","serialized google.crypto.tink.Keyset.",34,null],[3,"PrfSetKeyIdsResponse","","",null,null],[12,"result","","",35,null],[3,"PrfSetComputeRequest","","",null,null],[12,"keyset","","serialized google.crypto.tink.Keyset.",36,null],[12,"key_id","","",36,null],[12,"input_data","","",36,null],[12,"output_length","","",36,null],[3,"PrfSetComputeResponse","","",null,null],[12,"result","","",37,null],[0,"keyset_generate_response","","",null,null],[4,"Result","tink_testing_server::proto::keyset_generate_response","",null,null],[13,"Keyset","","serialized google.crypto.tink.Keyset.",38,null],[13,"Err","","",38,null],[11,"encode","","",38,[[]]],[11,"merge","","",38,[[["decodecontext",3],["option",4],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",38,[[]]],[0,"keyset_public_response","tink_testing_server::proto","",null,null],[4,"Result","tink_testing_server::proto::keyset_public_response","",null,null],[13,"PublicKeyset","","serialized google.crypto.tink.Keyset.",39,null],[13,"Err","","",39,null],[11,"encode","","",39,[[]]],[11,"merge","","",39,[[["option",4],["decodecontext",3],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",39,[[]]],[0,"keyset_to_json_response","tink_testing_server::proto","",null,null],[4,"Result","tink_testing_server::proto::keyset_to_json_response","",null,null],[13,"JsonKeyset","","",40,null],[13,"Err","","",40,null],[11,"encode","","",40,[[]]],[11,"merge","","",40,[[["option",4],["decodecontext",3],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",40,[[]]],[0,"keyset_from_json_response","tink_testing_server::proto","",null,null],[4,"Result","tink_testing_server::proto::keyset_from_json_response","",null,null],[13,"Keyset","","serialized google.crypto.tink.Keyset.",41,null],[13,"Err","","",41,null],[11,"encode","","",41,[[]]],[11,"merge","","",41,[[["decodecontext",3],["option",4],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",41,[[]]],[0,"aead_encrypt_response","tink_testing_server::proto","",null,null],[4,"Result","tink_testing_server::proto::aead_encrypt_response","",null,null],[13,"Ciphertext","","",42,null],[13,"Err","","",42,null],[11,"encode","","",42,[[]]],[11,"merge","","",42,[[["wiretype",4],["decodecontext",3],["option",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",42,[[]]],[0,"aead_decrypt_response","tink_testing_server::proto","",null,null],[4,"Result","tink_testing_server::proto::aead_decrypt_response","",null,null],[13,"Plaintext","","",43,null],[13,"Err","","",43,null],[11,"encode","","",43,[[]]],[11,"merge","","",43,[[["option",4],["decodecontext",3],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",43,[[]]],[0,"deterministic_aead_encrypt_response","tink_testing_server::proto","",null,null],[4,"Result","tink_testing_server::proto::deterministic_aead_encrypt_response","",null,null],[13,"Ciphertext","","",44,null],[13,"Err","","",44,null],[11,"encode","","",44,[[]]],[11,"merge","","",44,[[["option",4],["decodecontext",3],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",44,[[]]],[0,"deterministic_aead_decrypt_response","tink_testing_server::proto","",null,null],[4,"Result","tink_testing_server::proto::deterministic_aead_decrypt_response","",null,null],[13,"Plaintext","","",45,null],[13,"Err","","",45,null],[11,"encode","","",45,[[]]],[11,"merge","","",45,[[["decodecontext",3],["option",4],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",45,[[]]],[0,"streaming_aead_encrypt_response","tink_testing_server::proto","",null,null],[4,"Result","tink_testing_server::proto::streaming_aead_encrypt_response","",null,null],[13,"Ciphertext","","",46,null],[13,"Err","","",46,null],[11,"encode","","",46,[[]]],[11,"merge","","",46,[[["wiretype",4],["decodecontext",3],["option",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",46,[[]]],[0,"streaming_aead_decrypt_response","tink_testing_server::proto","",null,null],[4,"Result","tink_testing_server::proto::streaming_aead_decrypt_response","",null,null],[13,"Plaintext","","",47,null],[13,"Err","","",47,null],[11,"encode","","",47,[[]]],[11,"merge","","",47,[[["decodecontext",3],["option",4],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",47,[[]]],[0,"compute_mac_response","tink_testing_server::proto","",null,null],[4,"Result","tink_testing_server::proto::compute_mac_response","",null,null],[13,"MacValue","","",48,null],[13,"Err","","",48,null],[11,"encode","","",48,[[]]],[11,"merge","","",48,[[["decodecontext",3],["option",4],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",48,[[]]],[0,"hybrid_encrypt_response","tink_testing_server::proto","",null,null],[4,"Result","tink_testing_server::proto::hybrid_encrypt_response","",null,null],[13,"Ciphertext","","",49,null],[13,"Err","","",49,null],[11,"encode","","",49,[[]]],[11,"merge","","",49,[[["decodecontext",3],["option",4],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",49,[[]]],[0,"hybrid_decrypt_response","tink_testing_server::proto","",null,null],[4,"Result","tink_testing_server::proto::hybrid_decrypt_response","",null,null],[13,"Plaintext","","",50,null],[13,"Err","","",50,null],[11,"encode","","",50,[[]]],[11,"merge","","",50,[[["option",4],["decodecontext",3],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",50,[[]]],[0,"signature_sign_response","tink_testing_server::proto","",null,null],[4,"Result","tink_testing_server::proto::signature_sign_response","",null,null],[13,"Signature","","",51,null],[13,"Err","","",51,null],[11,"encode","","",51,[[]]],[11,"merge","","",51,[[["wiretype",4],["decodecontext",3],["option",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",51,[[]]],[0,"prf_set_key_ids_response","tink_testing_server::proto","",null,null],[3,"Output","tink_testing_server::proto::prf_set_key_ids_response","",null,null],[12,"primary_key_id","","",52,null],[12,"key_id","","",52,null],[4,"Result","","",null,null],[13,"Output","","",53,null],[13,"Err","","",53,null],[11,"encode","","",53,[[]]],[11,"merge","","",53,[[["option",4],["decodecontext",3],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",53,[[]]],[0,"prf_set_compute_response","tink_testing_server::proto","",null,null],[4,"Result","tink_testing_server::proto::prf_set_compute_response","",null,null],[13,"Output","","",54,null],[13,"Err","","",54,null],[11,"encode","","",54,[[]]],[11,"merge","","",54,[[["option",4],["decodecontext",3],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",54,[[]]],[0,"metadata_client","tink_testing_server::proto","Generated client implementations.",null,null],[3,"MetadataClient","tink_testing_server::proto::metadata_client","Service providing metadata about the server.",null,null],[12,"inner","","",55,null],[11,"connect","","Attempt to create a new client by connecting to a given…",55,[[]]],[11,"new","","",55,[[]]],[11,"with_interceptor","","",55,[[]]],[11,"get_server_info","","Returns some server information. A test may use this…",55,[[]]],[0,"keyset_client","tink_testing_server::proto","Generated client implementations.",null,null],[3,"KeysetClient","tink_testing_server::proto::keyset_client","Service for Keyset operations.",null,null],[12,"inner","","",56,null],[11,"connect","","Attempt to create a new client by connecting to a given…",56,[[]]],[11,"new","","",56,[[]]],[11,"with_interceptor","","",56,[[]]],[11,"generate","","Generates a new keyset from a template.",56,[[]]],[11,"public","","Generates a public-key keyset from a private-key keyset.",56,[[]]],[11,"to_json","","Converts a Keyset from Binary to Json Format",56,[[]]],[11,"from_json","","Converts a Keyset from Json to Binary Format",56,[[]]],[0,"aead_client","tink_testing_server::proto","Generated client implementations.",null,null],[3,"AeadClient","tink_testing_server::proto::aead_client","Service for AEAD encryption and decryption",null,null],[12,"inner","","",57,null],[11,"connect","","Attempt to create a new client by connecting to a given…",57,[[]]],[11,"new","","",57,[[]]],[11,"with_interceptor","","",57,[[]]],[11,"encrypt","","Encrypts a plaintext with the provided keyset",57,[[]]],[11,"decrypt","","Decrypts a ciphertext with the provided keyset",57,[[]]],[0,"deterministic_aead_client","tink_testing_server::proto","Generated client implementations.",null,null],[3,"DeterministicAeadClient","tink_testing_server::proto::deterministic_aead_client","Service for Deterministic AEAD encryption and decryption",null,null],[12,"inner","","",58,null],[11,"connect","","Attempt to create a new client by connecting to a given…",58,[[]]],[11,"new","","",58,[[]]],[11,"with_interceptor","","",58,[[]]],[11,"encrypt_deterministically","","Encrypts a plaintext with the provided keyset",58,[[]]],[11,"decrypt_deterministically","","Decrypts a ciphertext with the provided keyset",58,[[]]],[0,"streaming_aead_client","tink_testing_server::proto","Generated client implementations.",null,null],[3,"StreamingAeadClient","tink_testing_server::proto::streaming_aead_client","Service for Streaming AEAD encryption and decryption",null,null],[12,"inner","","",59,null],[11,"connect","","Attempt to create a new client by connecting to a given…",59,[[]]],[11,"new","","",59,[[]]],[11,"with_interceptor","","",59,[[]]],[11,"encrypt","","Encrypts a plaintext with the provided keyset",59,[[]]],[11,"decrypt","","Decrypts a ciphertext with the provided keyset",59,[[]]],[0,"mac_client","tink_testing_server::proto","Generated client implementations.",null,null],[3,"MacClient","tink_testing_server::proto::mac_client","Service to compute and verify MACs",null,null],[12,"inner","","",60,null],[11,"connect","","Attempt to create a new client by connecting to a given…",60,[[]]],[11,"new","","",60,[[]]],[11,"with_interceptor","","",60,[[]]],[11,"compute_mac","","Computes a MAC for given data",60,[[]]],[11,"verify_mac","","Verifies the validity of the MAC value, no error means…",60,[[]]],[0,"hybrid_client","tink_testing_server::proto","Generated client implementations.",null,null],[3,"HybridClient","tink_testing_server::proto::hybrid_client","Service to hybrid encrypt and decrypt",null,null],[12,"inner","","",61,null],[11,"connect","","Attempt to create a new client by connecting to a given…",61,[[]]],[11,"new","","",61,[[]]],[11,"with_interceptor","","",61,[[]]],[11,"encrypt","","Encrypts plaintext binding context_info to the resulting…",61,[[]]],[11,"decrypt","","Decrypts ciphertext verifying the integrity of context_info",61,[[]]],[0,"signature_client","tink_testing_server::proto","Generated client implementations.",null,null],[3,"SignatureClient","tink_testing_server::proto::signature_client","Service to sign and verify signatures.",null,null],[12,"inner","","",62,null],[11,"connect","","Attempt to create a new client by connecting to a given…",62,[[]]],[11,"new","","",62,[[]]],[11,"with_interceptor","","",62,[[]]],[11,"sign","","Computes the signature for data",62,[[]]],[11,"verify","","Verifies that signature is a digital signature for data",62,[[]]],[0,"prf_set_client","tink_testing_server::proto","Generated client implementations.",null,null],[3,"PrfSetClient","tink_testing_server::proto::prf_set_client","Service for PrfSet computation",null,null],[12,"inner","","",63,null],[11,"connect","","Attempt to create a new client by connecting to a given…",63,[[]]],[11,"new","","",63,[[]]],[11,"with_interceptor","","",63,[[]]],[11,"key_ids","","Returns the key ids and the primary key id in the keyset.",63,[[]]],[11,"compute","","Computes the output of the PRF with the given key_id in…",63,[[]]],[0,"metadata_server","tink_testing_server::proto","Generated server implementations.",null,null],[3,"MetadataServer","tink_testing_server::proto::metadata_server","Service providing metadata about the server.",null,null],[12,"inner","","",64,null],[3,"_Inner","","",null,null],[12,"0","","",65,null],[12,"1","","",65,null],[8,"Metadata","","Generated trait containing gRPC methods that should be…",null,null],[10,"get_server_info","","Returns some server information. A test may use this…",66,[[["request",3],["serverinforequest",3]],[["box",3],["pin",3]]]],[11,"new","","",64,[[]]],[11,"with_interceptor","","",64,[[]]],[0,"keyset_server","tink_testing_server::proto","Generated server implementations.",null,null],[3,"KeysetServer","tink_testing_server::proto::keyset_server","Service for Keyset operations.",null,null],[12,"inner","","",67,null],[3,"_Inner","","",null,null],[12,"0","","",68,null],[12,"1","","",68,null],[8,"Keyset","","Generated trait containing gRPC methods that should be…",null,null],[10,"generate","","Generates a new keyset from a template.",69,[[["request",3],["keysetgeneraterequest",3]],[["box",3],["pin",3]]]],[10,"public","","Generates a public-key keyset from a private-key keyset.",69,[[["request",3],["keysetpublicrequest",3]],[["pin",3],["box",3]]]],[10,"to_json","","Converts a Keyset from Binary to Json Format",69,[[["request",3],["keysettojsonrequest",3]],[["pin",3],["box",3]]]],[10,"from_json","","Converts a Keyset from Json to Binary Format",69,[[["request",3],["keysetfromjsonrequest",3]],[["pin",3],["box",3]]]],[11,"new","","",67,[[]]],[11,"with_interceptor","","",67,[[]]],[0,"aead_server","tink_testing_server::proto","Generated server implementations.",null,null],[3,"AeadServer","tink_testing_server::proto::aead_server","Service for AEAD encryption and decryption",null,null],[12,"inner","","",70,null],[3,"_Inner","","",null,null],[12,"0","","",71,null],[12,"1","","",71,null],[8,"Aead","","Generated trait containing gRPC methods that should be…",null,null],[10,"encrypt","","Encrypts a plaintext with the provided keyset",72,[[["aeadencryptrequest",3],["request",3]],[["pin",3],["box",3]]]],[10,"decrypt","","Decrypts a ciphertext with the provided keyset",72,[[["request",3],["aeaddecryptrequest",3]],[["pin",3],["box",3]]]],[11,"new","","",70,[[]]],[11,"with_interceptor","","",70,[[]]],[0,"deterministic_aead_server","tink_testing_server::proto","Generated server implementations.",null,null],[3,"DeterministicAeadServer","tink_testing_server::proto::deterministic_aead_server","Service for Deterministic AEAD encryption and decryption",null,null],[12,"inner","","",73,null],[3,"_Inner","","",null,null],[12,"0","","",74,null],[12,"1","","",74,null],[8,"DeterministicAead","","Generated trait containing gRPC methods that should be…",null,null],[10,"encrypt_deterministically","","Encrypts a plaintext with the provided keyset",75,[[["deterministicaeadencryptrequest",3],["request",3]],[["box",3],["pin",3]]]],[10,"decrypt_deterministically","","Decrypts a ciphertext with the provided keyset",75,[[["deterministicaeaddecryptrequest",3],["request",3]],[["box",3],["pin",3]]]],[11,"new","","",73,[[]]],[11,"with_interceptor","","",73,[[]]],[0,"streaming_aead_server","tink_testing_server::proto","Generated server implementations.",null,null],[3,"StreamingAeadServer","tink_testing_server::proto::streaming_aead_server","Service for Streaming AEAD encryption and decryption",null,null],[12,"inner","","",76,null],[3,"_Inner","","",null,null],[12,"0","","",77,null],[12,"1","","",77,null],[8,"StreamingAead","","Generated trait containing gRPC methods that should be…",null,null],[10,"encrypt","","Encrypts a plaintext with the provided keyset",78,[[["streamingaeadencryptrequest",3],["request",3]],[["pin",3],["box",3]]]],[10,"decrypt","","Decrypts a ciphertext with the provided keyset",78,[[["streamingaeaddecryptrequest",3],["request",3]],[["pin",3],["box",3]]]],[11,"new","","",76,[[]]],[11,"with_interceptor","","",76,[[]]],[0,"mac_server","tink_testing_server::proto","Generated server implementations.",null,null],[3,"MacServer","tink_testing_server::proto::mac_server","Service to compute and verify MACs",null,null],[12,"inner","","",79,null],[3,"_Inner","","",null,null],[12,"0","","",80,null],[12,"1","","",80,null],[8,"Mac","","Generated trait containing gRPC methods that should be…",null,null],[10,"compute_mac","","Computes a MAC for given data",81,[[["request",3],["computemacrequest",3]],[["box",3],["pin",3]]]],[10,"verify_mac","","Verifies the validity of the MAC value, no error means…",81,[[["verifymacrequest",3],["request",3]],[["box",3],["pin",3]]]],[11,"new","","",79,[[]]],[11,"with_interceptor","","",79,[[]]],[0,"hybrid_server","tink_testing_server::proto","Generated server implementations.",null,null],[3,"HybridServer","tink_testing_server::proto::hybrid_server","Service to hybrid encrypt and decrypt",null,null],[12,"inner","","",82,null],[3,"_Inner","","",null,null],[12,"0","","",83,null],[12,"1","","",83,null],[8,"Hybrid","","Generated trait containing gRPC methods that should be…",null,null],[10,"encrypt","","Encrypts plaintext binding context_info to the resulting…",84,[[["hybridencryptrequest",3],["request",3]],[["pin",3],["box",3]]]],[10,"decrypt","","Decrypts ciphertext verifying the integrity of context_info",84,[[["request",3],["hybriddecryptrequest",3]],[["box",3],["pin",3]]]],[11,"new","","",82,[[]]],[11,"with_interceptor","","",82,[[]]],[0,"signature_server","tink_testing_server::proto","Generated server implementations.",null,null],[3,"SignatureServer","tink_testing_server::proto::signature_server","Service to sign and verify signatures.",null,null],[12,"inner","","",85,null],[3,"_Inner","","",null,null],[12,"0","","",86,null],[12,"1","","",86,null],[8,"Signature","","Generated trait containing gRPC methods that should be…",null,null],[10,"sign","","Computes the signature for data",87,[[["request",3],["signaturesignrequest",3]],[["box",3],["pin",3]]]],[10,"verify","","Verifies that signature is a digital signature for data",87,[[["signatureverifyrequest",3],["request",3]],[["pin",3],["box",3]]]],[11,"new","","",85,[[]]],[11,"with_interceptor","","",85,[[]]],[0,"prf_set_server","tink_testing_server::proto","Generated server implementations.",null,null],[3,"PrfSetServer","tink_testing_server::proto::prf_set_server","Service for PrfSet computation",null,null],[12,"inner","","",88,null],[3,"_Inner","","",null,null],[12,"0","","",89,null],[12,"1","","",89,null],[8,"PrfSet","","Generated trait containing gRPC methods that should be…",null,null],[10,"key_ids","","Returns the key ids and the primary key id in the keyset.",90,[[["request",3],["prfsetkeyidsrequest",3]],[["box",3],["pin",3]]]],[10,"compute","","Computes the output of the PRF with the given key_id in…",90,[[["request",3],["prfsetcomputerequest",3]],[["pin",3],["box",3]]]],[11,"new","","",88,[[]]],[11,"with_interceptor","","",88,[[]]],[0,"aead_service","tink_testing_server","Testing server for AEAD.",null,null],[3,"AeadServerImpl","tink_testing_server::aead_service","",null,null],[0,"daead_service","tink_testing_server","Testing server for DAEAD.",null,null],[3,"DaeadServerImpl","tink_testing_server::daead_service","",null,null],[0,"keyset_service","tink_testing_server","Testing server for keyset manipulation.",null,null],[3,"KeysetServerImpl","tink_testing_server::keyset_service","",null,null],[0,"mac_service","tink_testing_server","Testing server for MAC.",null,null],[3,"MacServerImpl","tink_testing_server::mac_service","",null,null],[0,"metadata_service","tink_testing_server","Testing server for metadata.",null,null],[3,"MetadataServerImpl","tink_testing_server::metadata_service","",null,null],[0,"prf_set_service","tink_testing_server","Testing server for PRF.",null,null],[3,"PrfSetServerImpl","tink_testing_server::prf_set_service","",null,null],[0,"signature_service","tink_testing_server","Testing server for signatures.",null,null],[3,"SignatureServerImpl","tink_testing_server::signature_service","",null,null],[0,"streaming_service","tink_testing_server","Testing server for streaming AEAD.",null,null],[3,"StreamingAeadServerImpl","tink_testing_server::streaming_service","",null,null],[11,"from","tink_testing_server","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"into_request","","",0,[[],["request",3]]],[11,"vzip","","",0,[[]]],[11,"from","tink_testing_server::proto","",91,[[]]],[11,"into","","",91,[[]]],[11,"to_owned","","",91,[[]]],[11,"clone_into","","",91,[[]]],[11,"borrow","","",91,[[]]],[11,"borrow_mut","","",91,[[]]],[11,"try_from","","",91,[[],["result",4]]],[11,"try_into","","",91,[[],["result",4]]],[11,"type_id","","",91,[[],["typeid",3]]],[11,"into_request","","",91,[[],["request",3]]],[11,"vzip","","",91,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"into_request","","",1,[[],["request",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"into_request","","",2,[[],["request",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"into_request","","",3,[[],["request",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"into_request","","",4,[[],["request",3]]],[11,"vzip","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"into_request","","",5,[[],["request",3]]],[11,"vzip","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"into_request","","",6,[[],["request",3]]],[11,"vzip","","",6,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"into_request","","",7,[[],["request",3]]],[11,"vzip","","",7,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"into_request","","",8,[[],["request",3]]],[11,"vzip","","",8,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"into_request","","",9,[[],["request",3]]],[11,"vzip","","",9,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"into_request","","",10,[[],["request",3]]],[11,"vzip","","",10,[[]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"into_request","","",11,[[],["request",3]]],[11,"vzip","","",11,[[]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"into_request","","",12,[[],["request",3]]],[11,"vzip","","",12,[[]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"into_request","","",13,[[],["request",3]]],[11,"vzip","","",13,[[]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"into_request","","",14,[[],["request",3]]],[11,"vzip","","",14,[[]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"into_request","","",15,[[],["request",3]]],[11,"vzip","","",15,[[]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"into_request","","",16,[[],["request",3]]],[11,"vzip","","",16,[[]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"into_request","","",17,[[],["request",3]]],[11,"vzip","","",17,[[]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"into_request","","",18,[[],["request",3]]],[11,"vzip","","",18,[[]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"into_request","","",19,[[],["request",3]]],[11,"vzip","","",19,[[]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"into_request","","",20,[[],["request",3]]],[11,"vzip","","",20,[[]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"into_request","","",21,[[],["request",3]]],[11,"vzip","","",21,[[]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"into_request","","",22,[[],["request",3]]],[11,"vzip","","",22,[[]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"into_request","","",23,[[],["request",3]]],[11,"vzip","","",23,[[]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"into_request","","",24,[[],["request",3]]],[11,"vzip","","",24,[[]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"into_request","","",25,[[],["request",3]]],[11,"vzip","","",25,[[]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"into_request","","",26,[[],["request",3]]],[11,"vzip","","",26,[[]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"into_request","","",27,[[],["request",3]]],[11,"vzip","","",27,[[]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"into_request","","",28,[[],["request",3]]],[11,"vzip","","",28,[[]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"into_request","","",29,[[],["request",3]]],[11,"vzip","","",29,[[]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"into_request","","",30,[[],["request",3]]],[11,"vzip","","",30,[[]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"into_request","","",31,[[],["request",3]]],[11,"vzip","","",31,[[]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"into_request","","",32,[[],["request",3]]],[11,"vzip","","",32,[[]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"into_request","","",33,[[],["request",3]]],[11,"vzip","","",33,[[]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"to_owned","","",34,[[]]],[11,"clone_into","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"into_request","","",34,[[],["request",3]]],[11,"vzip","","",34,[[]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"to_owned","","",35,[[]]],[11,"clone_into","","",35,[[]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"into_request","","",35,[[],["request",3]]],[11,"vzip","","",35,[[]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"to_owned","","",36,[[]]],[11,"clone_into","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"into_request","","",36,[[],["request",3]]],[11,"vzip","","",36,[[]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"to_owned","","",37,[[]]],[11,"clone_into","","",37,[[]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"into_request","","",37,[[],["request",3]]],[11,"vzip","","",37,[[]]],[11,"from","tink_testing_server::proto::keyset_generate_response","",38,[[]]],[11,"into","","",38,[[]]],[11,"to_owned","","",38,[[]]],[11,"clone_into","","",38,[[]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"into_request","","",38,[[],["request",3]]],[11,"vzip","","",38,[[]]],[11,"from","tink_testing_server::proto::keyset_public_response","",39,[[]]],[11,"into","","",39,[[]]],[11,"to_owned","","",39,[[]]],[11,"clone_into","","",39,[[]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"into_request","","",39,[[],["request",3]]],[11,"vzip","","",39,[[]]],[11,"from","tink_testing_server::proto::keyset_to_json_response","",40,[[]]],[11,"into","","",40,[[]]],[11,"to_owned","","",40,[[]]],[11,"clone_into","","",40,[[]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"into_request","","",40,[[],["request",3]]],[11,"vzip","","",40,[[]]],[11,"from","tink_testing_server::proto::keyset_from_json_response","",41,[[]]],[11,"into","","",41,[[]]],[11,"to_owned","","",41,[[]]],[11,"clone_into","","",41,[[]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"into_request","","",41,[[],["request",3]]],[11,"vzip","","",41,[[]]],[11,"from","tink_testing_server::proto::aead_encrypt_response","",42,[[]]],[11,"into","","",42,[[]]],[11,"to_owned","","",42,[[]]],[11,"clone_into","","",42,[[]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"into_request","","",42,[[],["request",3]]],[11,"vzip","","",42,[[]]],[11,"from","tink_testing_server::proto::aead_decrypt_response","",43,[[]]],[11,"into","","",43,[[]]],[11,"to_owned","","",43,[[]]],[11,"clone_into","","",43,[[]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"into_request","","",43,[[],["request",3]]],[11,"vzip","","",43,[[]]],[11,"from","tink_testing_server::proto::deterministic_aead_encrypt_response","",44,[[]]],[11,"into","","",44,[[]]],[11,"to_owned","","",44,[[]]],[11,"clone_into","","",44,[[]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"into_request","","",44,[[],["request",3]]],[11,"vzip","","",44,[[]]],[11,"from","tink_testing_server::proto::deterministic_aead_decrypt_response","",45,[[]]],[11,"into","","",45,[[]]],[11,"to_owned","","",45,[[]]],[11,"clone_into","","",45,[[]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"into_request","","",45,[[],["request",3]]],[11,"vzip","","",45,[[]]],[11,"from","tink_testing_server::proto::streaming_aead_encrypt_response","",46,[[]]],[11,"into","","",46,[[]]],[11,"to_owned","","",46,[[]]],[11,"clone_into","","",46,[[]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"into_request","","",46,[[],["request",3]]],[11,"vzip","","",46,[[]]],[11,"from","tink_testing_server::proto::streaming_aead_decrypt_response","",47,[[]]],[11,"into","","",47,[[]]],[11,"to_owned","","",47,[[]]],[11,"clone_into","","",47,[[]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"into_request","","",47,[[],["request",3]]],[11,"vzip","","",47,[[]]],[11,"from","tink_testing_server::proto::compute_mac_response","",48,[[]]],[11,"into","","",48,[[]]],[11,"to_owned","","",48,[[]]],[11,"clone_into","","",48,[[]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"into_request","","",48,[[],["request",3]]],[11,"vzip","","",48,[[]]],[11,"from","tink_testing_server::proto::hybrid_encrypt_response","",49,[[]]],[11,"into","","",49,[[]]],[11,"to_owned","","",49,[[]]],[11,"clone_into","","",49,[[]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"into_request","","",49,[[],["request",3]]],[11,"vzip","","",49,[[]]],[11,"from","tink_testing_server::proto::hybrid_decrypt_response","",50,[[]]],[11,"into","","",50,[[]]],[11,"to_owned","","",50,[[]]],[11,"clone_into","","",50,[[]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"into_request","","",50,[[],["request",3]]],[11,"vzip","","",50,[[]]],[11,"from","tink_testing_server::proto::signature_sign_response","",51,[[]]],[11,"into","","",51,[[]]],[11,"to_owned","","",51,[[]]],[11,"clone_into","","",51,[[]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"into_request","","",51,[[],["request",3]]],[11,"vzip","","",51,[[]]],[11,"from","tink_testing_server::proto::prf_set_key_ids_response","",52,[[]]],[11,"into","","",52,[[]]],[11,"to_owned","","",52,[[]]],[11,"clone_into","","",52,[[]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"try_into","","",52,[[],["result",4]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"into_request","","",52,[[],["request",3]]],[11,"vzip","","",52,[[]]],[11,"from","","",53,[[]]],[11,"into","","",53,[[]]],[11,"to_owned","","",53,[[]]],[11,"clone_into","","",53,[[]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"into_request","","",53,[[],["request",3]]],[11,"vzip","","",53,[[]]],[11,"from","tink_testing_server::proto::prf_set_compute_response","",54,[[]]],[11,"into","","",54,[[]]],[11,"to_owned","","",54,[[]]],[11,"clone_into","","",54,[[]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"try_into","","",54,[[],["result",4]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"into_request","","",54,[[],["request",3]]],[11,"vzip","","",54,[[]]],[11,"from","tink_testing_server::proto::metadata_client","",55,[[]]],[11,"into","","",55,[[]]],[11,"to_owned","","",55,[[]]],[11,"clone_into","","",55,[[]]],[11,"borrow","","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"try_into","","",55,[[],["result",4]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"into_request","","",55,[[],["request",3]]],[11,"vzip","","",55,[[]]],[11,"from","tink_testing_server::proto::keyset_client","",56,[[]]],[11,"into","","",56,[[]]],[11,"to_owned","","",56,[[]]],[11,"clone_into","","",56,[[]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"try_into","","",56,[[],["result",4]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"into_request","","",56,[[],["request",3]]],[11,"vzip","","",56,[[]]],[11,"from","tink_testing_server::proto::aead_client","",57,[[]]],[11,"into","","",57,[[]]],[11,"to_owned","","",57,[[]]],[11,"clone_into","","",57,[[]]],[11,"borrow","","",57,[[]]],[11,"borrow_mut","","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"try_into","","",57,[[],["result",4]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"into_request","","",57,[[],["request",3]]],[11,"vzip","","",57,[[]]],[11,"from","tink_testing_server::proto::deterministic_aead_client","",58,[[]]],[11,"into","","",58,[[]]],[11,"to_owned","","",58,[[]]],[11,"clone_into","","",58,[[]]],[11,"borrow","","",58,[[]]],[11,"borrow_mut","","",58,[[]]],[11,"try_from","","",58,[[],["result",4]]],[11,"try_into","","",58,[[],["result",4]]],[11,"type_id","","",58,[[],["typeid",3]]],[11,"into_request","","",58,[[],["request",3]]],[11,"vzip","","",58,[[]]],[11,"from","tink_testing_server::proto::streaming_aead_client","",59,[[]]],[11,"into","","",59,[[]]],[11,"to_owned","","",59,[[]]],[11,"clone_into","","",59,[[]]],[11,"borrow","","",59,[[]]],[11,"borrow_mut","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"try_into","","",59,[[],["result",4]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"into_request","","",59,[[],["request",3]]],[11,"vzip","","",59,[[]]],[11,"from","tink_testing_server::proto::mac_client","",60,[[]]],[11,"into","","",60,[[]]],[11,"to_owned","","",60,[[]]],[11,"clone_into","","",60,[[]]],[11,"borrow","","",60,[[]]],[11,"borrow_mut","","",60,[[]]],[11,"try_from","","",60,[[],["result",4]]],[11,"try_into","","",60,[[],["result",4]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"into_request","","",60,[[],["request",3]]],[11,"vzip","","",60,[[]]],[11,"from","tink_testing_server::proto::hybrid_client","",61,[[]]],[11,"into","","",61,[[]]],[11,"to_owned","","",61,[[]]],[11,"clone_into","","",61,[[]]],[11,"borrow","","",61,[[]]],[11,"borrow_mut","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"try_into","","",61,[[],["result",4]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"into_request","","",61,[[],["request",3]]],[11,"vzip","","",61,[[]]],[11,"from","tink_testing_server::proto::signature_client","",62,[[]]],[11,"into","","",62,[[]]],[11,"to_owned","","",62,[[]]],[11,"clone_into","","",62,[[]]],[11,"borrow","","",62,[[]]],[11,"borrow_mut","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"try_into","","",62,[[],["result",4]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"into_request","","",62,[[],["request",3]]],[11,"vzip","","",62,[[]]],[11,"from","tink_testing_server::proto::prf_set_client","",63,[[]]],[11,"into","","",63,[[]]],[11,"to_owned","","",63,[[]]],[11,"clone_into","","",63,[[]]],[11,"borrow","","",63,[[]]],[11,"borrow_mut","","",63,[[]]],[11,"try_from","","",63,[[],["result",4]]],[11,"try_into","","",63,[[],["result",4]]],[11,"type_id","","",63,[[],["typeid",3]]],[11,"into_request","","",63,[[],["request",3]]],[11,"vzip","","",63,[[]]],[11,"from","tink_testing_server::proto::metadata_server","",64,[[]]],[11,"into","","",64,[[]]],[11,"to_owned","","",64,[[]]],[11,"clone_into","","",64,[[]]],[11,"borrow","","",64,[[]]],[11,"borrow_mut","","",64,[[]]],[11,"try_from","","",64,[[],["result",4]]],[11,"try_into","","",64,[[],["result",4]]],[11,"type_id","","",64,[[],["typeid",3]]],[11,"poll_ready","","",64,[[["context",3]],[["result",4],["poll",4]]]],[11,"call","","",64,[[["request",3]]]],[11,"into_request","","",64,[[],["request",3]]],[11,"vzip","","",64,[[]]],[11,"from","","",65,[[]]],[11,"into","","",65,[[]]],[11,"to_owned","","",65,[[]]],[11,"clone_into","","",65,[[]]],[11,"borrow","","",65,[[]]],[11,"borrow_mut","","",65,[[]]],[11,"try_from","","",65,[[],["result",4]]],[11,"try_into","","",65,[[],["result",4]]],[11,"type_id","","",65,[[],["typeid",3]]],[11,"into_request","","",65,[[],["request",3]]],[11,"vzip","","",65,[[]]],[11,"from","tink_testing_server::proto::keyset_server","",67,[[]]],[11,"into","","",67,[[]]],[11,"to_owned","","",67,[[]]],[11,"clone_into","","",67,[[]]],[11,"borrow","","",67,[[]]],[11,"borrow_mut","","",67,[[]]],[11,"try_from","","",67,[[],["result",4]]],[11,"try_into","","",67,[[],["result",4]]],[11,"type_id","","",67,[[],["typeid",3]]],[11,"poll_ready","","",67,[[["context",3]],[["result",4],["poll",4]]]],[11,"call","","",67,[[["request",3]]]],[11,"into_request","","",67,[[],["request",3]]],[11,"vzip","","",67,[[]]],[11,"from","","",68,[[]]],[11,"into","","",68,[[]]],[11,"to_owned","","",68,[[]]],[11,"clone_into","","",68,[[]]],[11,"borrow","","",68,[[]]],[11,"borrow_mut","","",68,[[]]],[11,"try_from","","",68,[[],["result",4]]],[11,"try_into","","",68,[[],["result",4]]],[11,"type_id","","",68,[[],["typeid",3]]],[11,"into_request","","",68,[[],["request",3]]],[11,"vzip","","",68,[[]]],[11,"from","tink_testing_server::proto::aead_server","",70,[[]]],[11,"into","","",70,[[]]],[11,"to_owned","","",70,[[]]],[11,"clone_into","","",70,[[]]],[11,"borrow","","",70,[[]]],[11,"borrow_mut","","",70,[[]]],[11,"try_from","","",70,[[],["result",4]]],[11,"try_into","","",70,[[],["result",4]]],[11,"type_id","","",70,[[],["typeid",3]]],[11,"poll_ready","","",70,[[["context",3]],[["result",4],["poll",4]]]],[11,"call","","",70,[[["request",3]]]],[11,"into_request","","",70,[[],["request",3]]],[11,"vzip","","",70,[[]]],[11,"from","","",71,[[]]],[11,"into","","",71,[[]]],[11,"to_owned","","",71,[[]]],[11,"clone_into","","",71,[[]]],[11,"borrow","","",71,[[]]],[11,"borrow_mut","","",71,[[]]],[11,"try_from","","",71,[[],["result",4]]],[11,"try_into","","",71,[[],["result",4]]],[11,"type_id","","",71,[[],["typeid",3]]],[11,"into_request","","",71,[[],["request",3]]],[11,"vzip","","",71,[[]]],[11,"from","tink_testing_server::proto::deterministic_aead_server","",73,[[]]],[11,"into","","",73,[[]]],[11,"to_owned","","",73,[[]]],[11,"clone_into","","",73,[[]]],[11,"borrow","","",73,[[]]],[11,"borrow_mut","","",73,[[]]],[11,"try_from","","",73,[[],["result",4]]],[11,"try_into","","",73,[[],["result",4]]],[11,"type_id","","",73,[[],["typeid",3]]],[11,"poll_ready","","",73,[[["context",3]],[["result",4],["poll",4]]]],[11,"call","","",73,[[["request",3]]]],[11,"into_request","","",73,[[],["request",3]]],[11,"vzip","","",73,[[]]],[11,"from","","",74,[[]]],[11,"into","","",74,[[]]],[11,"to_owned","","",74,[[]]],[11,"clone_into","","",74,[[]]],[11,"borrow","","",74,[[]]],[11,"borrow_mut","","",74,[[]]],[11,"try_from","","",74,[[],["result",4]]],[11,"try_into","","",74,[[],["result",4]]],[11,"type_id","","",74,[[],["typeid",3]]],[11,"into_request","","",74,[[],["request",3]]],[11,"vzip","","",74,[[]]],[11,"from","tink_testing_server::proto::streaming_aead_server","",76,[[]]],[11,"into","","",76,[[]]],[11,"to_owned","","",76,[[]]],[11,"clone_into","","",76,[[]]],[11,"borrow","","",76,[[]]],[11,"borrow_mut","","",76,[[]]],[11,"try_from","","",76,[[],["result",4]]],[11,"try_into","","",76,[[],["result",4]]],[11,"type_id","","",76,[[],["typeid",3]]],[11,"poll_ready","","",76,[[["context",3]],[["result",4],["poll",4]]]],[11,"call","","",76,[[["request",3]]]],[11,"into_request","","",76,[[],["request",3]]],[11,"vzip","","",76,[[]]],[11,"from","","",77,[[]]],[11,"into","","",77,[[]]],[11,"to_owned","","",77,[[]]],[11,"clone_into","","",77,[[]]],[11,"borrow","","",77,[[]]],[11,"borrow_mut","","",77,[[]]],[11,"try_from","","",77,[[],["result",4]]],[11,"try_into","","",77,[[],["result",4]]],[11,"type_id","","",77,[[],["typeid",3]]],[11,"into_request","","",77,[[],["request",3]]],[11,"vzip","","",77,[[]]],[11,"from","tink_testing_server::proto::mac_server","",79,[[]]],[11,"into","","",79,[[]]],[11,"to_owned","","",79,[[]]],[11,"clone_into","","",79,[[]]],[11,"borrow","","",79,[[]]],[11,"borrow_mut","","",79,[[]]],[11,"try_from","","",79,[[],["result",4]]],[11,"try_into","","",79,[[],["result",4]]],[11,"type_id","","",79,[[],["typeid",3]]],[11,"poll_ready","","",79,[[["context",3]],[["result",4],["poll",4]]]],[11,"call","","",79,[[["request",3]]]],[11,"into_request","","",79,[[],["request",3]]],[11,"vzip","","",79,[[]]],[11,"from","","",80,[[]]],[11,"into","","",80,[[]]],[11,"to_owned","","",80,[[]]],[11,"clone_into","","",80,[[]]],[11,"borrow","","",80,[[]]],[11,"borrow_mut","","",80,[[]]],[11,"try_from","","",80,[[],["result",4]]],[11,"try_into","","",80,[[],["result",4]]],[11,"type_id","","",80,[[],["typeid",3]]],[11,"into_request","","",80,[[],["request",3]]],[11,"vzip","","",80,[[]]],[11,"from","tink_testing_server::proto::hybrid_server","",82,[[]]],[11,"into","","",82,[[]]],[11,"to_owned","","",82,[[]]],[11,"clone_into","","",82,[[]]],[11,"borrow","","",82,[[]]],[11,"borrow_mut","","",82,[[]]],[11,"try_from","","",82,[[],["result",4]]],[11,"try_into","","",82,[[],["result",4]]],[11,"type_id","","",82,[[],["typeid",3]]],[11,"poll_ready","","",82,[[["context",3]],[["result",4],["poll",4]]]],[11,"call","","",82,[[["request",3]]]],[11,"into_request","","",82,[[],["request",3]]],[11,"vzip","","",82,[[]]],[11,"from","","",83,[[]]],[11,"into","","",83,[[]]],[11,"to_owned","","",83,[[]]],[11,"clone_into","","",83,[[]]],[11,"borrow","","",83,[[]]],[11,"borrow_mut","","",83,[[]]],[11,"try_from","","",83,[[],["result",4]]],[11,"try_into","","",83,[[],["result",4]]],[11,"type_id","","",83,[[],["typeid",3]]],[11,"into_request","","",83,[[],["request",3]]],[11,"vzip","","",83,[[]]],[11,"from","tink_testing_server::proto::signature_server","",85,[[]]],[11,"into","","",85,[[]]],[11,"to_owned","","",85,[[]]],[11,"clone_into","","",85,[[]]],[11,"borrow","","",85,[[]]],[11,"borrow_mut","","",85,[[]]],[11,"try_from","","",85,[[],["result",4]]],[11,"try_into","","",85,[[],["result",4]]],[11,"type_id","","",85,[[],["typeid",3]]],[11,"poll_ready","","",85,[[["context",3]],[["result",4],["poll",4]]]],[11,"call","","",85,[[["request",3]]]],[11,"into_request","","",85,[[],["request",3]]],[11,"vzip","","",85,[[]]],[11,"from","","",86,[[]]],[11,"into","","",86,[[]]],[11,"to_owned","","",86,[[]]],[11,"clone_into","","",86,[[]]],[11,"borrow","","",86,[[]]],[11,"borrow_mut","","",86,[[]]],[11,"try_from","","",86,[[],["result",4]]],[11,"try_into","","",86,[[],["result",4]]],[11,"type_id","","",86,[[],["typeid",3]]],[11,"into_request","","",86,[[],["request",3]]],[11,"vzip","","",86,[[]]],[11,"from","tink_testing_server::proto::prf_set_server","",88,[[]]],[11,"into","","",88,[[]]],[11,"to_owned","","",88,[[]]],[11,"clone_into","","",88,[[]]],[11,"borrow","","",88,[[]]],[11,"borrow_mut","","",88,[[]]],[11,"try_from","","",88,[[],["result",4]]],[11,"try_into","","",88,[[],["result",4]]],[11,"type_id","","",88,[[],["typeid",3]]],[11,"poll_ready","","",88,[[["context",3]],[["result",4],["poll",4]]]],[11,"call","","",88,[[["request",3]]]],[11,"into_request","","",88,[[],["request",3]]],[11,"vzip","","",88,[[]]],[11,"from","","",89,[[]]],[11,"into","","",89,[[]]],[11,"to_owned","","",89,[[]]],[11,"clone_into","","",89,[[]]],[11,"borrow","","",89,[[]]],[11,"borrow_mut","","",89,[[]]],[11,"try_from","","",89,[[],["result",4]]],[11,"try_into","","",89,[[],["result",4]]],[11,"type_id","","",89,[[],["typeid",3]]],[11,"into_request","","",89,[[],["request",3]]],[11,"vzip","","",89,[[]]],[11,"from","tink_testing_server::aead_service","",92,[[]]],[11,"into","","",92,[[]]],[11,"borrow","","",92,[[]]],[11,"borrow_mut","","",92,[[]]],[11,"try_from","","",92,[[],["result",4]]],[11,"try_into","","",92,[[],["result",4]]],[11,"type_id","","",92,[[],["typeid",3]]],[11,"into_request","","",92,[[],["request",3]]],[11,"vzip","","",92,[[]]],[11,"from","tink_testing_server::daead_service","",93,[[]]],[11,"into","","",93,[[]]],[11,"borrow","","",93,[[]]],[11,"borrow_mut","","",93,[[]]],[11,"try_from","","",93,[[],["result",4]]],[11,"try_into","","",93,[[],["result",4]]],[11,"type_id","","",93,[[],["typeid",3]]],[11,"into_request","","",93,[[],["request",3]]],[11,"vzip","","",93,[[]]],[11,"from","tink_testing_server::keyset_service","",94,[[]]],[11,"into","","",94,[[]]],[11,"borrow","","",94,[[]]],[11,"borrow_mut","","",94,[[]]],[11,"try_from","","",94,[[],["result",4]]],[11,"try_into","","",94,[[],["result",4]]],[11,"type_id","","",94,[[],["typeid",3]]],[11,"into_request","","",94,[[],["request",3]]],[11,"vzip","","",94,[[]]],[11,"from","tink_testing_server::mac_service","",95,[[]]],[11,"into","","",95,[[]]],[11,"borrow","","",95,[[]]],[11,"borrow_mut","","",95,[[]]],[11,"try_from","","",95,[[],["result",4]]],[11,"try_into","","",95,[[],["result",4]]],[11,"type_id","","",95,[[],["typeid",3]]],[11,"into_request","","",95,[[],["request",3]]],[11,"vzip","","",95,[[]]],[11,"from","tink_testing_server::metadata_service","",96,[[]]],[11,"into","","",96,[[]]],[11,"borrow","","",96,[[]]],[11,"borrow_mut","","",96,[[]]],[11,"try_from","","",96,[[],["result",4]]],[11,"try_into","","",96,[[],["result",4]]],[11,"type_id","","",96,[[],["typeid",3]]],[11,"into_request","","",96,[[],["request",3]]],[11,"vzip","","",96,[[]]],[11,"from","tink_testing_server::prf_set_service","",97,[[]]],[11,"into","","",97,[[]]],[11,"borrow","","",97,[[]]],[11,"borrow_mut","","",97,[[]]],[11,"try_from","","",97,[[],["result",4]]],[11,"try_into","","",97,[[],["result",4]]],[11,"type_id","","",97,[[],["typeid",3]]],[11,"into_request","","",97,[[],["request",3]]],[11,"vzip","","",97,[[]]],[11,"from","tink_testing_server::signature_service","",98,[[]]],[11,"into","","",98,[[]]],[11,"borrow","","",98,[[]]],[11,"borrow_mut","","",98,[[]]],[11,"try_from","","",98,[[],["result",4]]],[11,"try_into","","",98,[[],["result",4]]],[11,"type_id","","",98,[[],["typeid",3]]],[11,"into_request","","",98,[[],["request",3]]],[11,"vzip","","",98,[[]]],[11,"from","tink_testing_server::streaming_service","",99,[[]]],[11,"into","","",99,[[]]],[11,"borrow","","",99,[[]]],[11,"borrow_mut","","",99,[[]]],[11,"try_from","","",99,[[],["result",4]]],[11,"try_into","","",99,[[],["result",4]]],[11,"type_id","","",99,[[],["typeid",3]]],[11,"into_request","","",99,[[],["request",3]]],[11,"vzip","","",99,[[]]],[11,"key_ids","tink_testing_server::prf_set_service","",97,[[["request",3],["prfsetkeyidsrequest",3]],[["pin",3],["box",3]]]],[11,"compute","","",97,[[["prfsetcomputerequest",3],["request",3]],[["box",3],["pin",3]]]],[11,"sign","tink_testing_server::signature_service","",98,[[["request",3],["signaturesignrequest",3]],[["pin",3],["box",3]]]],[11,"verify","","",98,[[["request",3],["signatureverifyrequest",3]],[["pin",3],["box",3]]]],[11,"compute_mac","tink_testing_server::mac_service","",95,[[["request",3],["computemacrequest",3]],[["box",3],["pin",3]]]],[11,"verify_mac","","",95,[[["request",3],["verifymacrequest",3]],[["pin",3],["box",3]]]],[11,"encrypt","tink_testing_server::streaming_service","",99,[[["request",3],["streamingaeadencryptrequest",3]],[["pin",3],["box",3]]]],[11,"decrypt","","",99,[[["request",3],["streamingaeaddecryptrequest",3]],[["box",3],["pin",3]]]],[11,"encrypt_deterministically","tink_testing_server::daead_service","",93,[[["request",3],["deterministicaeadencryptrequest",3]],[["pin",3],["box",3]]]],[11,"decrypt_deterministically","","",93,[[["deterministicaeaddecryptrequest",3],["request",3]],[["pin",3],["box",3]]]],[11,"encrypt","tink_testing_server::aead_service","",92,[[["aeadencryptrequest",3],["request",3]],[["pin",3],["box",3]]]],[11,"decrypt","","",92,[[["request",3],["aeaddecryptrequest",3]],[["box",3],["pin",3]]]],[11,"generate","tink_testing_server::keyset_service","",94,[[["keysetgeneraterequest",3],["request",3]],[["pin",3],["box",3]]]],[11,"public","","",94,[[["keysetpublicrequest",3],["request",3]],[["box",3],["pin",3]]]],[11,"to_json","","",94,[[["keysettojsonrequest",3],["request",3]],[["pin",3],["box",3]]]],[11,"from_json","","",94,[[["request",3],["keysetfromjsonrequest",3]],[["box",3],["pin",3]]]],[11,"get_server_info","tink_testing_server::metadata_service","",96,[[["serverinforequest",3],["request",3]],[["pin",3],["box",3]]]],[11,"clone","tink_testing_server::proto","",91,[[],["serverinforequest",3]]],[11,"clone","","",1,[[],["serverinforesponse",3]]],[11,"clone","","",2,[[],["keysetgeneraterequest",3]]],[11,"clone","","",3,[[],["keysetgenerateresponse",3]]],[11,"clone","tink_testing_server::proto::keyset_generate_response","",38,[[],["result",4]]],[11,"clone","tink_testing_server::proto","",4,[[],["keysetpublicrequest",3]]],[11,"clone","","",5,[[],["keysetpublicresponse",3]]],[11,"clone","tink_testing_server::proto::keyset_public_response","",39,[[],["result",4]]],[11,"clone","tink_testing_server::proto","",6,[[],["keysettojsonrequest",3]]],[11,"clone","","",7,[[],["keysettojsonresponse",3]]],[11,"clone","tink_testing_server::proto::keyset_to_json_response","",40,[[],["result",4]]],[11,"clone","tink_testing_server::proto","",8,[[],["keysetfromjsonrequest",3]]],[11,"clone","","",9,[[],["keysetfromjsonresponse",3]]],[11,"clone","tink_testing_server::proto::keyset_from_json_response","",41,[[],["result",4]]],[11,"clone","tink_testing_server::proto","",10,[[],["aeadencryptrequest",3]]],[11,"clone","","",11,[[],["aeadencryptresponse",3]]],[11,"clone","tink_testing_server::proto::aead_encrypt_response","",42,[[],["result",4]]],[11,"clone","tink_testing_server::proto","",12,[[],["aeaddecryptrequest",3]]],[11,"clone","","",13,[[],["aeaddecryptresponse",3]]],[11,"clone","tink_testing_server::proto::aead_decrypt_response","",43,[[],["result",4]]],[11,"clone","tink_testing_server::proto","",14,[[],["deterministicaeadencryptrequest",3]]],[11,"clone","","",15,[[],["deterministicaeadencryptresponse",3]]],[11,"clone","tink_testing_server::proto::deterministic_aead_encrypt_response","",44,[[],["result",4]]],[11,"clone","tink_testing_server::proto","",16,[[],["deterministicaeaddecryptrequest",3]]],[11,"clone","","",17,[[],["deterministicaeaddecryptresponse",3]]],[11,"clone","tink_testing_server::proto::deterministic_aead_decrypt_response","",45,[[],["result",4]]],[11,"clone","tink_testing_server::proto","",18,[[],["streamingaeadencryptrequest",3]]],[11,"clone","","",19,[[],["streamingaeadencryptresponse",3]]],[11,"clone","tink_testing_server::proto::streaming_aead_encrypt_response","",46,[[],["result",4]]],[11,"clone","tink_testing_server::proto","",20,[[],["streamingaeaddecryptrequest",3]]],[11,"clone","","",21,[[],["streamingaeaddecryptresponse",3]]],[11,"clone","tink_testing_server::proto::streaming_aead_decrypt_response","",47,[[],["result",4]]],[11,"clone","tink_testing_server::proto","",22,[[],["computemacrequest",3]]],[11,"clone","","",23,[[],["computemacresponse",3]]],[11,"clone","tink_testing_server::proto::compute_mac_response","",48,[[],["result",4]]],[11,"clone","tink_testing_server::proto","",24,[[],["verifymacrequest",3]]],[11,"clone","","",25,[[],["verifymacresponse",3]]],[11,"clone","","",26,[[],["hybridencryptrequest",3]]],[11,"clone","","",27,[[],["hybridencryptresponse",3]]],[11,"clone","tink_testing_server::proto::hybrid_encrypt_response","",49,[[],["result",4]]],[11,"clone","tink_testing_server::proto","",28,[[],["hybriddecryptrequest",3]]],[11,"clone","","",29,[[],["hybriddecryptresponse",3]]],[11,"clone","tink_testing_server::proto::hybrid_decrypt_response","",50,[[],["result",4]]],[11,"clone","tink_testing_server::proto","",30,[[],["signaturesignrequest",3]]],[11,"clone","","",31,[[],["signaturesignresponse",3]]],[11,"clone","tink_testing_server::proto::signature_sign_response","",51,[[],["result",4]]],[11,"clone","tink_testing_server::proto","",32,[[],["signatureverifyrequest",3]]],[11,"clone","","",33,[[],["signatureverifyresponse",3]]],[11,"clone","","",34,[[],["prfsetkeyidsrequest",3]]],[11,"clone","","",35,[[],["prfsetkeyidsresponse",3]]],[11,"clone","tink_testing_server::proto::prf_set_key_ids_response","",52,[[],["output",3]]],[11,"clone","","",53,[[],["result",4]]],[11,"clone","tink_testing_server::proto","",36,[[],["prfsetcomputerequest",3]]],[11,"clone","","",37,[[],["prfsetcomputeresponse",3]]],[11,"clone","tink_testing_server::proto::prf_set_compute_response","",54,[[],["result",4]]],[11,"clone","tink_testing_server::proto::metadata_client","",55,[[]]],[11,"clone","tink_testing_server::proto::keyset_client","",56,[[]]],[11,"clone","tink_testing_server::proto::aead_client","",57,[[]]],[11,"clone","tink_testing_server::proto::deterministic_aead_client","",58,[[]]],[11,"clone","tink_testing_server::proto::streaming_aead_client","",59,[[]]],[11,"clone","tink_testing_server::proto::mac_client","",60,[[]]],[11,"clone","tink_testing_server::proto::hybrid_client","",61,[[]]],[11,"clone","tink_testing_server::proto::signature_client","",62,[[]]],[11,"clone","tink_testing_server::proto::prf_set_client","",63,[[]]],[11,"clone","tink_testing_server::proto::metadata_server","",64,[[]]],[11,"clone","","",65,[[]]],[11,"clone","tink_testing_server::proto::keyset_server","",67,[[]]],[11,"clone","","",68,[[]]],[11,"clone","tink_testing_server::proto::aead_server","",70,[[]]],[11,"clone","","",71,[[]]],[11,"clone","tink_testing_server::proto::deterministic_aead_server","",73,[[]]],[11,"clone","","",74,[[]]],[11,"clone","tink_testing_server::proto::streaming_aead_server","",76,[[]]],[11,"clone","","",77,[[]]],[11,"clone","tink_testing_server::proto::mac_server","",79,[[]]],[11,"clone","","",80,[[]]],[11,"clone","tink_testing_server::proto::hybrid_server","",82,[[]]],[11,"clone","","",83,[[]]],[11,"clone","tink_testing_server::proto::signature_server","",85,[[]]],[11,"clone","","",86,[[]]],[11,"clone","tink_testing_server::proto::prf_set_server","",88,[[]]],[11,"clone","","",89,[[]]],[11,"default","tink_testing_server::proto","",91,[[],["serverinforequest",3]]],[11,"default","","",1,[[],["serverinforesponse",3]]],[11,"default","","",2,[[],["keysetgeneraterequest",3]]],[11,"default","","",3,[[],["keysetgenerateresponse",3]]],[11,"default","","",4,[[],["keysetpublicrequest",3]]],[11,"default","","",5,[[],["keysetpublicresponse",3]]],[11,"default","","",6,[[],["keysettojsonrequest",3]]],[11,"default","","",7,[[],["keysettojsonresponse",3]]],[11,"default","","",8,[[],["keysetfromjsonrequest",3]]],[11,"default","","",9,[[],["keysetfromjsonresponse",3]]],[11,"default","","",10,[[],["aeadencryptrequest",3]]],[11,"default","","",11,[[],["aeadencryptresponse",3]]],[11,"default","","",12,[[],["aeaddecryptrequest",3]]],[11,"default","","",13,[[],["aeaddecryptresponse",3]]],[11,"default","","",14,[[],["deterministicaeadencryptrequest",3]]],[11,"default","","",15,[[],["deterministicaeadencryptresponse",3]]],[11,"default","","",16,[[],["deterministicaeaddecryptrequest",3]]],[11,"default","","",17,[[],["deterministicaeaddecryptresponse",3]]],[11,"default","","",18,[[],["streamingaeadencryptrequest",3]]],[11,"default","","",19,[[],["streamingaeadencryptresponse",3]]],[11,"default","","",20,[[],["streamingaeaddecryptrequest",3]]],[11,"default","","",21,[[],["streamingaeaddecryptresponse",3]]],[11,"default","","",22,[[],["computemacrequest",3]]],[11,"default","","",23,[[],["computemacresponse",3]]],[11,"default","","",24,[[],["verifymacrequest",3]]],[11,"default","","",25,[[],["verifymacresponse",3]]],[11,"default","","",26,[[],["hybridencryptrequest",3]]],[11,"default","","",27,[[],["hybridencryptresponse",3]]],[11,"default","","",28,[[],["hybriddecryptrequest",3]]],[11,"default","","",29,[[],["hybriddecryptresponse",3]]],[11,"default","","",30,[[],["signaturesignrequest",3]]],[11,"default","","",31,[[],["signaturesignresponse",3]]],[11,"default","","",32,[[],["signatureverifyrequest",3]]],[11,"default","","",33,[[],["signatureverifyresponse",3]]],[11,"default","","",34,[[],["prfsetkeyidsrequest",3]]],[11,"default","","",35,[[],["prfsetkeyidsresponse",3]]],[11,"default","tink_testing_server::proto::prf_set_key_ids_response","",52,[[],["output",3]]],[11,"default","tink_testing_server::proto","",36,[[],["prfsetcomputerequest",3]]],[11,"default","","",37,[[],["prfsetcomputeresponse",3]]],[11,"default","tink_testing_server::aead_service","",92,[[],["aeadserverimpl",3]]],[11,"default","tink_testing_server::daead_service","",93,[[],["daeadserverimpl",3]]],[11,"default","tink_testing_server::keyset_service","",94,[[],["keysetserverimpl",3]]],[11,"default","tink_testing_server::mac_service","",95,[[],["macserverimpl",3]]],[11,"default","tink_testing_server::metadata_service","",96,[[],["metadataserverimpl",3]]],[11,"default","tink_testing_server::prf_set_service","",97,[[],["prfsetserverimpl",3]]],[11,"default","tink_testing_server::signature_service","",98,[[],["signatureserverimpl",3]]],[11,"default","tink_testing_server::streaming_service","",99,[[],["streamingaeadserverimpl",3]]],[11,"eq","tink_testing_server::proto","",91,[[["serverinforequest",3]]]],[11,"eq","","",1,[[["serverinforesponse",3]]]],[11,"ne","","",1,[[["serverinforesponse",3]]]],[11,"eq","","",2,[[["keysetgeneraterequest",3]]]],[11,"ne","","",2,[[["keysetgeneraterequest",3]]]],[11,"eq","","",3,[[["keysetgenerateresponse",3]]]],[11,"ne","","",3,[[["keysetgenerateresponse",3]]]],[11,"eq","tink_testing_server::proto::keyset_generate_response","",38,[[["result",4]]]],[11,"ne","","",38,[[["result",4]]]],[11,"eq","tink_testing_server::proto","",4,[[["keysetpublicrequest",3]]]],[11,"ne","","",4,[[["keysetpublicrequest",3]]]],[11,"eq","","",5,[[["keysetpublicresponse",3]]]],[11,"ne","","",5,[[["keysetpublicresponse",3]]]],[11,"eq","tink_testing_server::proto::keyset_public_response","",39,[[["result",4]]]],[11,"ne","","",39,[[["result",4]]]],[11,"eq","tink_testing_server::proto","",6,[[["keysettojsonrequest",3]]]],[11,"ne","","",6,[[["keysettojsonrequest",3]]]],[11,"eq","","",7,[[["keysettojsonresponse",3]]]],[11,"ne","","",7,[[["keysettojsonresponse",3]]]],[11,"eq","tink_testing_server::proto::keyset_to_json_response","",40,[[["result",4]]]],[11,"ne","","",40,[[["result",4]]]],[11,"eq","tink_testing_server::proto","",8,[[["keysetfromjsonrequest",3]]]],[11,"ne","","",8,[[["keysetfromjsonrequest",3]]]],[11,"eq","","",9,[[["keysetfromjsonresponse",3]]]],[11,"ne","","",9,[[["keysetfromjsonresponse",3]]]],[11,"eq","tink_testing_server::proto::keyset_from_json_response","",41,[[["result",4]]]],[11,"ne","","",41,[[["result",4]]]],[11,"eq","tink_testing_server::proto","",10,[[["aeadencryptrequest",3]]]],[11,"ne","","",10,[[["aeadencryptrequest",3]]]],[11,"eq","","",11,[[["aeadencryptresponse",3]]]],[11,"ne","","",11,[[["aeadencryptresponse",3]]]],[11,"eq","tink_testing_server::proto::aead_encrypt_response","",42,[[["result",4]]]],[11,"ne","","",42,[[["result",4]]]],[11,"eq","tink_testing_server::proto","",12,[[["aeaddecryptrequest",3]]]],[11,"ne","","",12,[[["aeaddecryptrequest",3]]]],[11,"eq","","",13,[[["aeaddecryptresponse",3]]]],[11,"ne","","",13,[[["aeaddecryptresponse",3]]]],[11,"eq","tink_testing_server::proto::aead_decrypt_response","",43,[[["result",4]]]],[11,"ne","","",43,[[["result",4]]]],[11,"eq","tink_testing_server::proto","",14,[[["deterministicaeadencryptrequest",3]]]],[11,"ne","","",14,[[["deterministicaeadencryptrequest",3]]]],[11,"eq","","",15,[[["deterministicaeadencryptresponse",3]]]],[11,"ne","","",15,[[["deterministicaeadencryptresponse",3]]]],[11,"eq","tink_testing_server::proto::deterministic_aead_encrypt_response","",44,[[["result",4]]]],[11,"ne","","",44,[[["result",4]]]],[11,"eq","tink_testing_server::proto","",16,[[["deterministicaeaddecryptrequest",3]]]],[11,"ne","","",16,[[["deterministicaeaddecryptrequest",3]]]],[11,"eq","","",17,[[["deterministicaeaddecryptresponse",3]]]],[11,"ne","","",17,[[["deterministicaeaddecryptresponse",3]]]],[11,"eq","tink_testing_server::proto::deterministic_aead_decrypt_response","",45,[[["result",4]]]],[11,"ne","","",45,[[["result",4]]]],[11,"eq","tink_testing_server::proto","",18,[[["streamingaeadencryptrequest",3]]]],[11,"ne","","",18,[[["streamingaeadencryptrequest",3]]]],[11,"eq","","",19,[[["streamingaeadencryptresponse",3]]]],[11,"ne","","",19,[[["streamingaeadencryptresponse",3]]]],[11,"eq","tink_testing_server::proto::streaming_aead_encrypt_response","",46,[[["result",4]]]],[11,"ne","","",46,[[["result",4]]]],[11,"eq","tink_testing_server::proto","",20,[[["streamingaeaddecryptrequest",3]]]],[11,"ne","","",20,[[["streamingaeaddecryptrequest",3]]]],[11,"eq","","",21,[[["streamingaeaddecryptresponse",3]]]],[11,"ne","","",21,[[["streamingaeaddecryptresponse",3]]]],[11,"eq","tink_testing_server::proto::streaming_aead_decrypt_response","",47,[[["result",4]]]],[11,"ne","","",47,[[["result",4]]]],[11,"eq","tink_testing_server::proto","",22,[[["computemacrequest",3]]]],[11,"ne","","",22,[[["computemacrequest",3]]]],[11,"eq","","",23,[[["computemacresponse",3]]]],[11,"ne","","",23,[[["computemacresponse",3]]]],[11,"eq","tink_testing_server::proto::compute_mac_response","",48,[[["result",4]]]],[11,"ne","","",48,[[["result",4]]]],[11,"eq","tink_testing_server::proto","",24,[[["verifymacrequest",3]]]],[11,"ne","","",24,[[["verifymacrequest",3]]]],[11,"eq","","",25,[[["verifymacresponse",3]]]],[11,"ne","","",25,[[["verifymacresponse",3]]]],[11,"eq","","",26,[[["hybridencryptrequest",3]]]],[11,"ne","","",26,[[["hybridencryptrequest",3]]]],[11,"eq","","",27,[[["hybridencryptresponse",3]]]],[11,"ne","","",27,[[["hybridencryptresponse",3]]]],[11,"eq","tink_testing_server::proto::hybrid_encrypt_response","",49,[[["result",4]]]],[11,"ne","","",49,[[["result",4]]]],[11,"eq","tink_testing_server::proto","",28,[[["hybriddecryptrequest",3]]]],[11,"ne","","",28,[[["hybriddecryptrequest",3]]]],[11,"eq","","",29,[[["hybriddecryptresponse",3]]]],[11,"ne","","",29,[[["hybriddecryptresponse",3]]]],[11,"eq","tink_testing_server::proto::hybrid_decrypt_response","",50,[[["result",4]]]],[11,"ne","","",50,[[["result",4]]]],[11,"eq","tink_testing_server::proto","",30,[[["signaturesignrequest",3]]]],[11,"ne","","",30,[[["signaturesignrequest",3]]]],[11,"eq","","",31,[[["signaturesignresponse",3]]]],[11,"ne","","",31,[[["signaturesignresponse",3]]]],[11,"eq","tink_testing_server::proto::signature_sign_response","",51,[[["result",4]]]],[11,"ne","","",51,[[["result",4]]]],[11,"eq","tink_testing_server::proto","",32,[[["signatureverifyrequest",3]]]],[11,"ne","","",32,[[["signatureverifyrequest",3]]]],[11,"eq","","",33,[[["signatureverifyresponse",3]]]],[11,"ne","","",33,[[["signatureverifyresponse",3]]]],[11,"eq","","",34,[[["prfsetkeyidsrequest",3]]]],[11,"ne","","",34,[[["prfsetkeyidsrequest",3]]]],[11,"eq","","",35,[[["prfsetkeyidsresponse",3]]]],[11,"ne","","",35,[[["prfsetkeyidsresponse",3]]]],[11,"eq","tink_testing_server::proto::prf_set_key_ids_response","",52,[[["output",3]]]],[11,"ne","","",52,[[["output",3]]]],[11,"eq","","",53,[[["result",4]]]],[11,"ne","","",53,[[["result",4]]]],[11,"eq","tink_testing_server::proto","",36,[[["prfsetcomputerequest",3]]]],[11,"ne","","",36,[[["prfsetcomputerequest",3]]]],[11,"eq","","",37,[[["prfsetcomputeresponse",3]]]],[11,"ne","","",37,[[["prfsetcomputeresponse",3]]]],[11,"eq","tink_testing_server::proto::prf_set_compute_response","",54,[[["result",4]]]],[11,"ne","","",54,[[["result",4]]]],[11,"fmt","tink_testing_server::proto","",91,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","tink_testing_server::proto::keyset_generate_response","",38,[[["formatter",3]],["result",6]]],[11,"fmt","tink_testing_server::proto","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","tink_testing_server::proto::keyset_public_response","",39,[[["formatter",3]],["result",6]]],[11,"fmt","tink_testing_server::proto","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","tink_testing_server::proto::keyset_to_json_response","",40,[[["formatter",3]],["result",6]]],[11,"fmt","tink_testing_server::proto","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","tink_testing_server::proto::keyset_from_json_response","",41,[[["formatter",3]],["result",6]]],[11,"fmt","tink_testing_server::proto","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","tink_testing_server::proto::aead_encrypt_response","",42,[[["formatter",3]],["result",6]]],[11,"fmt","tink_testing_server::proto","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","tink_testing_server::proto::aead_decrypt_response","",43,[[["formatter",3]],["result",6]]],[11,"fmt","tink_testing_server::proto","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","tink_testing_server::proto::deterministic_aead_encrypt_response","",44,[[["formatter",3]],["result",6]]],[11,"fmt","tink_testing_server::proto","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","tink_testing_server::proto::deterministic_aead_decrypt_response","",45,[[["formatter",3]],["result",6]]],[11,"fmt","tink_testing_server::proto","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","tink_testing_server::proto::streaming_aead_encrypt_response","",46,[[["formatter",3]],["result",6]]],[11,"fmt","tink_testing_server::proto","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","tink_testing_server::proto::streaming_aead_decrypt_response","",47,[[["formatter",3]],["result",6]]],[11,"fmt","tink_testing_server::proto","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",23,[[["formatter",3]],["result",6]]],[11,"fmt","tink_testing_server::proto::compute_mac_response","",48,[[["formatter",3]],["result",6]]],[11,"fmt","tink_testing_server::proto","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",27,[[["formatter",3]],["result",6]]],[11,"fmt","tink_testing_server::proto::hybrid_encrypt_response","",49,[[["formatter",3]],["result",6]]],[11,"fmt","tink_testing_server::proto","",28,[[["formatter",3]],["result",6]]],[11,"fmt","","",29,[[["formatter",3]],["result",6]]],[11,"fmt","tink_testing_server::proto::hybrid_decrypt_response","",50,[[["formatter",3]],["result",6]]],[11,"fmt","tink_testing_server::proto","",30,[[["formatter",3]],["result",6]]],[11,"fmt","","",31,[[["formatter",3]],["result",6]]],[11,"fmt","tink_testing_server::proto::signature_sign_response","",51,[[["formatter",3]],["result",6]]],[11,"fmt","tink_testing_server::proto","",32,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",34,[[["formatter",3]],["result",6]]],[11,"fmt","","",35,[[["formatter",3]],["result",6]]],[11,"fmt","tink_testing_server::proto::prf_set_key_ids_response","",52,[[["formatter",3]],["result",6]]],[11,"fmt","","",53,[[["formatter",3]],["result",6]]],[11,"fmt","tink_testing_server::proto","",36,[[["formatter",3]],["result",6]]],[11,"fmt","","",37,[[["formatter",3]],["result",6]]],[11,"fmt","tink_testing_server::proto::prf_set_compute_response","",54,[[["formatter",3]],["result",6]]],[11,"fmt","tink_testing_server::proto::metadata_client","",55,[[["formatter",3]],["result",6]]],[11,"fmt","tink_testing_server::proto::keyset_client","",56,[[["formatter",3]],["result",6]]],[11,"fmt","tink_testing_server::proto::aead_client","",57,[[["formatter",3]],["result",6]]],[11,"fmt","tink_testing_server::proto::deterministic_aead_client","",58,[[["formatter",3]],["result",6]]],[11,"fmt","tink_testing_server::proto::streaming_aead_client","",59,[[["formatter",3]],["result",6]]],[11,"fmt","tink_testing_server::proto::mac_client","",60,[[["formatter",3]],["result",6]]],[11,"fmt","tink_testing_server::proto::hybrid_client","",61,[[["formatter",3]],["result",6]]],[11,"fmt","tink_testing_server::proto::signature_client","",62,[[["formatter",3]],["result",6]]],[11,"fmt","tink_testing_server::proto::prf_set_client","",63,[[["formatter",3]],["result",6]]],[11,"fmt","tink_testing_server::proto::metadata_server","",64,[[["formatter",3]],["result",6]]],[11,"fmt","","",65,[[["formatter",3]],["result",6]]],[11,"fmt","tink_testing_server::proto::keyset_server","",67,[[["formatter",3]],["result",6]]],[11,"fmt","","",68,[[["formatter",3]],["result",6]]],[11,"fmt","tink_testing_server::proto::aead_server","",70,[[["formatter",3]],["result",6]]],[11,"fmt","","",71,[[["formatter",3]],["result",6]]],[11,"fmt","tink_testing_server::proto::deterministic_aead_server","",73,[[["formatter",3]],["result",6]]],[11,"fmt","","",74,[[["formatter",3]],["result",6]]],[11,"fmt","tink_testing_server::proto::streaming_aead_server","",76,[[["formatter",3]],["result",6]]],[11,"fmt","","",77,[[["formatter",3]],["result",6]]],[11,"fmt","tink_testing_server::proto::mac_server","",79,[[["formatter",3]],["result",6]]],[11,"fmt","","",80,[[["formatter",3]],["result",6]]],[11,"fmt","tink_testing_server::proto::hybrid_server","",82,[[["formatter",3]],["result",6]]],[11,"fmt","","",83,[[["formatter",3]],["result",6]]],[11,"fmt","tink_testing_server::proto::signature_server","",85,[[["formatter",3]],["result",6]]],[11,"fmt","","",86,[[["formatter",3]],["result",6]]],[11,"fmt","tink_testing_server::proto::prf_set_server","",88,[[["formatter",3]],["result",6]]],[11,"fmt","","",89,[[["formatter",3]],["result",6]]],[11,"fmt","tink_testing_server::aead_service","",92,[[["formatter",3]],["result",6]]],[11,"fmt","tink_testing_server::daead_service","",93,[[["formatter",3]],["result",6]]],[11,"fmt","tink_testing_server::keyset_service","",94,[[["formatter",3]],["result",6]]],[11,"fmt","tink_testing_server::mac_service","",95,[[["formatter",3]],["result",6]]],[11,"fmt","tink_testing_server::metadata_service","",96,[[["formatter",3]],["result",6]]],[11,"fmt","tink_testing_server::prf_set_service","",97,[[["formatter",3]],["result",6]]],[11,"fmt","tink_testing_server::signature_service","",98,[[["formatter",3]],["result",6]]],[11,"fmt","tink_testing_server::streaming_service","",99,[[["formatter",3]],["result",6]]],[11,"fmt","tink_testing_server","",0,[[["formatter",3]],["result",6]]],[11,"clap","","",0,[[],["app",3]]],[11,"from_clap","","",0,[[["argmatches",3]]]],[11,"augment_clap","","",0,[[["app",3]],["app",3]]],[11,"is_subcommand","","",0,[[]]],[11,"poll_ready","tink_testing_server::proto::metadata_server","",64,[[["context",3]],[["result",4],["poll",4]]]],[11,"call","","",64,[[["request",3]]]],[11,"poll_ready","tink_testing_server::proto::keyset_server","",67,[[["context",3]],[["result",4],["poll",4]]]],[11,"call","","",67,[[["request",3]]]],[11,"poll_ready","tink_testing_server::proto::aead_server","",70,[[["context",3]],[["result",4],["poll",4]]]],[11,"call","","",70,[[["request",3]]]],[11,"poll_ready","tink_testing_server::proto::deterministic_aead_server","",73,[[["context",3]],[["result",4],["poll",4]]]],[11,"call","","",73,[[["request",3]]]],[11,"poll_ready","tink_testing_server::proto::streaming_aead_server","",76,[[["context",3]],[["result",4],["poll",4]]]],[11,"call","","",76,[[["request",3]]]],[11,"poll_ready","tink_testing_server::proto::mac_server","",79,[[["context",3]],[["result",4],["poll",4]]]],[11,"call","","",79,[[["request",3]]]],[11,"poll_ready","tink_testing_server::proto::hybrid_server","",82,[[["context",3]],[["result",4],["poll",4]]]],[11,"call","","",82,[[["request",3]]]],[11,"poll_ready","tink_testing_server::proto::signature_server","",85,[[["context",3]],[["result",4],["poll",4]]]],[11,"call","","",85,[[["request",3]]]],[11,"poll_ready","tink_testing_server::proto::prf_set_server","",88,[[["context",3]],[["result",4],["poll",4]]]],[11,"call","","",88,[[["request",3]]]],[11,"encode_raw","tink_testing_server::proto","",91,[[]]],[11,"merge_field","","",91,[[["decodecontext",3],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",91,[[]]],[11,"clear","","",91,[[]]],[11,"encode_raw","","",1,[[]]],[11,"merge_field","","",1,[[["decodecontext",3],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",1,[[]]],[11,"clear","","",1,[[]]],[11,"encode_raw","","",2,[[]]],[11,"merge_field","","",2,[[["decodecontext",3],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",2,[[]]],[11,"clear","","",2,[[]]],[11,"encode_raw","","",3,[[]]],[11,"merge_field","","",3,[[["decodecontext",3],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",3,[[]]],[11,"clear","","",3,[[]]],[11,"encode_raw","","",4,[[]]],[11,"merge_field","","",4,[[["decodecontext",3],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",4,[[]]],[11,"clear","","",4,[[]]],[11,"encode_raw","","",5,[[]]],[11,"merge_field","","",5,[[["decodecontext",3],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",5,[[]]],[11,"clear","","",5,[[]]],[11,"encode_raw","","",6,[[]]],[11,"merge_field","","",6,[[["decodecontext",3],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",6,[[]]],[11,"clear","","",6,[[]]],[11,"encode_raw","","",7,[[]]],[11,"merge_field","","",7,[[["decodecontext",3],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",7,[[]]],[11,"clear","","",7,[[]]],[11,"encode_raw","","",8,[[]]],[11,"merge_field","","",8,[[["decodecontext",3],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",8,[[]]],[11,"clear","","",8,[[]]],[11,"encode_raw","","",9,[[]]],[11,"merge_field","","",9,[[["decodecontext",3],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",9,[[]]],[11,"clear","","",9,[[]]],[11,"encode_raw","","",10,[[]]],[11,"merge_field","","",10,[[["decodecontext",3],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",10,[[]]],[11,"clear","","",10,[[]]],[11,"encode_raw","","",11,[[]]],[11,"merge_field","","",11,[[["decodecontext",3],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",11,[[]]],[11,"clear","","",11,[[]]],[11,"encode_raw","","",12,[[]]],[11,"merge_field","","",12,[[["decodecontext",3],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",12,[[]]],[11,"clear","","",12,[[]]],[11,"encode_raw","","",13,[[]]],[11,"merge_field","","",13,[[["decodecontext",3],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",13,[[]]],[11,"clear","","",13,[[]]],[11,"encode_raw","","",14,[[]]],[11,"merge_field","","",14,[[["decodecontext",3],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",14,[[]]],[11,"clear","","",14,[[]]],[11,"encode_raw","","",15,[[]]],[11,"merge_field","","",15,[[["decodecontext",3],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",15,[[]]],[11,"clear","","",15,[[]]],[11,"encode_raw","","",16,[[]]],[11,"merge_field","","",16,[[["decodecontext",3],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",16,[[]]],[11,"clear","","",16,[[]]],[11,"encode_raw","","",17,[[]]],[11,"merge_field","","",17,[[["decodecontext",3],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",17,[[]]],[11,"clear","","",17,[[]]],[11,"encode_raw","","",18,[[]]],[11,"merge_field","","",18,[[["decodecontext",3],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",18,[[]]],[11,"clear","","",18,[[]]],[11,"encode_raw","","",19,[[]]],[11,"merge_field","","",19,[[["decodecontext",3],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",19,[[]]],[11,"clear","","",19,[[]]],[11,"encode_raw","","",20,[[]]],[11,"merge_field","","",20,[[["decodecontext",3],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",20,[[]]],[11,"clear","","",20,[[]]],[11,"encode_raw","","",21,[[]]],[11,"merge_field","","",21,[[["decodecontext",3],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",21,[[]]],[11,"clear","","",21,[[]]],[11,"encode_raw","","",22,[[]]],[11,"merge_field","","",22,[[["decodecontext",3],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",22,[[]]],[11,"clear","","",22,[[]]],[11,"encode_raw","","",23,[[]]],[11,"merge_field","","",23,[[["decodecontext",3],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",23,[[]]],[11,"clear","","",23,[[]]],[11,"encode_raw","","",24,[[]]],[11,"merge_field","","",24,[[["decodecontext",3],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",24,[[]]],[11,"clear","","",24,[[]]],[11,"encode_raw","","",25,[[]]],[11,"merge_field","","",25,[[["decodecontext",3],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",25,[[]]],[11,"clear","","",25,[[]]],[11,"encode_raw","","",26,[[]]],[11,"merge_field","","",26,[[["decodecontext",3],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",26,[[]]],[11,"clear","","",26,[[]]],[11,"encode_raw","","",27,[[]]],[11,"merge_field","","",27,[[["decodecontext",3],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",27,[[]]],[11,"clear","","",27,[[]]],[11,"encode_raw","","",28,[[]]],[11,"merge_field","","",28,[[["decodecontext",3],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",28,[[]]],[11,"clear","","",28,[[]]],[11,"encode_raw","","",29,[[]]],[11,"merge_field","","",29,[[["decodecontext",3],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",29,[[]]],[11,"clear","","",29,[[]]],[11,"encode_raw","","",30,[[]]],[11,"merge_field","","",30,[[["decodecontext",3],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",30,[[]]],[11,"clear","","",30,[[]]],[11,"encode_raw","","",31,[[]]],[11,"merge_field","","",31,[[["decodecontext",3],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",31,[[]]],[11,"clear","","",31,[[]]],[11,"encode_raw","","",32,[[]]],[11,"merge_field","","",32,[[["decodecontext",3],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",32,[[]]],[11,"clear","","",32,[[]]],[11,"encode_raw","","",33,[[]]],[11,"merge_field","","",33,[[["decodecontext",3],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",33,[[]]],[11,"clear","","",33,[[]]],[11,"encode_raw","","",34,[[]]],[11,"merge_field","","",34,[[["decodecontext",3],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",34,[[]]],[11,"clear","","",34,[[]]],[11,"encode_raw","","",35,[[]]],[11,"merge_field","","",35,[[["decodecontext",3],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",35,[[]]],[11,"clear","","",35,[[]]],[11,"encode_raw","tink_testing_server::proto::prf_set_key_ids_response","",52,[[]]],[11,"merge_field","","",52,[[["decodecontext",3],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",52,[[]]],[11,"clear","","",52,[[]]],[11,"encode_raw","tink_testing_server::proto","",36,[[]]],[11,"merge_field","","",36,[[["decodecontext",3],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",36,[[]]],[11,"clear","","",36,[[]]],[11,"encode_raw","","",37,[[]]],[11,"merge_field","","",37,[[["decodecontext",3],["wiretype",4]],[["decodeerror",3],["result",4]]]],[11,"encoded_len","","",37,[[]]],[11,"clear","","",37,[[]]]],"p":[[3,"Opt"],[3,"ServerInfoResponse"],[3,"KeysetGenerateRequest"],[3,"KeysetGenerateResponse"],[3,"KeysetPublicRequest"],[3,"KeysetPublicResponse"],[3,"KeysetToJsonRequest"],[3,"KeysetToJsonResponse"],[3,"KeysetFromJsonRequest"],[3,"KeysetFromJsonResponse"],[3,"AeadEncryptRequest"],[3,"AeadEncryptResponse"],[3,"AeadDecryptRequest"],[3,"AeadDecryptResponse"],[3,"DeterministicAeadEncryptRequest"],[3,"DeterministicAeadEncryptResponse"],[3,"DeterministicAeadDecryptRequest"],[3,"DeterministicAeadDecryptResponse"],[3,"StreamingAeadEncryptRequest"],[3,"StreamingAeadEncryptResponse"],[3,"StreamingAeadDecryptRequest"],[3,"StreamingAeadDecryptResponse"],[3,"ComputeMacRequest"],[3,"ComputeMacResponse"],[3,"VerifyMacRequest"],[3,"VerifyMacResponse"],[3,"HybridEncryptRequest"],[3,"HybridEncryptResponse"],[3,"HybridDecryptRequest"],[3,"HybridDecryptResponse"],[3,"SignatureSignRequest"],[3,"SignatureSignResponse"],[3,"SignatureVerifyRequest"],[3,"SignatureVerifyResponse"],[3,"PrfSetKeyIdsRequest"],[3,"PrfSetKeyIdsResponse"],[3,"PrfSetComputeRequest"],[3,"PrfSetComputeResponse"],[4,"Result"],[4,"Result"],[4,"Result"],[4,"Result"],[4,"Result"],[4,"Result"],[4,"Result"],[4,"Result"],[4,"Result"],[4,"Result"],[4,"Result"],[4,"Result"],[4,"Result"],[4,"Result"],[3,"Output"],[4,"Result"],[4,"Result"],[3,"MetadataClient"],[3,"KeysetClient"],[3,"AeadClient"],[3,"DeterministicAeadClient"],[3,"StreamingAeadClient"],[3,"MacClient"],[3,"HybridClient"],[3,"SignatureClient"],[3,"PrfSetClient"],[3,"MetadataServer"],[3,"_Inner"],[8,"Metadata"],[3,"KeysetServer"],[3,"_Inner"],[8,"Keyset"],[3,"AeadServer"],[3,"_Inner"],[8,"Aead"],[3,"DeterministicAeadServer"],[3,"_Inner"],[8,"DeterministicAead"],[3,"StreamingAeadServer"],[3,"_Inner"],[8,"StreamingAead"],[3,"MacServer"],[3,"_Inner"],[8,"Mac"],[3,"HybridServer"],[3,"_Inner"],[8,"Hybrid"],[3,"SignatureServer"],[3,"_Inner"],[8,"Signature"],[3,"PrfSetServer"],[3,"_Inner"],[8,"PrfSet"],[3,"ServerInfoRequest"],[3,"AeadServerImpl"],[3,"DaeadServerImpl"],[3,"KeysetServerImpl"],[3,"MacServerImpl"],[3,"MetadataServerImpl"],[3,"PrfSetServerImpl"],[3,"SignatureServerImpl"],[3,"StreamingAeadServerImpl"]]},\
"tink_testutil":{"doc":"Provides common methods needed in test code.","i":[[3,"SharedBuf","tink_testutil","Shared buffer, which allows `Read` and `Write` operations…",null,null],[3,"WycheproofSuite","","`WycheproofSuite` represents the common elements of the…",null,null],[12,"algorithm","","",0,null],[12,"generator_version","","",0,null],[12,"number_of_tests","","",0,null],[12,"notes","","",0,null],[3,"WycheproofGroup","","`WycheproofGroup` represents the common elements of a…",null,null],[12,"group_type","","",1,null],[3,"WycheproofCase","","`WycheproofCase` represents the common elements of a tests…",null,null],[12,"case_id","","",2,null],[12,"comment","","",2,null],[12,"result","","",2,null],[12,"flags","","",2,null],[3,"DummyAeadKeyManager","","Dummy implementation of the `KeyManager` trait. It returns…",null,null],[12,"type_url","","",3,null],[3,"DummyAead","","Dummy implementation of [`tink::Aead`] trait.",null,null],[3,"DummyMac","","Dummy implementation of [`tink::Mac`] trait.",null,null],[12,"name","","",4,null],[3,"DummyKmsClient","","Dummy implementation of a [`tink::registry::KmsClient`].",null,null],[3,"IoFailure","","An object that implements [`std::io::Read`] and…",null,null],[4,"WycheproofResult","","`WycheproofResult` represents the possible result values…",null,null],[13,"Valid","","Test case is valid, the crypto operation should succeed.",5,null],[13,"Invalid","","Test case is invalid; the crypto operation should fail.",5,null],[13,"Acceptable","","Test case is valid, but uses weak parameters; the crypto…",5,null],[5,"wycheproof_data","","Retrieve Wycheproof test vectors from the given filename.…",null,[[],["vec",3]]],[5,"new_test_aes_gcm_keyset","","Create a new [`Keyset`] containing an `AesGcmKey`.",null,[[["outputprefixtype",4]],["keyset",3]]],[5,"new_test_aes_siv_keyset","","Create a new [`Keyset`] containing an `AesSivKey`.",null,[[["outputprefixtype",4]],["keyset",3]]],[5,"new_test_hmac_keyset","","Create a new [`Keyset`] containing an `HmacKey`.",null,[[["outputprefixtype",4]],["keyset",3]]],[5,"new_test_aes_gcm_hkdf_keyset","","Create a new [`Keyset`] containing an `AesGcmHkdfKey`.",null,[[],["keyset",3]]],[5,"new_test_keyset","","Create a new test [`Keyset`], generating fresh [`KeyData`]…",null,[[["outputprefixtype",4]],["keyset",3]]],[5,"new_dummy_key","","Return a dummy key that doesn\'t contain actual key material.",null,[[["keyid",6],["keystatustype",4],["outputprefixtype",4]],["key",3]]],[5,"new_ecdsa_params","","Create an `EcdsaParams` with the specified parameters.",null,[[["ecdsasignatureencoding",4],["hashtype",4],["ellipticcurvetype",4]],["ecdsaparams",3]]],[5,"new_ecdsa_key_format","","Create an `EcdsaKeyFormat` with the specified parameters.",null,[[["ecdsaparams",3]],["ecdsakeyformat",3]]],[5,"new_random_ecdsa_private_key","","Create an `EcdsaPrivateKey` with randomly generated key…",null,[[["hashtype",4],["ellipticcurvetype",4]],["ecdsaprivatekey",3]]],[5,"new_random_ecdsa_private_key_data","","Create a [`KeyData`] containing an `EcdsaPrivateKey` with…",null,[[["hashtype",4],["ellipticcurvetype",4]],["keydata",3]]],[5,"new_random_ecdsa_public_key","","Create an `EcdsaPublicKey` with randomly generated key…",null,[[["hashtype",4],["ellipticcurvetype",4]],["ecdsapublickey",3]]],[5,"get_ecdsa_params","","Return the enum representations of each parameter in the…",null,[[["ecdsaparams",3]]]],[5,"new_ed25519_private_key","","Create an `Ed25519PrivateKey` with randomly generated key…",null,[[],["ed25519privatekey",3]]],[5,"new_ed25519_private_key_data","","Create a [`KeyData`] containing an `Ed25519PrivateKey`…",null,[[],["keydata",3]]],[5,"new_ed25519_public_key","","Create an `Ed25519PublicKey` with randomly generated key…",null,[[],["ed25519publickey",3]]],[5,"new_aes_gcm_key","","Create a randomly generated `AesGcmKey`.",null,[[],["aesgcmkey",3]]],[5,"new_aes_gcm_key_data","","Create a [`KeyData`] containing a randomly generated…",null,[[],["keydata",3]]],[5,"new_serialized_aes_gcm_key","","Create an `AesGcmKey` with randomly generated key material.",null,[[],["vec",3]]],[5,"new_aes_gcm_key_format","","Return a new `AesGcmKeyFormat`.",null,[[],["aesgcmkeyformat",3]]],[5,"new_aes_gcm_siv_key","","Create a randomly generated `AesGcmSivKey`.",null,[[],["aesgcmsivkey",3]]],[5,"new_aes_gcm_siv_key_data","","Create a [`KeyData`] containing a randomly generated…",null,[[],["keydata",3]]],[5,"new_serialized_aes_gcm_siv_key","","Create an `AesGcmSivKey` with randomly generated key…",null,[[],["vec",3]]],[5,"new_aes_gcm_siv_key_format","","Return a new `AesGcmSivKeyFormat`.",null,[[],["aesgcmsivkeyformat",3]]],[5,"new_aes_gcm_hkdf_key","","Create a randomly generated `AesGcmHkdfStreamingKey`.",null,[[],["aesgcmhkdfstreamingkey",3]]],[5,"new_aes_gcm_hkdf_key_data","","Create a [`KeyData`] containing a randomly generated…",null,[[["hashtype",4]],["keydata",3]]],[5,"new_aes_gcm_hkdf_key_format","","Return a new `AesGcmHkdfStreamingKeyFormat`.",null,[[],["aesgcmhkdfstreamingkeyformat",3]]],[5,"new_aes_ctr_hmac_key","","Create a randomly generated `AesCtrHmacStreamingKey`.",null,[[["hashtype",4]],["aesctrhmacstreamingkey",3]]],[5,"new_aes_ctr_hmac_key_data","","Create a [`KeyData`] containing a randomly generated…",null,[[["hashtype",4]],["keydata",3]]],[5,"new_aes_ctr_hmac_key_format","","Return a new `AesCtrHmacStreamingKeyFormat`.",null,[[["hashtype",4]],["aesctrhmacstreamingkeyformat",3]]],[5,"new_hmac_params","","Return a new `HmacParams`.",null,[[["hashtype",4]],["hmacparams",3]]],[5,"new_hmac_key","","Create a new `HmacKey` with the specified parameters.",null,[[["hashtype",4]],["hmackey",3]]],[5,"new_hmac_key_format","","Create a new `HmacKeyFormat` with the specified parameters.",null,[[["hashtype",4]],["hmackeyformat",3]]],[5,"new_aes_cmac_params","","Return a new `AesCmacParams`.",null,[[],["aescmacparams",3]]],[5,"new_aes_cmac_key","","Create a new `AesCmacKey` with the specified parameters.",null,[[],["aescmackey",3]]],[5,"new_aes_cmac_key_format","","Create a new `AesCmacKeyFormat` with the specified…",null,[[],["aescmackeyformat",3]]],[5,"new_hmac_keyset_manager","","Return a new [`tink::keyset::Manager`] that contains a…",null,[[],["manager",3]]],[5,"new_hmac_key_data","","Return a new [`KeyData`] that contains a `HmacKey`.",null,[[["hashtype",4]],["keydata",3]]],[5,"new_hmac_prf_params","","Return a new `HmacPrfParams`.",null,[[["hashtype",4]],["hmacprfparams",3]]],[5,"new_hmac_prf_key","","Create a new `HmacPrfKey` with the specified parameters.",null,[[["hashtype",4]],["hmacprfkey",3]]],[5,"new_hmac_prf_key_format","","Create a new `HmacPrfKeyFormat` with the specified…",null,[[["hashtype",4]],["hmacprfkeyformat",3]]],[5,"new_hkdf_prf_params","","Return a new `HkdfPrfParams`.",null,[[["hashtype",4]],["hkdfprfparams",3]]],[5,"new_hkdf_prf_key","","Create a new `HkdfPrfKey` with the specified parameters.",null,[[["hashtype",4]],["hkdfprfkey",3]]],[5,"new_hkdf_prf_key_format","","Create a new `HkdfPrfKeyFormat` with the specified…",null,[[["hashtype",4]],["hkdfprfkeyformat",3]]],[5,"new_aes_cmac_prf_key","","Create a new `AesCmacPrfKey` with the specified parameters.",null,[[],["aescmacprfkey",3]]],[5,"new_aes_cmac_prf_key_format","","Create a new `AesCmacPrfKeyFormat` with the specified…",null,[[],["aescmacprfkeyformat",3]]],[5,"new_key_data","","Create a new [`KeyData`] with the specified parameters.",null,[[["keymaterialtype",4]],["keydata",3]]],[5,"new_key","","Create a new `Key` with the specified parameters.",null,[[["keyid",6],["outputprefixtype",4],["keystatustype",4],["keydata",3]],["key",3]]],[5,"new_keyset","","Create a new [`Keyset`] with the specified parameters.",null,[[["keyid",6],["vec",3],["key",3]],["keyset",3]]],[5,"new_encrypted_keyset","","Create a new `EncryptedKeyset` with a specified parameters.",null,[[["keysetinfo",3]],["encryptedkeyset",3]]],[5,"generate_mutations","","Generate different byte mutations for a given byte array.",null,[[],[["vec",3],["vec",3]]]],[5,"z_test_uniform_string","","Use a z test on the given byte string, expecting all bits…",null,[[],[["tinkerror",3],["result",4]]]],[5,"z_test_crosscorrelation_uniform_strings","","Test that the cross-correlation of two byte strings of…",null,[[],[["tinkerror",3],["result",4]]]],[5,"z_test_autocorrelation_uniform_string","","Test whether the autocorrelation of a string points to the…",null,[[],[["tinkerror",3],["result",4]]]],[5,"ecies_aead_hkdf_public_key","","Return a `EciesAeadHkdfPublicKey` with specified parameters.",null,[[["hashtype",4],["ellipticcurvetype",4],["keytemplate",3],["ecpointformat",4]],["eciesaeadhkdfpublickey",3]]],[5,"ecies_aead_hkdf_private_key","","Return an `EciesAeadHkdfPrivateKey` with specified…",null,[[["eciesaeadhkdfpublickey",3]],["eciesaeadhkdfprivatekey",3]]],[5,"generate_ecies_aead_hkdf_private_key","","Generate a new EC key pair and returns the private key…",null,[[["hashtype",4],["ellipticcurvetype",4],["keytemplate",3],["ecpointformat",4]],[["tinkerror",3],["result",4],["eciesaeadhkdfprivatekey",3]]]],[5,"proto_encode","","Convert a protocol buffer message to its serialized form.",null,[[],["vec",3]]],[5,"expect_err","","Check for an expected error.",null,[[["debug",8],["result",4]]]],[5,"expect_err_for_case","","Check for an expected error in a particular test case.",null,[[["debug",8],["result",4]]]],[11,"new","","",6,[[]]],[11,"contents","","Return a copy of the contents of the buffer.",6,[[],["vec",3]]],[0,"hex_string","","Manual JSON deserialization for hex strings.",null,null],[5,"deserialize","tink_testutil::hex_string","",null,[[["deserializer",8]],[["result",4],["vec",3]]]],[0,"wycheproof_result","tink_testutil","Manual JSON deserialization for a `result` enum.",null,null],[5,"deserialize","tink_testutil::wycheproof_result","",null,[[["deserializer",8]],[["result",4],["wycheproofresult",4]]]],[17,"AES_CTR_HMAC_AEAD_KEY_VERSION","tink_testutil","Maximal version of AES-CTR-HMAC-AEAD keys that Tink…",null,null],[17,"AES_CTR_HMAC_AEAD_TYPE_URL","","Type URL of AES-CTR-HMAC-AEAD keys that Tink supports.",null,null],[17,"AES_GCM_KEY_VERSION","","Maximal version of AES-GCM keys.",null,null],[17,"AES_GCM_TYPE_URL","","Type URL of AES-GCM keys that Tink supports.",null,null],[17,"AES_GCM_SIV_KEY_VERSION","","Maximal version of AES-GCM-SIV keys.",null,null],[17,"AES_GCM_SIV_TYPE_URL","","Type URL of AES-GCM-SIV keys that Tink supports.",null,null],[17,"CHA_CHA20_POLY1305_KEY_VERSION","","Maximal version of ChaCha20Poly1305 keys that Tink supports.",null,null],[17,"CHA_CHA20_POLY1305_TYPE_URL","","Type URL of ChaCha20Poly1305 keys.",null,null],[17,"KMS_ENVELOPE_AEAD_KEY_VERSION","","Maximal version of KMSEnvelopeAEAD keys that Tink supports.",null,null],[17,"KMS_ENVELOPE_AEAD_TYPE_URL","","Type URL of KMSEnvelopeAEAD keys.",null,null],[17,"X_CHA_CHA20_POLY1305_KEY_VERSION","","Maximal version of XChaCha20Poly1305 keys that Tink…",null,null],[17,"X_CHA_CHA20_POLY1305_TYPE_URL","","Type URL of XChaCha20Poly1305 keys.",null,null],[17,"ECIES_AEAD_HKDF_PRIVATE_KEY_KEY_VERSION","","Maximal version of keys that this key manager supports.",null,null],[17,"ECIES_AEAD_HKDF_PRIVATE_KEY_TYPE_URL","","Type URL that this key manager supports.",null,null],[17,"ECIES_AEAD_HKDF_PUBLIC_KEY_KEY_VERSION","","Maximal version of keys that this key manager supports.",null,null],[17,"ECIES_AEAD_HKDF_PUBLIC_KEY_TYPE_URL","","Type url that this key manager supports.",null,null],[17,"AES_SIV_KEY_VERSION","","Maximal version of AES-SIV keys that Tink supports.",null,null],[17,"AES_SIV_TYPE_URL","","Type URL of AES-SIV keys.",null,null],[17,"HMAC_KEY_VERSION","","Maximal version of HMAC keys that Tink supports.",null,null],[17,"HMAC_TYPE_URL","","Type URL of HMAC keys.",null,null],[17,"AES_CMAC_KEY_VERSION","","Maximal version of HMAC keys that Tink supports.",null,null],[17,"AES_CMAC_TYPE_URL","","Type URL of AES-CMAC keys.",null,null],[17,"AES_CMAC_PRF_KEY_VERSION","","Maximal version of AES CMAC PRF keys that Tink supports.",null,null],[17,"AES_CMAC_PRF_TYPE_URL","","Type URL of AES CMAC PRF keys.",null,null],[17,"HKDF_PRF_KEY_VERSION","","Maximal version of HKDF PRF keys that Tink supports.",null,null],[17,"HKDF_PRF_TYPE_URL","","Type URL of HKDF PRF keys.",null,null],[17,"HMAC_PRF_KEY_VERSION","","Maximal version of HMAC PRF keys that Tink supports.",null,null],[17,"HMAC_PRF_TYPE_URL","","Type URL of HMAC PRF keys.",null,null],[17,"ECDSA_SIGNER_KEY_VERSION","","Maximum version of ECDSA private keys that Tink supports.",null,null],[17,"ECDSA_SIGNER_TYPE_URL","","Type URL of ECDSA private keys.",null,null],[17,"ECDSA_VERIFIER_KEY_VERSION","","Maximum version of ECDSA public keys that Tink supports.",null,null],[17,"ECDSA_VERIFIER_TYPE_URL","","Type URL of ECDSA public keys.",null,null],[17,"ED25519_SIGNER_KEY_VERSION","","Maximum version of ED25519 private keys that Tink supports.",null,null],[17,"ED25519_SIGNER_TYPE_URL","","Type URL of ED25519 private keys.",null,null],[17,"ED25519_VERIFIER_KEY_VERSION","","Maximum version of ED25519 public keys that Tink supports.",null,null],[17,"ED25519_VERIFIER_TYPE_URL","","Type URL of ED25519 public keys.",null,null],[17,"AES_GCM_HKDF_KEY_VERSION","","Maximum version of AES-GCM-HKDF keys that Tink supports.",null,null],[17,"AES_GCM_HKDF_TYPE_URL","","Type URL of AES-GCM-HKDF keys that Tink supports.",null,null],[17,"AES_CTR_HMAC_KEY_VERSION","","Maximum version of AES-CTR-HMAC keys that Tink supports.",null,null],[17,"AES_CTR_HMAC_TYPE_URL","","Type URL of AES-CTR-HMAC keys that Tink supports.",null,null],[17,"UPSTREAM_VERSION","","The upstream Tink version that this Rust port is based on.",null,null],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"box_clone","","",7,[[],[["box",3],["aead",8]]]],[11,"vzip","","",7,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"box_clone","","",4,[[],[["mac",8],["box",3]]]],[11,"vzip","","",4,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"clone","","",6,[[],["sharedbuf",3]]],[11,"clone","","",7,[[],["dummyaead",3]]],[11,"clone","","",4,[[],["dummymac",3]]],[11,"default","","",6,[[],["sharedbuf",3]]],[11,"default","","",3,[[]]],[11,"eq","","",5,[[["wycheproofresult",4]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"read","","",6,[[],["result",6]]],[11,"read","","",9,[[],["result",6]]],[11,"write","","",6,[[],["result",6]]],[11,"flush","","",6,[[],[["result",4],["error",3]]]],[11,"write","","",9,[[],["result",6]]],[11,"flush","","",9,[[],["result",6]]],[11,"deserialize","","",0,[[],["result",4]]],[11,"deserialize","","",1,[[],["result",4]]],[11,"deserialize","","",2,[[],["result",4]]],[11,"supported","","",8,[[]]],[11,"get_aead","","",8,[[],[["box",3],["result",4],["tinkerror",3]]]],[11,"primitive","","",3,[[],[["tinkerror",3],["result",4],["primitive",4]]]],[11,"new_key","","",3,[[],[["vec",3],["tinkerror",3],["result",4]]]],[11,"type_url","","",3,[[]]],[11,"key_material_type","","",3,[[],["keymaterialtype",4]]],[11,"new_key_data","","",3,[[],[["keydata",3],["result",4],["tinkerror",3]]]],[11,"encrypt","","",7,[[],[["vec",3],["tinkerror",3],["result",4]]]],[11,"decrypt","","",7,[[],[["vec",3],["tinkerror",3],["result",4]]]],[11,"compute_mac","","",4,[[],[["vec",3],["tinkerror",3],["result",4]]]],[11,"verify_mac","","",4,[[],[["tinkerror",3],["result",4]]]]],"p":[[3,"WycheproofSuite"],[3,"WycheproofGroup"],[3,"WycheproofCase"],[3,"DummyAeadKeyManager"],[3,"DummyMac"],[4,"WycheproofResult"],[3,"SharedBuf"],[3,"DummyAead"],[3,"DummyKmsClient"],[3,"IoFailure"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);